colnames_outward_facing_WebMap = c("ReachName","Assessment.Unit","Species","Actions", "Life_Stages","Impaired_Habitat_Attributes_All_Species","Action_Categories_All_Species" )
colnames_reach_info = c("RM_Start", "RM_End")  # data that is in the reach geospatial layer to add to these data
colnames_outward_facing_WebMap_ORDER = c("ReachName","Assessment.Unit","Actions","Species", "Life_Stages","Impaired_Habitat_Attributes_All_Species","Action_Categories_All_Species" )
colnames_outward_facing_WebMap_UPDATED = c("Reach Name","Assessment Unit","Priority Actions","Priority Species","Priority Life Stages","Limiting Factors","Action Categories" )
# ------- filter out for specific columns ----------
Restoration_Prioritization_Output_for_WebMap = Restoration_Prioritization_Output[,colnames_outward_facing_WebMap]
View(Restoration_Prioritization_Output_for_WebMap)
# ----------- add Reach information ------------
# NOTE: this was to add river miles - BUT updated Okanogan reach names are not in the GIS layer with river miles
#Restoration_Prioritization_Output_for_WebMap  =  FUNCTION_add_reach_information(Restoration_Prioritization_Output_for_WebMap,  colnames_reach_info)
# ------------ do MISC processing for output ---------
Restoration_Prioritization_Output_for_WebMap = FUNCTION_prepare_outward_facing_table( Restoration_Prioritization_Output_for_WebMap , colnames_outward_facing_WebMap_ORDER, colnames_outward_facing_WebMap_UPDATED, exclude_bull_trout)
print("----------------------------------------- OUTPUT THE RESULTS --------------------------------------------")
# -------------- Generate Function ---------------
source(paste(script_path, 'FUNCTIONS_for_Protection_Output.R', sep=""))
# -------------- Run Function to generate Protection output -----------
Protection_Prioritization_Output = FUNCTION_Combine_Protection_Output(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']],
exclude_bull_trout)
source(paste(script_path, "Reach_Rankings_Restoration_and_Protection.R", sep=""))
source(paste(script_path, "Reach_Rankings_Restoration_and_Protection.R", sep=""))
# ------  run the function to generate restoration rankings -------
Reach_Rankings_Output = Generate_Restoration_or_Protection_Reach_Rankings_Table(basins_to_include )
# ----------------- separate into Restoration and Protection ----------------
Reach_Rankings_Output_Restoration = Reach_Rankings_Output[['Reach_Rankings_Restoration']]
life_stage_x
#  to test
test_x = TRUE
if(test_x){
basins = c( "Wenatchee", "Methow", "Entiat", "Okanogan")
}
exclude_bull_trout
basins
# -------------------- SPRING CHINOOK ---------------------------
# ---------------- species reach ---------------
species_reach_Spring_Chinook = 'Spring.Chinook.Reach'
# ---------------- species AU Rank RESTORATION ----------
AU_rank_name_restoration_Spring_Chinook = 'SPCHNTier_Restoration'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection_Spring_Chinook = 'SPCHNTier_Protection'
# --------------- Life stage Sum column name ----------
life_stage_sum_column_Spring_Chinook = 'SPCH_Life_Stage_Sum'
# ---------------- Limiting Factor Data frame ---------------
Limiting_Factor_Restoration_data_frame = Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']]
Limiting_Factor_Protection_data_frame = Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Protection']]
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Spring_Chinook_Reach_Scoring_RESTORATION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
protection_output_name = paste(paste("Spring_Chinook_Reach_Scoring_PROTECTION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
Output_ALL_Spring_Chinook_file = paste(paste("Spring_Chinook_Ranks_ALL_OUTPUT" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
# -------------------- STEELHEAD -------------------------------------------
# ---------------- species reach ---------------
species_reach_Steelhead = 'Steelhead.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration_Steelhead = 'STLTier_Restoration'
AU_rank_name_restoration_Steelhead_Okanogan  = 'AU Restoration Rank' # FOR Okanogan
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection_Steelhead = 'STLTier_Protection'
AU_rank_name_protection_Steelhead_Okanogan = 'AU Protection Rank'
# --------------- Life stage Sum column name ----------
life_stage_sum_column_Steelhead = 'SH_Life_Stage_Sum'
# ---------------- Limiting Factor Data frame ---------------
Limiting_Factor_Restoration_data_frame = Limiting_Factor_Steelhead[['Limiting_Factor_Pathway_Restoration']]
Limiting_Factor_Protection_data_frame = Limiting_Factor_Steelhead[['Limiting_Factor_Pathway_Protection']]
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Steelhead_Reach_Scoring_RESTORATION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
protection_output_name = paste(paste("Steelhead_Reach_Scoring_PROTECTION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
Output_ALL_Steelhead_file = paste(paste("Steelhead_Ranks_ALL_OUTPUT" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
if(exclude_bull_trout == "no"){
# ---------------- species reach ---------------
species_reach_Bull_Trout = 'Bull.Trout.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration_Bull_Trout = 'BTTier_Restoration'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection_Bull_Trout = 'BTTier_Protection'
# --------------- Life stage Sum column name ----------
life_stage_sum_column_Bull_Trout = 'BT_Life_Stage_Sum'
# ---------------- Limiting Factor Data frame ---------------
Limiting_Factor_Restoration_data_frame = Limiting_Factor_Bull_Trout[['Limiting_Factor_Pathway_Restoration']]
Limiting_Factor_Protection_data_frame = Limiting_Factor_Bull_Trout[['Limiting_Factor_Pathway_Protection']]
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Bull_Trout_Reach_Scoring_RESTORATION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
protection_output_name = paste(paste("Bull_Trout_Reach_Scoring_PROTECTION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
Output_ALL_Bull_Trout_file = paste(paste("Bull_Trout_Ranks_ALL_OUTPUT" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
}
#  ---------------------------------------------------------------------------------
#           Establish Reach Information Data Frame Just for this Output
#  ---------------------------------------------------------------------------------
# -------- Reach Information data frame for this species -----------
Species_Reach_Information_data = Reach_Information_data
if(length(basins)==1){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter(Basin==basins[1])
}else if(length(basins)==2){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter((Basin==basins[1]) | (Basin==basins[2]) )
}else if(length(basins)==3){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter((Basin==basins[1]) | (Basin==basins[2]) | (Basin==basins[3]) )
}else if(length(basins)==4){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter((Basin==basins[1]) | (Basin==basins[2]) | (Basin==basins[3])  | (Basin==basins[4]) )
}
print(paste("Total reaches after only having basins of interest: ", nrow(Species_Reach_Information_data), sep=""))
# ---------- AU Ranks data frame for this species ---------
Species_AU_Ranks_data_Spring_Chinook = AU_Ranks_data
Species_AU_Ranks_data_Steelhead = AU_Ranks_data
Species_AU_Ranks_data_Steelhead_Okanogan = AU_Ranks_Okanogan
if(exclude_bull_trout == "no"){
Species_AU_Ranks_data_Bull_Trout = AU_Ranks_data
}
#  ---------------------------------------------------------------------------------
#            Filter out to only have Species-specific reaches
#  ---------------------------------------------------------------------------------
# -------------------- SPRING CHINOOK: add additional column for this particular species reach presence ---------------
Spring_Chinook_Reach_Information_data = Species_Reach_Information_data
Spring_Chinook_Reach_Information_data$Species_Reaches = Spring_Chinook_Reach_Information_data[species_reach_Spring_Chinook]
# ----------------------- filter out for only reaches with this species --------------
Spring_Chinook_Reach_Information_data = Spring_Chinook_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
print(paste("Total reaches after Spring Chinook species-reach filter: ", nrow(Spring_Chinook_Reach_Information_data), sep=""))
# -------------------- STEELHEAD: add additional column for this particular species reach presence ---------------
Steelhead_Reach_Information_data =  Species_Reach_Information_data
Steelhead_Reach_Information_data$Species_Reaches = Steelhead_Reach_Information_data[species_reach_Steelhead]
# ----------------------- filter out for only reaches with this species --------------
Steelhead_Reach_Information_data = Steelhead_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
print(paste("Total reaches after Steelhead species-reach filter: ", nrow(Steelhead_Reach_Information_data), sep=""))
if(exclude_bull_trout == "no"){
# -------------------- BULL TROUT: add additional column for this particular species reach presence ---------------
Bull_Trout_Reach_Information_data = Species_Reach_Information_data
Bull_Trout_Reach_Information_data$Species_Reaches = Bull_Trout_Reach_Information_data[species_reach_Bull_Trout]
# ----------------------- filter out for only reaches with this species --------------
Bull_Trout_Reach_Information_data = Bull_Trout_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
print(paste("Total reaches after Bull Trout species-reach filter: ", nrow(Bull_Trout_Reach_Information_data), sep=""))
}
# ---------------------- start data frame that outputs results for all reaches -------------
Output_Spring_Chinook_All = Reach_Information_data[,c(1:4)]
Output_Steelhead_All = Reach_Information_data[,c(1:3,5)]
# ------------------- establish AU Rank ------------------
AU_Rank_Restoration = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "AU_Ranking" &
Restoration_Reach_Scoring$Category_Stage == "filter"),"Category"]
# --------------------------- SPRING CHINOOK -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Spring_Chinook ["Species_AU_Ranks"] = Species_AU_Ranks_data_Spring_Chinook [AU_rank_name_restoration_Spring_Chinook]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Spring_Chinook_restoration = Species_AU_Ranks_data_Spring_Chinook  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Spring_Chinook_Reach_Information_data_restoration = Spring_Chinook_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Spring_Chinook_restoration$`Assessment Unit`)
print(paste("Spring Chinook Restoration - total AU rank filter: ", nrow(Spring_Chinook_Reach_Information_data_restoration), sep=""))
# --------------------------- STEELHEAD -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead ["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead [AU_rank_name_restoration_Steelhead]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_restoration = Species_AU_Ranks_data_Steelhead  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_restoration = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_restoration$`Assessment Unit`)
# ---------------- add Okanogan -------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead_Okanogan["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead_Okanogan[AU_rank_name_restoration_Steelhead_Okanogan]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_restoration_Okanogan = Species_AU_Ranks_data_Steelhead_Okanogan %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_restoration_Okanogan = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_restoration_Okanogan$`EDT AU`)
# ------------------- combine Wen-Ent-Methow and Okanogan ------------
Steelhead_Reach_Information_data_restoration = rbind(Steelhead_Reach_Information_data_restoration, Steelhead_Reach_Information_data_restoration_Okanogan)
print(paste("Steelhead Restoration - total AU rank filter: ", nrow(Steelhead_Reach_Information_data_restoration), sep=""))
# --------------------------- BULL TROUT -----------------
if(exclude_bull_trout == "no"){
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Bull_Trout ["Species_AU_Ranks"] = Species_AU_Ranks_data_Bull_Trout [AU_rank_name_restoration_Bull_Trout]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Bull_Trout_restoration = Species_AU_Ranks_data_Bull_Trout  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Bull_Trout_Reach_Information_data_restoration = Bull_Trout_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Bull_Trout_restoration$`Assessment Unit`)
print(paste("Bull Trout Restoration - total AU rank filter: ", nrow(Bull_Trout_Reach_Information_data_restoration), sep=""))
}
AU_Rank_Data = Species_AU_Ranks_data_Spring_Chinook [,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data) = c("Assessment.Unit", "AU Restoration Rank")
Output_Spring_Chinook_All = merge(Output_Spring_Chinook_All  ,AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
# ----------- Steelhead ----------
AU_Rank_Data = Species_AU_Ranks_data_Steelhead_Okanogan[,c("EDT AU","AU Restoration Rank")]
colnames(AU_Rank_Data)[1] = "Assessment.Unit"
AU_Rank_Data2 = Species_AU_Ranks_data_Steelhead [,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data2) = c("Assessment.Unit", colnames(AU_Rank_Data)[2])
AU_Rank_Data = rbind(AU_Rank_Data, AU_Rank_Data2)
Output_Steelhead_All = merge(Output_Steelhead_All  ,AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
# ------------------- establish AU Rank ------------------
AU_Rank_Protection = Protection_Reach_Scoring[which(Protection_Reach_Scoring$Indicator == "AU_Ranking"  &
Protection_Reach_Scoring$Category_Stage == "filter"),"Category"]
# --------------------------- SPRING CHINOOK -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Spring_Chinook ["Species_AU_Ranks"] = Species_AU_Ranks_data_Spring_Chinook [AU_rank_name_protection_Spring_Chinook]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Spring_Chinook_protection = Species_AU_Ranks_data_Spring_Chinook  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Protection)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Spring_Chinook_Reach_Information_data_protection = Spring_Chinook_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Spring_Chinook_protection$`Assessment Unit`)
print(paste("Spring Chinook Protection - total AU rank filter: ", nrow(Spring_Chinook_Reach_Information_data_protection), sep=""))
# --------------------------- STEELHEAD -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead ["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead [AU_rank_name_protection_Steelhead]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_protection = Species_AU_Ranks_data_Steelhead  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Protection)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_protection = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_protection$`Assessment Unit`)
# ---------------- add Okanogan -------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead_Okanogan["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead_Okanogan[AU_rank_name_protection_Steelhead_Okanogan]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_protection_Okanogan = Species_AU_Ranks_data_Steelhead_Okanogan %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Protection)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_protection_Okanogan = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_protection_Okanogan$`EDT AU`)
# ------------------- combine Wen-Ent-Methow and Okanogan ------------
Steelhead_Reach_Information_data_protection = rbind(Steelhead_Reach_Information_data_protection, Steelhead_Reach_Information_data_protection_Okanogan)
print(paste("Steelhead Protection - total AU rank filter: ", nrow(Steelhead_Reach_Information_data_protection), sep=""))
# --------------------------- BULL TROUT -----------------
if(exclude_bull_trout == "no"){
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Bull_Trout ["Species_AU_Ranks"] = Species_AU_Ranks_data_Bull_Trout [AU_rank_name_protection_Bull_Trout]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Bull_Trout_protection = Species_AU_Ranks_data_Bull_Trout  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Protection)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Bull_Trout_Reach_Information_data_protection = Bull_Trout_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Bull_Trout_protection$`Assessment Unit`)
print(paste("Bull Trout Protection - total AU rank filter: ", nrow(Bull_Trout_Reach_Information_data_protection), sep=""))
}
# -------- add to output that includes all reaches -----
# ------ Spring Chinook --------
AU_Rank_Data = Species_AU_Ranks_data_Spring_Chinook[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data) = c("Assessment.Unit", "AU Protection Rank")
Output_Spring_Chinook_All = merge(Output_Spring_Chinook_All  ,AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
# --------- Steelhead ----------
AU_Rank_Data = Species_AU_Ranks_data_Steelhead_Okanogan[,c("EDT AU","AU Protection Rank")]
colnames(AU_Rank_Data)[1] = "Assessment.Unit"
AU_Rank_Data2 = Species_AU_Ranks_data_Steelhead [,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data2) = c("Assessment.Unit", colnames(AU_Rank_Data)[2])
AU_Rank_Data = rbind(AU_Rank_Data, AU_Rank_Data2)
Output_Steelhead_All = merge(Output_Steelhead_All  ,AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
# ------------------- establish Habitat Quality Score cutoff ------------------
HQ_Score_Restoration_Reach_Scores = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "Habitat_Quality_Score" &
Restoration_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
# ----------------------- filter out for Habitat_Quality_Scores reaches with Habitat Quality Score criteria --------------
Habitat_Quality_Scores_Restoration = Habitat_Quality_Scores %>%
filter(HQ_Pct   >=   HQ_Score_Restoration_Reach_Scores$Category_lower_limit) %>%
filter(HQ_Pct   <  HQ_Score_Restoration_Reach_Scores$Category_upper_limit)
# -------------- prepare Okanogan - Steelhead --------------
Habitat_Quality_Scores_Restoration_Okanogan = Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']]
Habitat_Quality_Scores_Restoration_Okanogan = Habitat_Quality_Scores_Restoration_Okanogan[which(Habitat_Quality_Scores_Restoration_Okanogan$Basin == "Okanogan"),]
Habitat_Quality_Scores_Restoration_Okanogan_all = Habitat_Quality_Scores_Restoration_Okanogan
Habitat_Quality_Scores_Restoration_Okanogan = Habitat_Quality_Scores_Restoration_Okanogan %>%
filter(HQ_Pct   >=   HQ_Score_Restoration_Reach_Scores$Category_lower_limit) %>%
filter(HQ_Pct   <  HQ_Score_Restoration_Reach_Scores$Category_upper_limit)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
# ----------------------- SPRING CHINOOK ---------------------
Habitat_Quality_Pathway_Restoration_Spring_Chinook = Spring_Chinook_Reach_Information_data_restoration  %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Restoration$`ReachName`)
print(paste("Spring Chinook Restoration - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Restoration_Spring_Chinook), sep=""))
# ----------------------- STEELHEAD ---------------------
Habitat_Quality_Pathway_Restoration_Steelhead = Steelhead_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Restoration$`ReachName`)
# --------- add Okanogan values -------
Habitat_Quality_Pathway_Restoration_Steelhead_Okanogan = Steelhead_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Restoration_Okanogan$`ReachName`)
# -------- add to output for all reaches -----
# -------- add to total output -----
HQ_data_x = PRCNT_Habitat_Quality_Okanogan_EDT[,c("ReachName","HQ_Score")]
colnames(HQ_data_x) = c("ReachName", "HQ_Pct")
HQ_data_x2 = Habitat_Quality_Scores[which(Habitat_Quality_Scores$Basin != "Okanogan"),c("ReachName", "HQ_Pct")]
HQ_data_x = rbind(HQ_data_x, HQ_data_x2)
Output_Spring_Chinook_All = merge(Output_Spring_Chinook_All  ,HQ_data_x, by = "ReachName" , all.x=TRUE)  # NOTE - some Okanogan reaches are not present in the EDT results HQ output (PRCNT_Habitat_Quality_Okanogan_EDT)
Output_Steelhead_All = merge(Output_Steelhead_All  ,HQ_data_x, by = "ReachName", all.x=TRUE )  # NOTE - some Okanogan reaches are not present in the EDT results HQ output (PRCNT_Habitat_Quality_Okanogan_EDT)
# --------- combine Wen-Ent-Wen and Okanogan -----------
Habitat_Quality_Pathway_Restoration_Steelhead = rbind(Habitat_Quality_Pathway_Restoration_Steelhead, Habitat_Quality_Pathway_Restoration_Steelhead_Okanogan)
print(paste("Steelhead Restoration - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Restoration_Steelhead), sep=""))
# ----------------------- BULL TROUT---------------------
if(exclude_bull_trout == "no"){
Habitat_Quality_Pathway_Restoration_Bull_Trout = Bull_Trout_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Restoration$`ReachName`)
print(paste("Steelhead Restoration - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Restoration_Bull_Trout), sep=""))
}
# ------------------- establish Habitat Quality Score cutoff ------------------
HQ_Score_Protection_Reach_Scores = Protection_Reach_Scoring[which(Protection_Reach_Scoring$Indicator == "Habitat_Quality_Score" &
Protection_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
# ----------------------- filter out for Habitat_Quality_Scores reaches with Habitat Quality Score criteria --------------
Habitat_Quality_Scores_Protection = Habitat_Quality_Scores %>%
filter(HQ_Pct   >=   HQ_Score_Protection_Reach_Scores$Category_lower_limit) %>%
filter(HQ_Pct   <  HQ_Score_Protection_Reach_Scores$Category_upper_limit)
# -------------- prepare Okanogan - Steelhead --------------
Habitat_Quality_Scores_Protection_Okanogan = Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']]
Habitat_Quality_Scores_Protection_Okanogan = Habitat_Quality_Scores_Protection_Okanogan[which(Habitat_Quality_Scores_Protection_Okanogan$Basin == "Okanogan"),]
Habitat_Quality_Scores_Protection_Okanogan = Habitat_Quality_Scores_Protection_Okanogan %>%
filter(HQ_Pct   >=   HQ_Score_Protection_Reach_Scores$Category_lower_limit) %>%
filter(HQ_Pct   <  HQ_Score_Protection_Reach_Scores$Category_upper_limit)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
# ----------------------- SPRING CHINOOK ---------------------
Habitat_Quality_Pathway_Protection_Spring_Chinook = Spring_Chinook_Reach_Information_data_protection %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Protection$`ReachName`)
print(paste("Spring Chinook Protection - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Protection_Spring_Chinook), sep=""))
# ----------------------- STEELHEAD ---------------------
Habitat_Quality_Pathway_Protection_Steelhead = Steelhead_Reach_Information_data_protection %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Protection$`ReachName`)
# --------- add Okanogan values -------
Habitat_Quality_Pathway_Protection_Steelhead_Okanogan = Steelhead_Reach_Information_data_protection %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Protection_Okanogan$`ReachName`)
# --------- combine Wen-Ent-Wen and Okanogan -----------
Habitat_Quality_Pathway_Protection_Steelhead = rbind(Habitat_Quality_Pathway_Protection_Steelhead, Habitat_Quality_Pathway_Protection_Steelhead_Okanogan)
print(paste("Steelhead Protection - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Protection_Steelhead), sep=""))
# ----------------------- BULL TROUT---------------------
if(exclude_bull_trout == "no"){
Habitat_Quality_Pathway_Protection_Bull_Trout = Bull_Trout_Reach_Information_data_protection %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Protection$`ReachName`)
print(paste("Bull Trout Protection - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Protection_Bull_Trout), sep=""))
}
# ----------------------- SPRING CHINOOK ---------------------
# ------------- only pull reaches with unacceptable attributes -----------
Limiting_Factor_Pathway_Spring_Chinook_Reach_Ranking = Limiting_Factor_Pathway_Spring_Chinook[["Limiting_Factor_Pathway_Restoration"]][nchar(Limiting_Factor_Pathway_Spring_Chinook[["Limiting_Factor_Pathway_Restoration"]]$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes)>0,]
# --------------- filter  the reaches ---------------
Limiting_Factor_Pathway_Restoration_Spring_Chinook = Spring_Chinook_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Limiting_Factor_Pathway_Spring_Chinook_Reach_Ranking$`ReachName`)
print(paste("Spring Chinook Restoration - total after LF score filter: ", nrow(Limiting_Factor_Pathway_Restoration_Spring_Chinook), sep=""))
# ----------------------- STEELHEAD ---------------------
# ------------- only pull reaches with unacceptable attributes -----------
Limiting_Factor_Pathway_Steelhead_Reach_Ranking = Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]][nchar(Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]]$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes)>0,]
# --------------- filter  the reaches ---------------
Limiting_Factor_Pathway_Restoration_Steelhead = Steelhead_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Limiting_Factor_Pathway_Steelhead_Reach_Ranking$`ReachName`)
print(paste("Steelhead Restoration - total after LF score filter: ", nrow(Limiting_Factor_Pathway_Restoration_Steelhead), sep=""))
# ------------------ function that outputs the entire row (so you can check) ------
Limiting_Factor_Output_ALL_Spring_Chinook = FUNCTION_calc_Limiting_Factor_Score_ALL_Output(Output_Spring_Chinook_All, "Spring Chinook")
Limiting_Factor_Output_ALL_Steelhead = FUNCTION_calc_Limiting_Factor_Score_ALL_Output(Output_Steelhead_All, "Steelhead")
# ------------------------- Spring Chinook ----------------------------------
# list "yes" or "no" if it has a limiting factor in a high priority life stage (maybe list the limiting factor OR life stage?)
# ----------- loop through each reach and identify if the reach has a limiting factor in a priority life stage
Output_LF_all = c()
for(reach_x in Output_Spring_Chinook_All$ReachName[which(Output_Spring_Chinook_All$Basin != "Okanogan")]){
# ------------------ pull the priority life stages in this reach -------------------
output_life_stages_x = FUNCTION_pull_High_Priority_Life_Stages_for_a_reach(reach_x, "Spring Chinook")
reach_in_LF_output = any(Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]]$ReachName == reach_x)
# --------------- IF there is a reach in the LF Pathway output -------------
if(reach_in_LF_output){
rows_x = which(Limiting_Factor_Pathway_Spring_Chinook[["Limiting_Factor_Pathway_Restoration"]]$ReachName == reach_x)
#output_life_stages_x = c()
output_limiting_factor_x = c()
for(x in rows_x){
#output_life_stages_x = c(output_life_stages_x, Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]][x,c("life_stage")])
output_limiting_factor_x = c(output_limiting_factor_x, Limiting_Factor_Pathway_Spring_Chinook[["Limiting_Factor_Pathway_Restoration"]][x,c("unacceptable_and_at_risk_1_3_indiv_habitat_attributes")])
}
# ------------- IF reach is not in the LF pathway -----
}else{
#output_life_stages_x = "No Priority Life Stages with Limiting Factors"
output_limiting_factor_x = "No Priority Life Stages with Limiting Factors"
}
output_life_stages_x = paste(output_life_stages_x, collapse = ",")
output_limiting_factor_x = paste(output_limiting_factor_x, collapse = ",")
Output_LF_x = t(as.data.frame(c(reach_x,output_life_stages_x, output_limiting_factor_x )))
colnames(Output_LF_x) = c("ReachName", "Priority_Life_Stages_with_Limiting_Factors","Limiting_Factors_for_Priority_Life_Stages")
Output_LF_all = rbind(Output_LF_all, Output_LF_x )
}
life_stage_x
Output_Spring_Chinook_All$ReachName[which(Output_Spring_Chinook_All$Basin != "Okanogan")]
reach_x
# ------------------ pull the priority life stages in this reach -------------------
output_life_stages_x = FUNCTION_pull_High_Priority_Life_Stages_for_a_reach(reach_x, "Spring Chinook")
# ------------------ pull the priority life stages in this reach -------------------
output_life_stages_x = FUNCTION_pull_High_Priority_Life_Stages_for_a_reach(reach_x, "Spring Chinook")
# -----------------------------------------------------------------------------------------------------------------------------------------------
#
#               Function to pull all the High Priority life stages
#
# -----------------------------------------------------------------------------------------------------------------------------------------------
test_x = TRUE
if(test_x){
species_x = "Spring Chinook"
}
# --------------- pull life stage priorities for this reach ------------
reach_row_life_stages_x = Life_Stage_Priorities_AU_and_Reach_data[which(Life_Stage_Priorities_AU_and_Reach_data$ReachName == reach_x), ]
life_stages_priority_list  = c()
if(species_x == "Spring Chinook"){
life_stages = Attribute_LifeStage_Crosswalk$`Life Stage`[Attribute_LifeStage_Crosswalk$Species == "Spring Chinook"]
life_stages = unique(life_stages)
for(life_stage_x in life_stages){
colname_x = spring_chinook_life_stages[[life_stage_x]]
priority_x = reach_row_life_stages_x[colname_x]
if(priority_x == "High Priority"){
life_stages_priority_list = c(life_stages_priority_list, life_stage_x)
}
}
}else if(species_x == "Steelhead"){
life_stages = Attribute_LifeStage_Crosswalk$`Life Stage`[Attribute_LifeStage_Crosswalk$Species == "Steelhead"]
life_stages = unique(life_stages)
for(life_stage_x in life_stages){
colname_x = steelhead_life_stages[[life_stage_x]]
priority_x = reach_row_life_stages_x[colname_x]
if(priority_x == "High Priority"){
life_stages_priority_list = c(life_stages_priority_list, life_stage_x)
}
}
}else if(species_x == "Bull Trout"){
life_stages = Attribute_LifeStage_Crosswalk$`Life Stage`[Attribute_LifeStage_Crosswalk$Species == "Bull Trout"]
life_stages = unique(life_stages)
for(life_stage_x in life_stages){
colname_x = bull_trout_life_stages[[life_stage_x]]
priority_x = reach_row_life_stages_x[colname_x]
if(priority_x == "High Priority"){
life_stages_priority_list = c(life_stages_priority_list, life_stage_x)
}
}
}
species_x == "Spring Chinook"
life_stages = Attribute_LifeStage_Crosswalk$`Life Stage`[Attribute_LifeStage_Crosswalk$Species == "Spring Chinook"]
life_stages = unique(life_stages)
life_stages
life_stage_x
colname_x = spring_chinook_life_stages[[life_stage_x]]
spring_chinook_life_stages
colnames(spring_chinook_life_stages)
spring_chinook_life_stages
# ---------------------- match column names to life stages ------------------------------
spring_chinook_life_stages = list("Adult Migration" = "SPCH Adult Migration  AU LS Priority",
"Holding"=	"SPCH Holding  AU LS Priority",
"Holding and Maturation"=	"SPCH Holding  AU LS Priority",
"Spawning and Incubation" = "SPCH Spawning AU LS Priority",
"Fry Colonization" = "SPCH Fry Colonization  AU LS Priority",
"Fry" = "SPCH Fry Colonization  AU LS Priority",
"Summer Rearing"  = "SPCH Summer Rearing  AU LS Priority",
"Winter Rearing" = "SPCH Winter Rearing  AU LS Priority",
"Smolt Outmigration"="SPCH Smolt Emigration  AU LS Priority",
"Holding and Maturation" = "SPCH Holding")
steelhead_life_stages =     life_stage_priority_list = list("Adult Migration"  = "SH Adult Migration  AU LS Priority",
"Holding"  =  "SH Holding  AU LS Priority",
"Holding and Maturation"  =  "SH Holding  AU LS Priority",
"Spawning and Incubation" ="SH Spawning AU LS Priority",
"Fry" = "SH Fry Colonization  AU LS Priority",
"Fry Colonization" = "SH Fry Colonization  AU LS Priority",
"Summer Rearing" = "SH Summer Rearing  AU LS Priority",
"Winter Rearing"  = "SH Winter Rearing  AU LS Priority",
"Smolt Outmigration" = "SH Smolt Emigration  AU LS Priority")
bull_trout_life_stages = list("Adult Migration"  = "BT Adult Migration  AU LS Priority",
"Holding and Maturation"= 	"BT Holding  AU LS Priority",
"Spawning and Incubation" =	"BT Spawning AU LS Priority",
"BT Natal Rearing" =  "BT Natal Rearing  AU LS Priority",
"Adult Non-Spawning" = "BT Adult Non-Spawning AU LS Priority",
"BT Subadult Rearing"=  "BT Subadult Rearing  AU LS Priority")
life_stages_priorities = list("spring_chinook_life_stages" =  spring_chinook_life_stages,
"steelhead_life_stages" = steelhead_life_stages,
"bull_trout_life_stages" = bull_trout_life_stages )
# ---------------------- match column names to life stages ------------------------------
spring_chinook_life_stages_presence = list("Adult Migration" = "SPCH Adult Migration",	  "Holding"=	"SPCH Holding", "Holding and Maturation"=	"SPCH Holding",
"Spawning and Incubation" = "SPCH Spawning",	"Fry Colonization" = "SPCH Fry Colonization", 	"Fry" = "SPCH Fry Colonization",
"Summer Rearing"  = "SPCH Summer Rearing", 	"Winter Rearing" = "SPCH Winter Rearing",
"Smolt Outmigration"= "SPCH Smolt Emigration"  )
steelhead_life_stages_presence =     life_stage_priority_list = list("Adult Migration"  = "SH Adult Migration","Holding"  =  "SH Holding",
"Holding and Maturation"  =  "SH Holding",	"Spawning and Incubation" ="SH Spawning",
"Fry" = "SH Fry Colonization","Fry Colonization" = "SH Fry Colonization",
"Spawning and Incubation" = "SH Spawning", "Summer Rearing" =  "SH Summer Rearing",
"Winter Rearing"  = "SH Winter Rearing",	"Smolt Outmigration" = "SH Smolt Emigration")
bull_trout_life_stages_presence = list("Adult Migration"  = "BT Adult Migration",	"Holding and Maturation"= 	"BT Holding and Maturation",
"Spawning and Incubation" =	"BT Spawning",	"BT Natal Rearing" =  "BT Natal Rearing",
"Adult Non-Spawning" = "BT Adult Non-Spawning", "BT Subadult Rearing"=  "BT Subadult Rearing")
life_stages_prescence = list("spring_chinook_life_stages" =  spring_chinook_life_stages_presence,
"steelhead_life_stages" = steelhead_life_stages_presence,
"bull_trout_life_stages" = bull_trout_life_stages_presence )
source(paste(script_path, "Reach_Rankings_Restoration_and_Protection.R", sep=""))
# ------  run the function to generate restoration rankings -------
Reach_Rankings_Output = Generate_Restoration_or_Protection_Reach_Rankings_Table(basins_to_include )
# ----------------- separate into Restoration and Protection ----------------
Reach_Rankings_Output_Restoration = Reach_Rankings_Output[['Reach_Rankings_Restoration']]
Reach_Rankings_Output_Protection = Reach_Rankings_Output[['Reach_Ranking_Protection']]
dim(Reach_Rankings_Output_Restoration)
View(Reach_Rankings_Output_Restoration)
View(Restoration_Prioritization_Output_for_WebMap)
dim(Restoration_Prioritization_Output_for_WebMap)
View(Protection_Prioritization_Output)
View(Habitat_Quality_Scores4)
View(Habitat_Quality_Scores)
