}
}
}
} # end of reaches loops
# ------------------------------------------------------------
#    Add Fish Barrier
# ------------------------------------------------------------
for(row_x in 1:nrow(Barriers_Pathways_Data)){
# --------------- generate items
reach_x = Barriers_Pathways_Data$ReachName[row_x]
habitat_attribute_x = Barriers_Pathways_Data$Habitat_Attributes[row_x]
action_x = Barriers_Pathways_Data$`Action Category`[row_x]
number_of_actions_x = 1
# ------------------------------------------------------------
#     Add Reach Information Data
# ------------------------------------------------------------
HQ_and_LF_combo_x = as.data.frame(Reach_Information_data[which(Reach_Information_data$ReachName == reach_x), columns_info])
# ------------------------------------------------------------
#     Add Habitat Attribute
# ------------------------------------------------------------
HQ_and_LF_combo_x$Habitat_Attribute = habitat_attribute_x
# ------------------- use this info for all rows for this reach/habitat attribute (barriers) ----------
HQ_and_LF_combo_x_ORIG = HQ_and_LF_combo_x
# ------------------------------------------------------------
#     Identify life stages in reach (based on reach presence)
# ------------------------------------------------------------
spring_chinook_presence = FUNCTION_generate_life_stage_list_for_species_reach("Spring Chinook", reach_x)
steelhead_presence = FUNCTION_generate_life_stage_list_for_species_reach("Steelhead", reach_x)
bull_trout_presence = FUNCTION_generate_life_stage_list_for_species_reach("Bull Trout", reach_x)
# --------------- get list of species --------------
species_list = c()
if(!is.null(spring_chinook_presence)){species_list = paste(species_list, "Spring Chinook", sep=",")}
if(!is.null(steelhead_presence)){species_list = paste(species_list, "Steelhead", sep=",")}
if(!is.null(bull_trout_presence)){species_list = paste(species_list, "Bull Trout",sep= ",")}
species_list = unlist( strsplit(substr(species_list,2,nchar(species_list)), "," )  )
# -------------------- LOOP through each species ----------
for(species_x in species_list){
# ------------- start new row --------------
HQ_and_LF_combo_x = HQ_and_LF_combo_x_ORIG
# ------------------------------------------------------------
#   List the species
# ------------------------------------------------------------
HQ_and_LF_combo_x$Species = species_x
# ------------ save row for each life stage ------
HQ_and_LF_combo_x_Species = HQ_and_LF_combo_x
# ------------------------------------------------------------
#   Get list of life stages for this species
# ------------------------------------------------------------
if(species_x == "Spring Chinook"){  life_stages_all = unlist(strsplit(spring_chinook_presence, ","))   }
if(species_x == "Steelhead"){  life_stages_all = unlist(strsplit(steelhead_presence, ","))   }
if(species_x == "Bull Trout"){  life_stages_all = unlist(strsplit(bull_trout_presence, ","))   }
for(life_stage_x in life_stages_all){
# ------------- start new row --------------
HQ_and_LF_combo_x = HQ_and_LF_combo_x_Species
# ------------------------------------------------------------
#     Add Life Stage
# ------------------------------------------------------------
HQ_and_LF_combo_x$Life_Stage = life_stage_x
# ------------------------------------------------------------
#     Add Action pathway
# ------------------------------------------------------------
HQ_and_LF_combo_x$Action = "Restore Fish Passage"
# ------------------------------------------------------------
#    Action Categories
# ------------------------------------------------------------
# ------ add to row ---------
HQ_and_LF_combo_x$Action_Categories = action_category_x
HQ_and_LF_combo_x$Number_of_Actions = number_of_actions_x
# ------------------------------------------------------------
#  Unacceptable and At Risk Habitat Attributes (Yes/No)
# ------------------------------------------------------------
HQ_and_LF_combo_x$Unacceptable_Habitat_Attributes_Presence = "no"
HQ_and_LF_combo_x$At_Risk_Habitat_Attributes_Presence = "no"
# ------------------------------------------------------------
#  Metric a Core metric
# ------------------------------------------------------------
HQ_and_LF_combo_x$Core_Metric = "no"
# ------------------------------------------------------------
#  Reach Rank (FOR NOW just putting a "1")
# ------------------------------------------------------------
HQ_and_LF_combo_x$Reach_Rank = 1
# ------------------------------------------------------------
# Combine with output data frame
# ------------------------------------------------------------
Reach_Habitat_Attribute_combined_output = rbind(Reach_Habitat_Attribute_combined_output, HQ_and_LF_combo_x)
}
}
}
# ------------------------------------------------------------
#    Remove Duplicates (since can have same life stage and habitat attribute via HQ and LF pathways)
# ------------------------------------------------------------
reachname_habitat_attribute_life_stage_species_combo = with(Reach_Habitat_Attribute_combined_output, paste0(ReachName, Habitat_Attribute, Life_Stage, Species))
duplicated_combos = which( duplicated(reachname_habitat_attribute_life_stage_species_combo) )
Reach_Habitat_Attribute_combined_output = Reach_Habitat_Attribute_combined_output[-duplicated_combos, ]
# ------------------------------------------------------------
#    Update Habitat Attribute_Names
# ------------------------------------------------------------
unique_habitat_attributes = unique(Attribute_LifeStage_Crosswalk$Habitat_Attribute_2)
for(habitat_attribute_x in unique_habitat_attributes){
# ----------- new name (name with spaces in it so it is more readable) -------
new_name_x = which(Attribute_LifeStage_Crosswalk$Habitat_Attribute_2 == habitat_attribute_x )
new_name = Attribute_LifeStage_Crosswalk$`Habitat Attribute`[new_name_x[1]]
# ------ identify all the places the name exists ---------
rows_habitat_attribute_x = which(Reach_Habitat_Attribute_combined_output$Habitat_Attribute == habitat_attribute_x)
# ------------ updated wit new name ------------
Reach_Habitat_Attribute_combined_output$Habitat_Attribute[rows_habitat_attribute_x] = new_name
}
if(exclude_bull_trout == "yes"){
# ----------- which rows are Bull Trout ------------
bull_trout_rows_x = which(Reach_Habitat_Attribute_combined_output$Species == "Bull Trout")
# ------------- remove those rows from output ---------------
Reach_Habitat_Attribute_combined_output = Reach_Habitat_Attribute_combined_output[ -bull_trout_rows_x , ]
}
# ------------------------------------------------------------
#   Update References for WebMap: PRCT (%), AND (&), and the "/" as a space
# ------------------------------------------------------------
# -------------------- Fines/Embeddedness ------------------
rename_rows = which(Reach_Habitat_Attribute_combined_output$Habitat_Attribute == "% Fines/Embeddedness")
Reach_Habitat_Attribute_combined_output$Habitat_Attribute[rename_rows] = "PRCNT Fines and Embeddedness"
# -------------------- Pool Quantity and Quality ------------------
rename_rows = which(Reach_Habitat_Attribute_combined_output$Habitat_Attribute == "Pool Quantity & Quality" )
Reach_Habitat_Attribute_combined_output$Habitat_Attribute[rename_rows] = "Pool Quantity and Quality"
# -------------------- Entrainment and Stranding ------------------
rename_rows = which(Reach_Habitat_Attribute_combined_output$Habitat_Attribute == "Entrainment/Stranding" )
Reach_Habitat_Attribute_combined_output$Habitat_Attribute[rename_rows] = "Entrainment and Stranding"
Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage_Species( Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info, exclude_bull_trout, HQ_life_stages)
HQ_life_stages = "yes"  # if you want to add life stages for Habitat Quality
Reach_Habitat_Attribute_Life_Stage_Restoration_Output = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info, exclude_bull_trout)
# ---------------------------------------------------------------------------
#  simple Criteria for output
# ---------------------------------------------------------------------------
basins_to_include = c("Methow",  "Entiat","Wenatchee")  # basins to include insimulation
exclude_bull_trout = "no"  # if "yes" -> remove bull trout for WebMap applications
output_Habitat_Quality_and_Habitat_Attribute_Scores = "no"  # enter "yes" or "no" if you want this output
# ---------------------------------------------------------------------------
#
#      Directories of Input and Output data
#
# ---------------------------------------------------------------------------
time1 <- proc.time()[3] # for timing the total time to run the tool
# --------------- directory of scripts -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
data_path = 'Data/'
# ----------- directory for output ---------
output_path = 'Output/'
# Old location of the reach attribute (NOT Raw) data:  'Y:/UCRTT/Prioritization/Tables for Tools/'
# ---------------------------------------------------------------------------
#
#     Read in Data
#
# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
# ---------------------------------------------------------------------------
#
#      Criteria for Filters
#
# ---------------------------------------------------------------------------
print("----------------------------------------- ASSIGN CRITERIA --------------------------------------------")
source(paste(script_path, 'Criteria_Script.R', sep=""))
# ---------------------------------------------------------------------------
#
#   Generate Habitat Quality and Habitat Attribute Scores Table
#
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#   Generate Habitat Quality Restoration and Protection Score
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITA QUALITY SCORES --------------------------------------------")
source(paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep=""))
# output is Habitat_Quality_Pathway_Output
# View(Habitat_Quality_Pathway_Output[['Habitat_Quality_Pathway_Protection']])
# ---------------------------------------------------------------------------
#   Generate Habitat Attribute Table (used in Limiting Factor Pathway)
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITAT ATTRIBUTE SCORES (for Limtiting Factor Pathway) --------------------------------------------")
source(paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep=""))
# OUTPUT is Habitat_Attribute_Scores
# ---------------------------------------------------------------------------
#
#   Generate Priority Reaches and Habitat Attributes
#
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#   Apply Habitat Quality Pathway Filters
#     NOTE: the function below runs HQ Pathway for Restoration and Protection
# ---------------------------------------------------------------------------
print("----------------------------------------- APPLY HABITAT QUALITY FILTERS FOR PRIORITIZATION --------------------------------------------")
source(paste(script_path, 'Habitat_Quality_Pathway_Filter.R', sep=""))
# ----- set names of Habitat Quality Scores to sum ------
habitat_quality_scores_colnames_for_sum = c("Stability_Mean" , "CoarseSubstrate_score" ,"Cover-Wood_score", "Flow-SummerBaseFlow_score",
"Off-Channel-Floodplain_score", "Off-Channel-Side-Channels_score","PoolQuantity&Quality_score",
"Riparian_Mean","Temperature-Rearing_score")
Habitat_Quality_Pathway_Spring_Chinook = Generate_Habitat_Quality_Output_Table("Spring Chinook", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Steelhead = Generate_Habitat_Quality_Output_Table("Steelhead", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Bull_Trout = Generate_Habitat_Quality_Output_Table("Bull Trout", basins_to_include, habitat_quality_scores_colnames_for_sum )
# View(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
# View(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']])
# View(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']])
# ---------------------------------------------------------------------------
#   Apply Limiting Factor Pathway Filters
#     NOTE: the function below runs LF Pathway for Restoration and Protection
# ---------------------------------------------------------------------------
# NOTE: Protection output includes habitat attributes but does not filter based on habitat attributes
print("----------------------------------------- APPLY LIMITING FACTOR FILTERS FOR PRIORITIZATION --------------------------------------------")
source(paste(script_path, 'Limiting_Factor_Pathway_Filter.R', sep=""))
Limiting_Factor_Pathway_Spring_Chinook = Generate_Limiting_Factor_Output_Table("Spring Chinook", basins_to_include)
Limiting_Factor_Pathway_Steelhead = Generate_Limiting_Factor_Output_Table("Steelhead", basins_to_include)
Limiting_Factor_Pathway_Bull_Trout = Generate_Limiting_Factor_Output_Table("Bull Trout", basins_to_include)
# View(Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']])
# View(Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Protection']])
#View(Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Protection']][c('ReachName','LF_Sum','LF_Pct','LF_Score_Protection')])
#unique(Limiting_Factor_Bull_Trout[['Limiting_Factor_Pathway_Restoration']]$unacceptable_and_at_risk_1_3_indiv_habitat_attributes)
# ---------------------------------------------------------------------------
#
#   Generate Action Categories
#         (do not do this for Protection since no Actions generated for Protection)
#
# ---------------------------------------------------------------------------
# NOTE: 1) fix action_categories_output so you can add it to any data frame,
#       2) generate outputs for meeting
print("----------------------------------------- GENERATE ACTIONS CATEGORIES FOR HQ AND LF PATHWAY --------------------------------------------")
source(paste(script_path, 'FUNCTIONS_for_Generating_Action_Categories.R', sep=""))
# ------------------------------------------------------------------------------------
#                     RESTORATION
# ------------------------------------------------------------------------------------
# ----------------------------------------
#    Habitat Quality Pathway
# ----------------------------------------
Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']])
# ----------------------------------------
#    Limiting Factors Pathway
# ----------------------------------------
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']])
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']])
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']])
# ------------------------------------------------------------------------------------
#                     PROTECTION
# -----------------------------------------------------------------------------------
# NOTE - DO NOT need to generate action categories since no specific actions for protection
# ---------------------------------------------------------------------------
#
#  RESTORATION: Summarize Habitat Attributes and Action Categories for each Reach within each Species and Score (Unnacceptable, At Risk, etc.)
#
# ---------------------------------------------------------------------------
print("----------------------------------------- COMBINE HQ AND LF OUTPUT --------------------------------------------")
source(paste(script_path, 'FUNCTIONS_for_Combining_Action_Tables.R', sep=""))
source(paste(script_path, 'FUNCTIONS_for_Combining_Reach_Habitat_Attribute_combos.R', sep=""))
# ----------------------- summarize within a single pathway AND score category (Unacceptable, At Risk -----------------------
Habitat_Quality_Restoration_Unacceptable = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH("one", "restoration")
Habitat_Quality_Restoration_At_Risk = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH("two and three", "restoration")
Habitat_Quality_Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH("one thru three", "restoration")
Limiting_Factor_Restoration_Unacceptable = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH("one", "restoration")
Limiting_Factor_Restoration_At_Risk = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH("two and three", "restoration")
Limiting_Factor_Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH("one thru three", "restoration")
# ---------------------------------------------------------------------------
#  Combine across pathways into Score categories (Unacceptable, At Risk, Both)
# ---------------------------------------------------------------------------
# ----------------------- combine across pathways -----------------------
columns_info = c( "ReachName","Basin","Assessment.Unit" )
columns_to_combine_text = c(  "Pathways" ,  "Impaired_Habitat_Attributes_All_Species" , "Impaired_Habitat_Attributes_SpringChinook", "Impaired_Habitat_Attributes_Steelhead","Impaired_Habitat_Attributes_BullTrout",
"Action_Categories_All_Species",   "Action_Categories_SpringChinook",  "Action_Categories_Steelhead",  "Action_Categories_BullTrout"    )
columns_to_combine_text_LF_only = c(   "Life_Stages", "Life_Stages_SpringChinook"   )
columns_to_combine_yes_no = c( "Spring_Chinook_Actions_Present_Yes_No","SprCh_STLD_BullTr_All_Present_Yes_No" )
columns_to_combine_count_unique = c( "Impaired_Habitat_Attributes_All_Species", "Impaired_Habitat_Attributes_SpringChinook", "Impaired_Habitat_Attributes_Steelhead", "Impaired_Habitat_Attributes_BullTrout",
"Action_Categories_All_Species",   "Action_Categories_SpringChinook","Action_Categories_Steelhead",  "Action_Categories_BullTrout" ) # the unique occurences of these are then counted and a number is produced
columns_to_combine_numeric = c("Number_of_Pathways"  )
columns_to_combine_numeric_LF_only = c("Number_of_Life_Stages", "Number_Life_Stages_SpringChinook"  )
Restoration_Unacceptable = FUNCTION_combine_across_pathways(Habitat_Quality_Restoration_Unacceptable, Limiting_Factor_Restoration_Unacceptable)
Restoration_At_Risk = FUNCTION_combine_across_pathways(Habitat_Quality_Restoration_At_Risk, Limiting_Factor_Restoration_At_Risk)
Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_across_pathways(Habitat_Quality_Restoration_Unacceptable_and_At_Risk, Limiting_Factor_Restoration_Unacceptable_and_At_Risk)
# ---------------------------------------------------------------------------
#  Combine into ONE Data frame across all pathways and scores
# ---------------------------------------------------------------------------
HQ_add_life_stage = "yes"   # IF generate life stages for HQ pathway based on life stage presence in reaches
columns_info = c( "ReachName","Basin","Assessment.Unit" ) # columns to automatically add to beginning (left side) of output
# Note - only include the Habitat_Quality_Restoration_Unacceptable_and_At_Risk
Restoration_Prioritization_Output = FUNCTION_combine_across_Unacceptable_and_AtRisk(Restoration_Unacceptable, Restoration_At_Risk, Restoration_Unacceptable_and_At_Risk, Habitat_Quality_Restoration_Unacceptable_and_At_Risk, columns_info, exclude_bull_trout, HQ_add_life_stage)
# ---------------------------------------------------------------------------
#  Add Barrier Prioritization Info
# ---------------------------------------------------------------------------
columns_info = c( "ReachName","Basin","Assessment.Unit" ) # columns to automatically add to beginning (left side) of output
Restoration_Prioritization_Output = FUNCTION_Add_Barrier_Data(Restoration_Prioritization_Output, Barriers_Pathways_Data, exclude_bull_trout)
# ---------------------------------------------------------------------------
#  Reduce for "Outward Facing" table in WebMap
# ---------------------------------------------------------------------------
colnames_outward_facing_WebMap = c("ReachName","Assessment.Unit","Species","Actions", "Life_Stages","Impaired_Habitat_Attributes_All_Species","Action_Categories_All_Species" )
colnames_reach_info = c("RM_Start", "RM_End")  # data that is in the reach geospatial layer to add to these data
colnames_outward_facing_WebMap_ORDER = c("ReachName","RM_Start", "RM_End","Assessment.Unit","Species", "Life_Stages","Impaired_Habitat_Attributes_All_Species","Actions","Action_Categories_All_Species" )
colnames_outward_facing_WebMap_UPDATED = c("Reach Name","River Mile - Start", "River Mile - End","Assessment Unit","Species","Priority Life Stages","Limiting Factor","Action Pathways","Action Categories" )
# ------- filter out for specific columns ----------
Restoration_Prioritization_Output_for_WebMap = Restoration_Prioritization_Output[,colnames_outward_facing_WebMap]
# ----------- add Reach information ------------
Restoration_Prioritization_Output_for_WebMap  =  FUNCTION_add_reach_information(Restoration_Prioritization_Output_for_WebMap,  colnames_reach_info)
# ------------ do MISC processing for output ---------
Restoration_Prioritization_Output_for_WebMap = FUNCTION_prepare_outward_facing_table( Restoration_Prioritization_Output_for_WebMap , colnames_outward_facing_WebMap_ORDER, colnames_outward_facing_WebMap_UPDATED, exclude_bull_trout)
# ---------------------------------------------------------------------------
#
#  PROTECTION: prep to output
#
# ---------------------------------------------------------------------------
print("----------------------------------------- OUTPUT THE RESULTS --------------------------------------------")
source(paste(script_path, 'FUNCTIONS_for_Protection_Output.R', sep=""))
Protection_Prioritization_Output = FUNCTION_Combine_Protection_Output(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']] )
# ---------------------------------------------------------------------------
#
#  RESTORATION - flat tables for WebMaps of
#
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#  Reach-Habitat Attributes - Life Stage per row
# ---------------------------------------------------------------------------
columns_info = c( "ReachName","Basin","Assessment.Unit" ) # columns to automatically add to beginning (left side) of output
HQ_life_stages = "yes"  # "yes" if use AU Life stages reach layer to generate life stages for habitat quality pathway
Reach_Habitat_Attribute_Life_Stage_Restoration_Output = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info, exclude_bull_trout, HQ_life_stages)
# ---------------------------------------------------------------------------
#  Reach-Habitat Attributes - Life Stage per row
# ---------------------------------------------------------------------------
HQ_life_stages = "yes"  # "yes" if use AU Life stages reach layer to generate life stages for habitat quality pathway
Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage_Species( Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info, exclude_bull_trout, HQ_life_stages)
View(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output)
dim(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output$Species == "Bull Trout"),])
dim(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output)
# ------------------ just test output --------------
reach_test = "Twisp River Lower 01"
strsplit(Restoration_Prioritization_Output_for_WebMap[which(Restoration_Prioritization_Output_for_WebMap$`Reach Name` == reach_test),]$`Limiting Factor`, ",")
unique(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output$ReachName == reach_test),]$Habitat_Attribute)
strsplit(Restoration_Prioritization_Output_for_WebMap[which(Restoration_Prioritization_Output_for_WebMap$`Reach Name` == reach_test),]$`Species`, ",")
unique(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output$ReachName == reach_test),]$Species)
strsplit(Restoration_Prioritization_Output_for_WebMap[which(Restoration_Prioritization_Output_for_WebMap$`Reach Name` == reach_test),]$`Priority Life Stages`, ",")
unique(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output$ReachName == reach_test),]$Life_Stage)
# ------------- Output for WebMap ------------------
colnames(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output)[colnames(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output) == "Habitat_Attribute"] <- "Limiting_Factor"
output_path_x =  paste(output_path,'Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output.xlsx', sep="")
write_xlsx(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output,output_path_x )
colnames(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output)
columns_info
dim(Protection_Prioritization_Output)
Protection_Prioritization_Output
View(Protection_Prioritization_Output)
library(tidyverse)
library(xlsx)
library(writexl)
library(readxl)
basins_to_include = c("Methow",  "Entiat","Wenatchee")  # basins to include insimulation
exclude_bull_trout = "no"  # if "yes" -> remove bull trout for WebMap applications
output_Habitat_Quality_and_Habitat_Attribute_Scores = "yes"  # enter "yes" or "no" if you want this output
time1 <- proc.time()[3] # for timing the total time to run the tool
# --------------- directory of scripts -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
data_path = 'Data/'
# ----------- directory for output ---------
output_path = 'Output/'
# ---------------------------------------------------------------------------
#
#     Read in Data
#
# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
# ---------------------------------------------------------------------------
#
#      Criteria for Filters
#
# ---------------------------------------------------------------------------
print("----------------------------------------- ASSIGN CRITERIA --------------------------------------------")
source(paste(script_path, 'Criteria_Script.R', sep=""))
# ---------------------------------------------------------------------------
#   Generate Habitat Quality Restoration and Protection Score
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITA QUALITY SCORES --------------------------------------------")
source(paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep=""))
# ---------------------------------------------------------------------------
#   Generate Habitat Attribute Table (used in Limiting Factor Pathway)
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITAT ATTRIBUTE SCORES (for Limtiting Factor Pathway) --------------------------------------------")
source(paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep=""))
source(paste(script_path, 'Data_Sources_List_for_Habitat_Attributes.R', sep=""))
source(paste(script_path, 'FUNCTIONS_for_Habitat_Attribute_Filters.R', sep=""))
Habitat_Attribute_Scores = data.frame()
# --------------------------------------------------------------------
#   Loop through each Data Source for this specific habitat attribute
# --------------------------------------------------------------------
data_sources_list =  Habitat_Attributes_List[habitat_attribute_x]
habitat_attribute_x
# --------------------------------------------------------------------
#   Loop through each Data Source for this specific habitat attribute
# --------------------------------------------------------------------
data_sources_list =  Habitat_Attributes_List[habitat_attribute_x]
# --------------------------------------------------------------------
#   Loop through each data source
# --------------------------------------------------------------------
# ------------ data frame to record habitat attributes --------
habitat_attribute_x_data_frame = data.frame()
# ------------ prep data source name -----------
data_source_output_list_per_row = c('a') # create a nchar = 1 data frame
column_names = c("(HabitatAttributeScore1)",	"(HabitatAttributeScore2)",	"(HabitatAttributeScore3)",	"(HabitatAttributeScore4)")
i = 0
data_source_x = data_sources_list[[1]]
data_source_x
print(paste("Data Source (column in Habitat Raw, CHAMP, or Channel Unit): ", data_source_x,sep="") )
nchar(data_source_output_list_per_row)
data_source_output_list_per_row = paste(data_source_x, column_names[i], sep=" ")
data_source_output_list_per_row
data_source_x
# --------------------------------------------------------------------
#   Loop through each Data Source for this specific habitat attribute
# --------------------------------------------------------------------
data_sources_list =  Habitat_Attributes_List[habitat_attribute_x]
# --------------------------------------------------------------------
#   Loop through each data source
# --------------------------------------------------------------------
# ------------ data frame to record habitat attributes --------
habitat_attribute_x_data_frame = data.frame()
# ------------ prep data source name -----------
data_source_output_list_per_row = c('a') # create a nchar = 1 data frame
column_names = c("(HabitatAttributeScore1)",	"(HabitatAttributeScore2)",	"(HabitatAttributeScore3)",	"(HabitatAttributeScore4)")
i = 0
data_sources_list
data_source_x = data_sources_list[[1]] [1]
data_source_x
# --------------- generate data source name --------------
i = i + 1
if( nchar(data_source_output_list_per_row) == 1){
data_source_output_list_per_row = paste(data_source_x, column_names[i], sep=" ")
}else{
data_source_output_list_per_row = paste(data_source_output_list_per_row,
paste(data_source_x, column_names[i], sep=" "), sep=",")
}
dim(habitat_attribute_x_data_frame)
data_sources_list
# --------------------------------------------------------------------
#   Loop through each data source
# --------------------------------------------------------------------
# ------------ data frame to record habitat attributes --------
habitat_attribute_x_data_frame = data.frame()
# ------------ prep data source name -----------
data_source_output_list_per_row = c('a') # create a nchar = 1 data frame
column_names = c("(HabitatAttributeScore1)",	"(HabitatAttributeScore2)",	"(HabitatAttributeScore3)",	"(HabitatAttributeScore4)")
i = 0
for( data_source_x in data_sources_list[[1]] ){
print(paste("Data Source (column in Habitat Raw, CHAMP, or Channel Unit): ", data_source_x,sep="") )
# --------------- generate data source name --------------
i = i + 1
if( nchar(data_source_output_list_per_row) == 1){
data_source_output_list_per_row = paste(data_source_x, column_names[i], sep=" ")
}else{
data_source_output_list_per_row = paste(data_source_output_list_per_row,
paste(data_source_x, column_names[i], sep=" "), sep=",")
}
# ------------------- skip reading PROFESSOINAL JUDGEMENT -------------
if( data_source_x== "PROFESSIONAL JUDGEMENT" ){
# ------------ Professional judgment gets "5" unless dictated otherwise -----------
output_x = cbind( as.data.frame( habitat_raw_data$ReachName ),
as.data.frame(rep("NA", length.out=dim(habitat_raw_data)[1] )),
as.data.frame(rep(5, length.out=dim(habitat_raw_data)[1] )))
colnames(output_x ) = c('metric_data', 'score')
# ------------------ read in from Channel Unit data  -----------
}else if( any(Channel_Unit_Raw_data_sources[habitat_attribute_x] == data_source_x) ){
# ------------ Generate metric value  AND score (1,3,5) for each habitat attribute -------------------
# outputs both metric value and score
output_x = FUNCTION_generate_habitat_attribute_score_from_CHAMP_or_Channel_Unit(habitat_attribute_x, data_source_x, "LF" )
# ------------------ read in from CHAMP  -----------
}else if(  any(CHAMP_data_per_reach_data_sources[habitat_attribute_x] == data_source_x )   ){
output_x = FUNCTION_generate_habitat_attribute_score_from_CHAMP_or_Channel_Unit(habitat_attribute_x, data_source_x, "LF" )
# ----------------- read in from Habitat Raw data ---------
}else{
# ------------ Generate metric value  AND score (1,3,5) for each habitat attribute -------------------
# outputs both metric value and score
output_x = FUNCTION_generate_habitat_attribute_score_from_Habitat_Data_Raw(habitat_attribute_x, data_source_x , "LF" )
}
# ------------------ Add Column Names ----------------
colnames(output_x) = c("ReachName","metric_data","score")
# -------- data frame for this specific reach and habitat attribute --------
scores_x = as.data.frame(output_x$score)
if(nrow(habitat_attribute_x_data_frame) == 0){
habitat_attribute_x_data_frame = cbind(output_x$ReachName, scores_x)
}else{
habitat_attribute_x_data_frame = cbind(habitat_attribute_x_data_frame, scores_x )
}
}
dim(habitat_attribute_x_data_frame)
head(habitat_attribute_x_data_frame)
