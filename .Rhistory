#
# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
# ---------------------------------------------------------------------------
#
#      Criteria for Filters
#
# ---------------------------------------------------------------------------
print("----------------------------------------- ASSIGN CRITERIA --------------------------------------------")
source(paste(script_path, 'Criteria_Script.R', sep=""))
# ---------------------------------------------------------------------------
#
#   Generate Habitat Quality and Habitat Attribute Scores Table
#
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#   Generate Habitat Quality Restoration and Protection Score
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITA QUALITY SCORES --------------------------------------------")
source(paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep=""))
# output is Habitat_Quality_Pathway_Output
# View(Habitat_Quality_Pathway_Output[['Habitat_Quality_Pathway_Protection']])
# ---------------------------------------------------------------------------
#   Generate Habitat Attribute Table (used in Limiting Factor Pathway)
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITAT ATTRIBUTE SCORES (for Limtiting Factor Pathway) --------------------------------------------")
source(paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep=""))
# OUTPUT is Habitat_Attribute_Scores
# ---------------------------------------------------------------------------
#
#   Generate Priority Reaches and Habitat Attributes
#
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#   Apply Habitat Quality Pathway Filters
#     NOTE: the function below runs HQ Pathway for Restoration and Protection
# ---------------------------------------------------------------------------
print("----------------------------------------- APPLY HABITAT QUALITY FILTERS FOR PRIORITIZATION --------------------------------------------")
source(paste(script_path, 'Habitat_Quality_Pathway_Filter.R', sep=""))
basins_to_include = c("Methow",  "Entiat","Wenatchee")
# ----- set names of Habitat Quality Scores to sum ------
habitat_quality_scores_colnames_for_sum = c("Stability_Mean" , "CoarseSubstrate_score" ,"Cover-Wood_score", "Flow-SummerBaseFlow_score",
"Off-Channel-Floodplain_score", "Off-Channel-Side-Channels_score","PoolQuantity&Quality_score",
"Riparian_Mean","Temperature-Rearing_score")
Habitat_Quality_Pathway_Spring_Chinook = Generate_Habitat_Quality_Output_Table("Spring Chinook", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Steelhead = Generate_Habitat_Quality_Output_Table("Steelhead", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Bull_Trout = Generate_Habitat_Quality_Output_Table("Bull Trout", basins_to_include, habitat_quality_scores_colnames_for_sum )
#View(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
#View(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']])
# ---------------------------------------------------------------------------
#   Apply Limiting Factor Pathway Filters
#     NOTE: the function below runs LF Pathway for Restoration and Protection
# ---------------------------------------------------------------------------
# NOTE: Protection output includes habitat attributes but does not filter based on habitat attributes
print("----------------------------------------- APPLY LIMITING FACTOR FILTERS FOR PRIORITIZATION --------------------------------------------")
source(paste(script_path, 'Limiting_Factor_Pathway_Filter.R', sep=""))
Limiting_Factor_Pathway_Spring_Chinook = Generate_Limiting_Factor_Output_Table("Spring Chinook", basins_to_include)
Limiting_Factor_Pathway_Steelhead = Generate_Limiting_Factor_Output_Table("Steelhead", basins_to_include)
Limiting_Factor_Pathway_Bull_Trout = Generate_Limiting_Factor_Output_Table("Bull Trout", basins_to_include)
#View(Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']])
#View(Limiting_Factor_Bull_Trout[['Limiting_Factor_Pathway_Protection']])
#unique(Limiting_Factor_Bull_Trout[['Limiting_Factor_Pathway_Restoration']]$unacceptable_and_at_risk_1_3_indiv_habitat_attributes)
# ---------------------------------------------------------------------------
#
#   Generate Action Categories
#         (do not do this for Protection since no Actions generated for Protection)
#
# ---------------------------------------------------------------------------
# NOTE: 1) fix action_categories_output so you can add it to any data frame,
#       2) generate outputs for meeting
print("----------------------------------------- GENERATE ACTIONS CATEGORIES FOR HQ AND LF PATHWAY --------------------------------------------")
source(paste(script_path, 'FUNCTIONS_for_Generating_Action_Categories.R', sep=""))
# ------------------------------------------------------------------------------------
#                     RESTORATION
# ------------------------------------------------------------------------------------
# ----------------------------------------
#    Habitat Quality Pathway
# ----------------------------------------
Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']])
# ----------------------------------------
#    Limiting Factors Pathway
# ----------------------------------------
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']])
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']])
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']])
# ------------------------------------------------------------------------------------
#                     PROTECTION
# -----------------------------------------------------------------------------------
# NOTE - DO NOT need to generate action categories since no specific actions for protection
# ----------------------------------------
#    Habitat Quality Pathway
# ----------------------------------------
#Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']])
#Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']])
#Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']])
#
#Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']])
#Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']])
#Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']])
# ---------------------------------------------------------------------------
#
#  RESTORATION: Summarize Habitat Attributes and Action Categories for each Reach within each Species and Score (Unnacceptable, At Risk, etc.)
#
# ---------------------------------------------------------------------------
print("----------------------------------------- COMBINE HQ AND LF OUTPUT --------------------------------------------")
source(paste(script_path, 'FUNCTIONS_for_Combining_Action_Tables.R', sep=""))
# ----------------------- summarize within a single pathway AND score category (Unacceptable, At Risk -----------------------
Habitat_Quality_Restoration_Unacceptable = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH("one", "restoration")
Habitat_Quality_Restoration_At_Risk = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH("two and three", "restoration")
Habitat_Quality_Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH("one thru three", "restoration")
Limiting_Factor_Restoration_Unacceptable = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH("one", "restoration")
Limiting_Factor_Restoration_At_Risk = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH("two and three", "restoration")
Limiting_Factor_Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH("one thru three", "restoration")
# ---------------------------------------------------------------------------
#  Combine across pathways into Score categories (Unacceptable, At Risk, Both)
# ---------------------------------------------------------------------------
# ----------------------- combine across pathways -----------------------
columns_info = c( "ReachName","Basin","Assessment.Unit" )
columns_to_combine_text = c(  "Pathways" ,  "Impaired_Habitat_Attributes_All_Species" , "Impaired_Habitat_Attributes_SpringChinook", "Impaired_Habitat_Attributes_Steelhead","Impaired_Habitat_Attributes_BullTrout",
"Action_Categories_All_Species",   "Action_Categories_SpringChinook",  "Action_Categories_Steelhead",  "Action_Categories_BullTrout"    )
columns_to_combine_text_LF_only = c(   "Life_Stages", "Life_Stages_SpringChinook"   )
columns_to_combine_yes_no = c( "Spring_Chinook_Actions_Present_Yes_No","SprCh_STLD_BullTr_All_Present_Yes_No" )
columns_to_combine_count_unique = c( "Impaired_Habitat_Attributes_All_Species", "Impaired_Habitat_Attributes_SpringChinook", "Impaired_Habitat_Attributes_Steelhead", "Impaired_Habitat_Attributes_BullTrout",
"Action_Categories_All_Species",   "Action_Categories_SpringChinook","Action_Categories_Steelhead",  "Action_Categories_BullTrout" ) # the unique occurences of these are then counted and a number is produced
columns_to_combine_numeric = c("Number_of_Pathways"  )
columns_to_combine_numeric_LF_only = c("Number_of_Life_Stages", "Number_Life_Stages_SpringChinook"  )
Restoration_Unacceptable = FUNCTION_combine_across_pathways(Habitat_Quality_Restoration_Unacceptable, Limiting_Factor_Restoration_Unacceptable)
Restoration_At_Risk = FUNCTION_combine_across_pathways(Habitat_Quality_Restoration_At_Risk, Limiting_Factor_Restoration_At_Risk)
Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_across_pathways(Habitat_Quality_Restoration_Unacceptable_and_At_Risk, Limiting_Factor_Restoration_Unacceptable_and_At_Risk)
# ---------------------------------------------------------------------------
#  Combine into ONE Data frame across all pathways and scores
# ---------------------------------------------------------------------------
columns_info = c( "ReachName","Basin","Assessment.Unit" ) # columns to automatically add to beginning (left side) of output
Restoration_Prioritization_Output = FUNCTION_combine_across_Unacceptable_and_AtRisk(Restoration_Unacceptable, Restoration_At_Risk, Restoration_Unacceptable_and_At_Risk, columns_info)
# ---------------------------------------------------------------------------
#  Add Barrier Prioritization Info
# ---------------------------------------------------------------------------
columns_info = c( "ReachName","Basin","Assessment.Unit" ) # columns to automatically add to beginning (left side) of output
Restoration_Prioritization_Output = FUNCTION_Add_Barrier_Data(Restoration_Prioritization_Output, Barriers_Pathways_Data)
# ---------------------------------------------------------------------------
#
#  PROTECTION: prep to output
#
# ---------------------------------------------------------------------------
print("----------------------------------------- OUTPUT THE RESULTS --------------------------------------------")
source(paste(script_path, 'FUNCTIONS_for_Protection_Output.R', sep=""))
Protection_Prioritization_Output = FUNCTION_Combine_Protection_Output(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']] )
# ---------------------------------------------------------------------------
#
#  RESTORATION - flat tables for WebMaps of
#
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#  Reach-Habitat Attributes - Life Stage per row
# ---------------------------------------------------------------------------
source(paste(script_path, 'FUNCTIONS_for_Combining_Reach_Habitat_Attribute_combos.R', sep=""))
columns_info = c( "ReachName","Basin","Assessment.Unit" ) # columns to automatically add to beginning (left side) of output
Reach_Habitat_Attribute_Life_Stage_Restoration_Output = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info)
# ---------------------------------------------------------------------------
#  Reach-Habitat Attributes - Life Stage per row
# ---------------------------------------------------------------------------
Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage_Species(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info)
output_Habitat_Quality_and_Habitat_Attribute_Scores = "no"  # enter "yes" or "no" if you want this output
time1 <- proc.time()[3] # for timing the total time to run the tool
# --------------- directory of scripts -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
data_path = 'Data/'
# ----------- directory for output ---------
output_path = 'Output/'
# ---------------------------------------------------------------------------
#
#     Read in Data
#
# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
# ----------- update columns that are numeric to numeric ------------
cols.num = c('Spring Chinook_Restoration',	'SPCHNTier_Restoration',	'Steelhead_Restoration',	'STLTier_Restoration',
'BullTrout_Restoration',	'BTTier_Restoration',	'Spring Chinook_Protection',	'SPCHNTier_Protection',
'Steelhead_Protection',	'STLTier_Protection',	'BullTrout_Protection',	'BTTier_Protection')
AU_Ranks_data[cols.num] <- sapply(AU_Ranks_data[cols.num],as.numeric)
Life_Stage_Priorities_AU_only_data = read_excel( paste(data_path,'LifeStagePriorities.xlsx', sep=""), skip=1 )
habitat_raw_data = read_excel(  paste(data_path,'Habitat_Data_Raw.xlsx', sep="") ,   skip=1  )
# ----------- update columns that are numeric to numeric ------------
cols.num <- c( 'Sand_occular_prcnt_INDICATOR_1',	'Gravel_occular_prcnt_INDICATOR_2',
'Cobble_occular_prcnt_INDICATOR_3',	'Boulder_occular_prcnt_INDICATOR_4',	'Bedrock_occular_prcnt_INDICATOR_5',
'Gravel_and_Cobble_occular_prcnt_INDICATOR_6',	'Clay_Silt_Sand_occular_prcnt_INDICATOR_7',
'Sand_sieve_prcnt_INDICATOR_8',	'Gravel_sieve_prcnt_INDICATOR_9',	'Cobble_sieve_prcnt_INDICATOR_10',
'Boulder_sieve_prcnt_INDICATOR_11',	'Bedrock_sieve_prcnt_INDICATOR_12',	'D50_sieve_size_prcnt_finer_mm_INDICATOR_13',
'Silt_pebble_count_PRCNT_INDICATOR_14',	'Sand_pebble_count_PRCNT_INDICATOR_15',	'Gravel_pebble_count_PRCNT_INDICATOR_16',
'Cobble_pebble_count_PRCNT_INDICATOR_17',	'Boulder_pebble_count_PRCNT_INDICATOR_18',
'Bedrock_pebble_count_PRCNT_INDICATOR_19',	'Gravel_and_Cobble_pebble_count_PRCNT_INDICATOR_20',	'Boulder_UCSRB_pct',
'GravelCobble_UCSRB_pct',	'Pieces_per_mile_INDICATOR_1',
'Small_pieces_per_mile_INDICATOR_2',	'Medium_pieces_per_mile_INDICATOR_3',	'Large_pieces_per_mile_INDICATOR_4',
'Overstory_mature_tree_prcnt_INDICATOR_5','Pools_CATEGORY_1_NUMERIC',	'Pools_total_INDICATOR_1',
'Pools_per_mile_INDICATOR_2',	'Pools_deeper_3_ft_prcnt_INDICATOR_3',	'Pools_deeper_3_ft_per_mile_INDICATOR_4',
'Pools_deeper_5_ft_per_mile_INDICATOR_5',	'Pools_pool_depth_ft_INDICATOR_6','Connectivity_total_SC_INDICATOR_1',
'Off_channel_habitat_prcnt_INDICATOR_2',	'Main_channel_prcnt_INDICATOR_3',	'Connectivity_fast_water_INDICATOR_4',
'Side_channel_fast_prcnt_INDICATOR_5',	'Connectivity_slow_water_INDICATOR_6',	'Side_channel_slow_prcnt_INDICATOR_7',
'Connectivity_cover_INDICATOR_8',	'Channel_Confinementor_or_Entrenchment_Ratio_INDICATOR_9',	'Channel_Bankfull_Width_to_Depth_Ratio_INDICATOR_10',
'Structure_mature_tree_prcnt_INDICATOR_1',	'Structure_large_tree_prcnt_INDICATOR_2',	'Structure_small_tree_prcnt_INDICATOR_3',
'Structure_small_tree_or_smaller_prcnt_INDICATOR_4',	'Structure_sapling_pole_prcnt_INDICATOR_5',	'Structure_shrub_seedling_prcnt_INDICATOR_6',
'Structure_tall_grass_short_Shrub_prcnt_INDICATOR_7',	'Structure_grass_prcnt_INDICATOR_8',	'Structure_orchard_prcnt_INDICATOR_9',
'Structure_bare_ground_prcnt_INDICATOR_10','PROSPER',	'NORWEST_Temperature','Canopy_Cover_NORWEST',
'Undercut_Area_Pct_CHAMP',	'SubEstBldr_CHAMP',	'SubEstSandFines_CHAMP',	'LWFreq_Bf_CHAMP',
'SC_Area_Pct_Average_CHAMP',	'FishCovNone_Average_CHAMP',	'GRVL_COBL_UCSRB_CHAMP',	'SubEmbed_Avg_Average_CHAMP')
habitat_raw_data[cols.num] <- sapply(habitat_raw_data[cols.num],as.numeric)
Barriers_Pathways_Data = read_excel( paste(data_path,'Barriers_Pathway_Data.xlsx', sep="") )
AU_Ranks_data = read_excel( paste(data_path,'AU_Ranks.xlsx', sep="") )
# ----------- update columns that are numeric to numeric ------------
cols.num = c('Spring Chinook_Restoration',	'SPCHNTier_Restoration',	'Steelhead_Restoration',	'STLTier_Restoration',
'BullTrout_Restoration',	'BTTier_Restoration',	'Spring Chinook_Protection',	'SPCHNTier_Protection',
'Steelhead_Protection',	'STLTier_Protection',	'BullTrout_Protection',	'BTTier_Protection')
AU_Ranks_data[cols.num] <- sapply(AU_Ranks_data[cols.num],as.numeric)
Life_Stage_Priorities_AU_only_data = read_excel( paste(data_path,'LifeStagePriorities.xlsx', sep=""), skip=1 )
Life_Stage_Priorities_AU_and_Reach_data = read_excel( paste(data_path,'LifeStagePriorities_AUandReach.xlsx', sep=""), skip=1 )
# ---------------------- match column names to life stages -
spring_chinook_life_stages = list("Adult Migration" = "SPCH Adult Migration  AU LS Priority",	  "Holding"=	"SPCH Holding  AU LS Priority",
"Spawning and Incubation" = "SPCH Spawning AU LS Priority",	"Fry Colonization" = "SPCH Fry Colonization  AU LS Priority",
"Summer Rearing"  = "SPCH Summer Rearing  AU LS Priority", 	"Winter Rearing" = "SPCH Winter Rearing  AU LS Priority",
"Smolt Outmigration"="SPCH Smolt Emigration  AU LS Priority")
steelhead_life_stages =     life_stage_priority_list = list("Adult Migration"  = "SH Adult Migration  AU LS Priority",
"Holding and Maturation"  =  "SH Holding  AU LS Priority",	"Spawning and Incubation" ="SH Spawning AU LS Priority",
"Fry" = "SH Fry Colonization  AU LS Priority", "Spawning and Incubation" = "SH Summer Rearing  AU LS Priority",
"Winter Rearing"  = "SH Winter Rearing  AU LS Priority",	"Smolt Outmigration" = "SH Smolt Emigration  AU LS Priority")
bull_trout_life_stages = list("Adult Migration"  = "BT Adult Migration  AU LS Priority",	"Holding and Maturation"= 	"BT Holding  AU LS Priority",
"Spawning and Incubation" =	"BT Spawning AU LS Priority",	"BT Natal Rearing" =  "BT Natal Rearing  AU LS Priority",
"Adult Non-Spawning" = "BT Adult Non-Spawning AU LS Priority", "BT Subadult Rearing"=  "BT Subadult Rearing  AU LS Priority")
life_stages_priorities = list("spring_chinook_life_stages" =  spring_chinook_life_stages,
"steelhead_life_stages" = steelhead_life_stages,
"bull_trout_life_stages" = bull_trout_life_stages )
Attribute_LifeStage_Crosswalk = read_excel( paste(data_path,'Attribute_LifeStage_Crosswalk.xlsx', sep="") )
Attribute_LifeStage_Crosswalk$Habitat_Attribute_2 = gsub(" ", "", Attribute_LifeStage_Crosswalk$`Habitat Attribute`, fixed = TRUE)
Channel_Unit_Raw = read_excel( paste(data_path,'Channel_Unit_Raw.xlsx', sep="") )
# ----------- update columns that are numeric to numeric ------------
cols.num = c('Riffle_Habitat_Prcnt_INDICATOR_1' , 'Rapid_Habitat_Prcnt_INDICATOR_2' , 'Glide_Habitat_Prcnt_INDICATOR_3',
'Pool_Habitat_Prcnt_INDICATOR_4', 'Cascade_Habitat_Prcnt_INDICATOR_5', 'Side_Channel_Habitat_Prcnt_INDICATOR_6',
'Braid_Habitat_Prcnt_INDICATOR_7',    'Bar_Habitat_Prcnt_INDICATOR_8')
Channel_Unit_Raw[cols.num] <- sapply(Channel_Unit_Raw[cols.num],as.numeric)
CHAMP_data_per_reach = read_excel( paste(data_path,'CHAMP_data_per_reach.xlsx', sep="") )
# ----------- update columns that are numeric to numeric ------------
cols.num = c('NumberofCHaMPDataPoints', 'SlowWater_Pct_Average',	'SlowWater_Pct_StandardDeviation',	'FstTurb_Pct_Average',
'FstTurb_Pct_StandardDeviation',	'Grad_Average',	'Grad_StandardDeviation',	'Sin_Average',
'Sin_StandardDeviation',	'Area_Wet_Average',	'Area_Wet_StandardDeviation',	'Area_Bf_Average',
'Area_Bf_StandardDeviation',	'WetVol_Average',	'WetVol_StandardDeviation',	'DpthThlwg_UF_CV_Average',
'DpthThlwg_UF_CV_StandardDeviation',	'DpthWet_SD_Average',	'DpthWet_SD_StandardDeviation',
'BfWdth_Avg_Average',	'BfWdth_Avg_StandardDeviation',	'WetSCL_Area_Average',
'WetSCL_Area_StandardDeviation',	'SCSm_Area_Average',	'SCSm_Area_StandardDeviation',
'WetSC_Pct_Average',	'WetSC_Pct_StandardDeviation',	'SCSm_Freq_Average',
'SCSm_Freq_StandardDeviation',	'SCSm_Ct_Average',	'SCSm_Ct_StandardDeviation',	'SCSm_Vol_Average',
'SCSm_Vol_StandardDeviation',	'SubEmbed_Avg_Average',	'SubEmbed_Avg_StandardDeviation',
'SubEmbed_SD_Average',	'SubEmbed_SD_StandardDeviation',	'SubD50_Average',	'SubD50_StandardDeviation',
'RipCovBigTree_Average',	'RipCovBigTree_StandardDeviation',	'RipCovConif_Average',
'RipCovConif_StandardDeviation',	'RipCovGrnd_Average',	'RipCovGrnd_StandardDeviation',
'RipCovNonWood_Average',	'RipCovNonWood_StandardDeviation',	'RipCovUstory_Average',
'RipCovUstory_StandardDeviation',	'RipCovWood_Average',	'RipCovWood_StandardDeviation',
'LWVol_Wet_Average',	'LWVol_Wet_StandardDeviation',	'LWVol_Bf_Average',	'LWVol_Bf_StandardDeviation',
'RipCovCanNone_Average',	'UCSRB_RipCanCover',	'RipCovCanNone_StandardDeviation',	'Ucut_Area_Average',
'Ucut_Area_StandardDeviation',	'FishCovLW_Average',	'FishCovLW_StandardDeviation',
'SubEstSandFines_Average',	'SubEstSandFines_StandardDeviation',	'LWFreq_Wet_Average',
'LWFreq_Wet_StandardDeviation',	'FishCovNone_Average',	'FishCovNone_StandardDeviation',
'LWFreq_Bf_Average',	'LWFreq_Bf_StandardDeviation',	'FishCovAqVeg_Average',
'FishCovAqVeg_StandardDeviation',	'SubEstBldr_Average',	'SubEstBldr_StandardDeviation',
'SubEstCbl_Average',	'SubEstGrvl_Average',	'FishCovTotal_Average',	'FishCovTotal_StandardDeviation',
'UcutLgth_Pct_Average',	'UcutLgth_Pct_StandardDeviation',	'UcutArea_Pct_Average',
'UcutArea_Pct_StandardDeviation',	'SC_Area_Average',	'SC_Area_StandardDeviation',
'SC_Area_Pct_Average',	'GRVL_COBL_UCSRB')
CHAMP_data_per_reach[cols.num] <- sapply(CHAMP_data_per_reach[cols.num],as.numeric)
# -------------------------- CHAMP data only use 139 reaches, so add reaches not present as NA -------------
CHAMP_data_Updated =  habitat_raw_data %>% select("ReachName","Basin","Assessment.Unit")
CHAMP_data_per_reach = read_excel( paste(data_path,'CHAMP_data_per_reach.xlsx', sep="") )
# ----------- update columns that are numeric to numeric ------------
cols.num = c('NumberofCHaMPDataPoints', 'SlowWater_Pct_Average',	'SlowWater_Pct_StandardDeviation',	'FstTurb_Pct_Average',
'FstTurb_Pct_StandardDeviation',	'Grad_Average',	'Grad_StandardDeviation',	'Sin_Average',
'Sin_StandardDeviation',	'Area_Wet_Average',	'Area_Wet_StandardDeviation',	'Area_Bf_Average',
'Area_Bf_StandardDeviation',	'WetVol_Average',	'WetVol_StandardDeviation',	'DpthThlwg_UF_CV_Average',
'DpthThlwg_UF_CV_StandardDeviation',	'DpthWet_SD_Average',	'DpthWet_SD_StandardDeviation',
'BfWdth_Avg_Average',	'BfWdth_Avg_StandardDeviation',	'WetSCL_Area_Average',
'WetSCL_Area_StandardDeviation',	'SCSm_Area_Average',	'SCSm_Area_StandardDeviation',
'WetSC_Pct_Average',	'WetSC_Pct_StandardDeviation',	'SCSm_Freq_Average',
'SCSm_Freq_StandardDeviation',	'SCSm_Ct_Average',	'SCSm_Ct_StandardDeviation',	'SCSm_Vol_Average',
'SCSm_Vol_StandardDeviation',	'SubEmbed_Avg_Average',	'SubEmbed_Avg_StandardDeviation',
'SubEmbed_SD_Average',	'SubEmbed_SD_StandardDeviation',	'SubD50_Average',	'SubD50_StandardDeviation',
'RipCovBigTree_Average',	'RipCovBigTree_StandardDeviation',	'RipCovConif_Average',
'RipCovConif_StandardDeviation',	'RipCovGrnd_Average',	'RipCovGrnd_StandardDeviation',
'RipCovNonWood_Average',	'RipCovNonWood_StandardDeviation',	'RipCovUstory_Average',
'RipCovUstory_StandardDeviation',	'RipCovWood_Average',	'RipCovWood_StandardDeviation',
'LWVol_Wet_Average',	'LWVol_Wet_StandardDeviation',	'LWVol_Bf_Average',	'LWVol_Bf_StandardDeviation',
'RipCovCanNone_Average',	'UCSRB_RipCanCover',	'RipCovCanNone_StandardDeviation',	'Ucut_Area_Average',
'Ucut_Area_StandardDeviation',	'FishCovLW_Average',	'FishCovLW_StandardDeviation',
'SubEstSandFines_Average',	'SubEstSandFines_StandardDeviation',	'LWFreq_Wet_Average',
'LWFreq_Wet_StandardDeviation',	'FishCovNone_Average',	'FishCovNone_StandardDeviation',
'LWFreq_Bf_Average',	'LWFreq_Bf_StandardDeviation',	'FishCovAqVeg_Average',
'FishCovAqVeg_StandardDeviation',	'SubEstBldr_Average',	'SubEstBldr_StandardDeviation',
'SubEstCbl_Average',	'SubEstGrvl_Average',	'FishCovTotal_Average',	'FishCovTotal_StandardDeviation',
'UcutLgth_Pct_Average',	'UcutLgth_Pct_StandardDeviation',	'UcutArea_Pct_Average',
'UcutArea_Pct_StandardDeviation',	'SC_Area_Average',	'SC_Area_StandardDeviation',
'SC_Area_Pct_Average',	'GRVL_COBL_UCSRB')
CHAMP_data_per_reach[cols.num] <- sapply(CHAMP_data_per_reach[cols.num],as.numeric)
class(habitat_raw_data)
# -------------------------- CHAMP data only use 139 reaches, so add reaches not present as NA -------------
CHAMP_data_Updated =  habitat_raw_data %>% select("ReachName","Basin","Assessment.Unit")
dim(habitat_raw_data)
x = habitat_raw_data[,c("ReachName","Basin","Assessment.Unit")]
dim(x)
# -------------------------- CHAMP data only use 139 reaches, so add reaches not present as NA -------------
CHAMP_data_Updated =  habitat_raw_data[,c("ReachName","Basin","Assessment.Unit")]
CHAMP_data_Updated = merge(CHAMP_data_Updated, CHAMP_data_per_reach, by = "ReachName",
all.x = TRUE, all.y = TRUE)
Reach_Information_data = read_excel( paste(data_path,'ReachInfo.xlsx', sep="") )
Habitat_Quality_and_Geomorphic_Potential_Rating_Criteria = read_excel( paste(data_path,'Habitat_Quality_and_Geomorphic_Potential_Rating_Criteria.xlsx', sep="") )
# ----------- update columns that are numeric to numeric ------------
cols.num = c('Category_lower', 'Category_upper')
Habitat_Quality_and_Geomorphic_Potential_Rating_Criteria[cols.num] <- sapply(Habitat_Quality_and_Geomorphic_Potential_Rating_Criteria[cols.num],as.numeric)
# ---------------------------------------------------------------------------
#    Generate data frame where each Data Source has a row (since some rows have multiple data sources)
# ---------------------------------------------------------------------------
Habitat_Quality_and_Geomorphic_Potential_Rating_Criteria_Updated = data.frame()
for(rowx in rownames(Habitat_Quality_and_Geomorphic_Potential_Rating_Criteria)){
# ------------- choose each row -------------
rowx2 = Habitat_Quality_and_Geomorphic_Potential_Rating_Criteria[rowx, ]
data_source_x = rowx2$Data_Sources
# -------------- verify if multiple data sources ---------
if(grepl( ",", data_source_x, fixed = TRUE)){
list_data_sources = unlist(strsplit(data_source_x, ","))
for(data_sources_x in list_data_sources){
# ------------- create updated row with just one data sources --------
rowx2_updated = rowx2
rowx2_updated$Data_Sources = data_sources_x
# ------------- append new row ------------
Habitat_Quality_and_Geomorphic_Potential_Rating_Criteria_Updated =
rbind(Habitat_Quality_and_Geomorphic_Potential_Rating_Criteria_Updated, rowx2_updated)
}
# ----------- if only one data sources ---------------
}else{
Habitat_Quality_and_Geomorphic_Potential_Rating_Criteria_Updated =
rbind(Habitat_Quality_and_Geomorphic_Potential_Rating_Criteria_Updated, rowx2)
}
}
Habitat_Limiting_Factor_Rating_Criteria = read_excel( paste(data_path,'Habitat_Limiting_Factor_Rating_Criteria.xlsx', sep="") )
# ----------- update columns that are numeric to numeric ------------
cols.num = c('Category_lower', 'Category_upper', 'Filter_value_lower_meters', 'Filter_value_upper_meters')
Habitat_Limiting_Factor_Rating_Criteria[cols.num] <- sapply(Habitat_Limiting_Factor_Rating_Criteria[cols.num],as.numeric)
# ---------------------------------------------------------------------------
#    Generate data frame where each Data Source has a row (since some rows have multiple data sources)
# ---------------------------------------------------------------------------
Habitat_Limiting_Factor_Rating_Criteria_Updated = data.frame()
for(rowx in rownames(Habitat_Limiting_Factor_Rating_Criteria)){
# ------------- choose each row -------------
rowx2 = Habitat_Limiting_Factor_Rating_Criteria[rowx, ]
data_source_x = rowx2$Data_Sources
# -------------- verify if multiple data sources ---------
if(grepl( ",", data_source_x, fixed = TRUE)){
list_data_sources = unlist(strsplit(data_source_x, ","))
for(data_sources_x in list_data_sources){
# ------------- create updated row with just one data sources --------
rowx2_updated = rowx2
rowx2_updated$Data_Sources = data_sources_x
# ------------- append new row ------------
Habitat_Limiting_Factor_Rating_Criteria_Updated =
rbind(Habitat_Limiting_Factor_Rating_Criteria_Updated, rowx2_updated)
}
# ----------- if only one data sources ---------------
}else{
Habitat_Limiting_Factor_Rating_Criteria_Updated =
rbind(Habitat_Limiting_Factor_Rating_Criteria_Updated, rowx2)
}
}
Confinement_Scores = read_excel( paste(data_path,'Confinement_Scores.xlsx', sep="") )
# ------------------- update geomorphic potential/confinement scores with criteria ---------------
source(paste(script_path, 'FUNCTIONS_for_Reading_Data.R', sep=""))
Geomorphic_Criteria = Habitat_Quality_and_Geomorphic_Potential_Rating_Criteria_Updated[which(Habitat_Quality_and_Geomorphic_Potential_Rating_Criteria_Updated$Habitat_Quality_Scoring_Metric == "Geomorphic Potential"),]
FUNCTION_update_Confinement_Scores(Confinement_Scores, Geomorphic_Criteria)
Habitat_Quality_Restoration_and_Protection_Scoring = read_excel( paste(data_path,'Habitat_Quality_Restoration_and_Protection_Scoring.xlsx', sep="") )
# --------------- divide up into Restoration and Protectoin -------------------------
Restoration_Scoring = Habitat_Quality_Restoration_and_Protection_Scoring %>%
filter(Habitat_Quality_Score_Metric == 'Habitat Quality Scoring- Restoration')
Protection_Scoring = Habitat_Quality_Restoration_and_Protection_Scoring %>%
filter(Habitat_Quality_Score_Metric == 'Habitat Quality Scoring- Protection')
Habitat_Attribute_Notes_and_Professional_Judgement = read_excel( paste(data_path,'Habitat_Attribute_Notes_and_Professional_Judgement.xlsx', sep="") )
Crosswalk_Habitat_Attributes_and_Actions = read_excel( paste(data_path,'Crosswalk_Habitat_Attributes_and_Actions.xlsx', sep="/"),
sheet = 'Sheet1')
Crosswalk_Habitat_Attributes_and_Actions$Habitat_Attribute_2 = gsub(" ", "", Crosswalk_Habitat_Attributes_and_Actions$`Habitat Attribute`, fixed = TRUE)
Reach_Asessment_Project_Data = read_excel( paste(data_path,'Reach_Assessments_Projects_Table_05052020.xlsx', sep="/"),
sheet = 'Data_Entry')
Reach_Asessment_Projects_Actions_List = read_excel( paste(data_path,'Reach_Assessments_Projects_Table_05052020.xlsx', sep="/"),
sheet = 'Action_Lists')
Reach_Assessment_Check_List = read_excel( paste(data_path,'Reach_Assessments_Projects_Table_05052020.xlsx', sep="/"),
sheet = 'Reach_Assessment_Check_List')
output_Habitat_Quality_and_Habitat_Attribute_Scores = "no"  # enter "yes" or "no" if you want this output
time1 <- proc.time()[3] # for timing the total time to run the tool
# --------------- directory of scripts -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
data_path = 'Data/'
# ----------- directory for output ---------
output_path = 'Output/'
# ---------------------------------------------------------------------------
#
#     Read in Data
#
# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
# ---------------------------------------------------------------------------
#
#      Criteria for Filters
#
# ---------------------------------------------------------------------------
print("----------------------------------------- ASSIGN CRITERIA --------------------------------------------")
source(paste(script_path, 'Criteria_Script.R', sep=""))
# ---------------------------------------------------------------------------
#   Generate Habitat Quality Restoration and Protection Score
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITA QUALITY SCORES --------------------------------------------")
source(paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep=""))
source(paste(script_path, 'Data_Sources_List_for_Habitat_Attributes.R', sep=""))
source(paste(script_path, 'FUNCTIONS_for_Habitat_Quality_Filters.R', sep=""))
# --------------------------------------
#   Loop through each Habitat Attribute
# --------------------------------------
Habitat_Quality_Scores = as.tibble(Reach_Information_data[,c('ReachName','Basin', 'Assessment.Unit',
'Spring.Chinook.Reach','Steelhead.Reach','Bull.Trout.Reach')])
colnames(Habitat_Quality_Scores) = c('ReachName','Basin', 'Assessment.Unit',
'Spring.Chinook.Reach','Steelhead.Reach','Bull.Trout.Reach')
ptm <- proc.time()[3]
for(habitat_attribute_x in names(Habitat_Quality_Habitat_Attributes_List)){
print(habitat_attribute_x)
# --------------------------------------------------------------------
#   Loop through each Data Source for this specific habitat attribute
# --------------------------------------------------------------------
data_sources_list =  Habitat_Quality_Habitat_Attributes_List[habitat_attribute_x]
# --------------------------------------------------------------------
#   Only one data source for this habitat attribute
# --------------------------------------------------------------------
if(length(data_sources_list[[1]]) == 1){
output_x = FUNCTION_generate_habitat_attribute_score_from_Habitat_Data_Raw(habitat_attribute_x, data_sources_list[[1]][1], "HQ")
# --------------------------------------------------------------------
#  MULTIPLE data source for this habitat attribute (need to get optimum)
# --------------------------------------------------------------------
# NOTE this is only true for Temperature- Rearing AND	Flow- Summer Base Flow
}else{
# ------------ data frame to record habitat attributes --------
habitat_attribute_x_data_frame = data.frame()
for( location_x in 1:length(data_sources_list[[1]]) ){
# ------------------- skip reading PROFESSOINAL JUDGEMENT -------------
if(data_sources_list[[1]][location_x] == "PROFESSIONAL JUDGEMENT"){ next }else{
# ------------ Generate metric value  AND score (1,3,5) for each habitat attribute -------------------
# outputs both metric value and score
output_x = FUNCTION_generate_habitat_attribute_score_from_Habitat_Data_Raw(habitat_attribute_x,  data_sources_list[[1]][location_x],  "HQ" )
# -------- data frame for this specific reach and habitat attribute --------
habitat_attribute_x_data_frame = rbind(habitat_attribute_x_data_frame, output_x$score)
}
}
# ------------ data frame to record habitat attributes --------
habitat_attribute_x_data_frame = t(habitat_attribute_x_data_frame)
habitat_attribute_x_data_frame = as_data_frame(habitat_attribute_x_data_frame)
# ------------------- get minimum score for each row ----------
habitat_attribute_x_data_frame = habitat_attribute_x_data_frame%>%
rowwise() %>%
mutate(minimum_score = min(c_across(), na.rm=T) )
# -------- adding NA column (for metric colum, it needs to be NA to be multiple) ------
habitat_attribute_x_data_frame$na_column = NA
output_x =  habitat_attribute_x_data_frame[,c("na_column","minimum_score")]
colnames(output_x) = c("metric_data", "score")
}
# --------------------------------------------------------------------
#      Combine data with data frame
# --------------------------------------------------------------------
# ---------------------------- add new columns to summary data frame -----------
#column_metric = paste(gsub(" ", "", habitat_attribute_x, fixed = TRUE), "metric", sep="_")
column_score = paste(gsub(" ", "", habitat_attribute_x, fixed = TRUE), "score", sep="_")
#Habitat_Quality_Scores[,column_metric] = output_x$metric_data
Habitat_Quality_Scores[,column_score] = as.numeric(output_x$score)
# --------------------------------------------------------------------
#      Add Riparian Mean score
# --------------------------------------------------------------------
if(habitat_attribute_x == 'Riparian- Canopy Cover'){
Habitat_Quality_Scores = Habitat_Quality_Scores%>%
rowwise() %>%
mutate(Riparian_Mean = mean(c_across(c('Riparian-Disturbance_score',
'Riparian-CanopyCover_score')), na.rm=T) )
}
# --------------------------------------------------------------------
#      Add Stability mean score
# --------------------------------------------------------------------
if(habitat_attribute_x == 'Channel Stability'){
Habitat_Quality_Scores = Habitat_Quality_Scores%>%
rowwise() %>%
mutate(Stability_Mean = mean(c_across(c('BankStability_score',
'ChannelStability_score')), na.rm=T) )
}
}
