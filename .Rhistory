Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info, exclude_bull_trout)
dim(Reach_Habitat_Attribute_Life_Stage_Restoration_Output)
colnames(Reach_Habitat_Attribute_Life_Stage_Restoration_Output)
colnames(Habitat_Quality_Scores)
dim(Habitat_Quality_Scores)
# ------------------ output Habitat Quality Scores for WebMap ----------------
Habitat_Quality_Scores_for_WebMap = Habitat_Quality_Scores[,Habitat_Quality_Scores_columns_to_pull]
Habitat_Quality_Scores_columns_to_pull = c("ReachName","Basin", "BankStability_score","ChannelStability_score","Stability_Mean","CoarseSubstrate_score","Cover-Wood_score","Flow-SummerBaseFlow_score",
"Off-Channel-Floodplain_score","Off-Channel-Side-Channels_score","PoolQuantity&Quality_score","Riparian-Disturbance_score",
"Riparian-CanopyCover_score","Riparian_Mean","Temperature-Rearing_score", "HQ_Sum","HQ_Pct")
# ------------------ output Habitat Quality Scores for WebMap ----------------
Habitat_Quality_Scores_for_WebMap = Habitat_Quality_Scores[,Habitat_Quality_Scores_columns_to_pull]
output_path_x = paste(output_path,'Habitat_Quality_Scores_for_WebMap.xlsx', sep="")
write_xlsx(Habitat_Quality_Scores_for_WebMap, output_path_x)
colnames(Reach_Information_data)
Reach_Information_data_columns_to_pull = c("ReachName","Basin","Assessment.Unit","Spring.Chinook.Reach" ,"Steelhead.Reach","Bull.Trout.Reach",
"ReviewComments", "Reach.Assessment.Data", "Level.2.Survey.Data", "Level.2.Data.Prior.to.2000", "Level.2.Survey.Data.Date",
"Data.Gap","Length..miles.",  "Length..meters." ,"Reach_start_river_miles", "Reach_end_river_miles"   )
Reach_Information_data_columns_new_names = c("Reach Name","Basin","Assessment Unit","Spring Chinook Reach" ,"Steelhead Reach","Bull Trout Reach",
"Review Comments", "Reach Assessment Data", "Level 2 Survey Data", "Level 2 Data Prior to 2000", "Level 2 Survey Date",
"Data Gap","Length (miles)",  "Length (meters)" ,"RM Start", "RM End")
Reach_Information_data_columns_to_pull
Reach_Information_data_columns_new_names
# ------------------ output Basin Reach Information for WebMap ----------------
Reach_Information_data_for_WebMap = Reach_Information_data[,Reach_Information_data_columns_to_pull]
colnames(Reach_Information_data_for_WebMap) = Reach_Information_data_columns_new_names
# ------------------ output Basin Reach Information for WebMap ----------------
Reach_Information_data_for_WebMap = Reach_Information_data[,Reach_Information_data_columns_to_pull]
colnames(Reach_Information_data_for_WebMap) = Reach_Information_data_columns_new_names
output_path_x = paste(output_path,'Reach_Information_Data_for_WebMap.xlsx', sep="")
write_xlsx(Reach_Information_data_for_WebMap, output_path_x)
dim(Reach_Information_data_for_WebMap)
View(Reach_Information_data_for_WebMap)
View(Reach_Rankings_Output_Restoration)
colnames(Reach_Rankings_Output_Restoration)
colnames(Reach_Habitat_Attribute_Life_Stage_Restoration_Output)
View(Reach_Habitat_Attribute_Life_Stage_Restoration_Output)
View(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output)
# ---------------------------------------------------------------------------
#  Reach-Habitat Attributes-Life Stage-Species per row
# ---------------------------------------------------------------------------
Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage_Species( Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info, exclude_bull_trout, HQ_priority_life_stages)
View(Restoration_Prioritization_Output_for_WebMap)
dim(Restoration_Prioritization_Output_for_WebMap)
dim(Restoration_Prioritization_Output_for_WebMap)
dim(Reach_Rankings_Output_Restoration)
for(reach_x in Reach_Rankings_Output_Restoration$ReachName ){
reach_x2 = which(Restoration_Prioritization_Output_for_WebMap$`Reach Name` == reach_x)
if(length(reach_x2) == 0){
print(reach_x)
}
}
colnames(Restoration_Prioritization_Output_for_WebMap)
colnames(Restoration_Prioritization_Output_for_WebMap)
reach_x = Restoration_Prioritization_Output_for_WebMap$`Reach Name`[1]
reach_x
# ---------------------- Add Basin ------------------
basin_x = Reach_Information_data$Basin[which(Reach_Information_data$ReachName == reach_x)]
basin_x
# ------------------- Add Reach Rank ---------------
reach_rank_x = Reach_Rankings_Output_Restoration$AU_level_Reach_Rank[which(Reach_Rankings_Output_Restoration$ReachName == reach_x)]
reach_rank_x
colnames(Restoration_Prioritization_Output)
# -------------- Unacceptable Limiting Factors ----------------
unacceptable_limiting_factors_x = Restoration_Prioritization_Output$Unacceptable_Impaired_Habitat_Attributes_All_Species[which(Restoration_Prioritization_Output$ReachName == reach_x)]
unacceptable_limiting_factors_x
# ------------ Add At-Risk Limiting Factors  ----------------
at_risk_limiting_factors_x = Restoration_Prioritization_Output$At_Risk_Impaired_Habitat_Attributes_All_Species[which(Restoration_Prioritization_Output$ReachName == reach_x)]
at_risk_limiting_factors_x
which(Restoration_Prioritization_Output$ReachName == reach_x)
Restoration_Prioritization_Output[1,]
# --------------- combine all the output -------------
output_x = t( as.data.frame( c(basin_x, reach_rank_x,unacceptable_limiting_factors_x, at_risk_limiting_factors_x )  )  )
dim(output_x)
columns_to_add_Restoration_Output = c()
for(reach_x in Restoration_Prioritization_Output_for_WebMap$`Reach Name`){
# ---------------------- Add Basin ------------------
basin_x = Reach_Information_data$Basin[which(Reach_Information_data$ReachName == reach_x)]
# ------------------- Add Reach Rank ---------------
reach_rank_x = Reach_Rankings_Output_Restoration$AU_level_Reach_Rank[which(Reach_Rankings_Output_Restoration$ReachName == reach_x)]
# -------------- Unacceptable Limiting Factors ----------------
unacceptable_limiting_factors_x = Restoration_Prioritization_Output$Unacceptable_Impaired_Habitat_Attributes_All_Species[which(Restoration_Prioritization_Output$ReachName == reach_x)]
# ------------ Add At-Risk Limiting Factors  ----------------
at_risk_limiting_factors_x = Restoration_Prioritization_Output$At_Risk_Impaired_Habitat_Attributes_All_Species[which(Restoration_Prioritization_Output$ReachName == reach_x)]
# --------------- combine all the output -------------
output_x = t( as.data.frame( c(basin_x, reach_rank_x,unacceptable_limiting_factors_x, at_risk_limiting_factors_x )  )  )
columns_to_add_Restoration_Output = rbind(columns_to_add_Restoration_Output,  output_x )
}
reach_x
dim(columns_to_add_Restoration_Output)
output_x
dim(output_x)
basin_x
reach_rank_x
columns_to_add_Restoration_Output = c()
for(reach_x in Restoration_Prioritization_Output_for_WebMap$`Reach Name`){
# ---------------------- Add Basin ------------------
basin_x = Reach_Information_data$Basin[which(Reach_Information_data$ReachName == reach_x)]
# ------------------- Add Reach Rank ---------------
reach_rank_x = Reach_Rankings_Output_Restoration$AU_level_Reach_Rank[which(Reach_Rankings_Output_Restoration$ReachName == reach_x)]
if(length(reach_rank_x) == 0){ reach_rank_x = NA}
# -------------- Unacceptable Limiting Factors ----------------
unacceptable_limiting_factors_x = Restoration_Prioritization_Output$Unacceptable_Impaired_Habitat_Attributes_All_Species[which(Restoration_Prioritization_Output$ReachName == reach_x)]
# ------------ Add At-Risk Limiting Factors  ----------------
at_risk_limiting_factors_x = Restoration_Prioritization_Output$At_Risk_Impaired_Habitat_Attributes_All_Species[which(Restoration_Prioritization_Output$ReachName == reach_x)]
# --------------- combine all the output -------------
output_x = t( as.data.frame( c(basin_x, reach_rank_x,unacceptable_limiting_factors_x, at_risk_limiting_factors_x )  )  )
columns_to_add_Restoration_Output = rbind(columns_to_add_Restoration_Output,  output_x )
}
dim(columns_to_add_Restoration_Output)
rownames(columns_to_add_Restoration_Output) = rownames(Restoration_Prioritization_Output_for_WebMap)
Restoration_Prioritization_Output_for_WebMap = cbind(Restoration_Prioritization_Output_for_WebMap, columns_to_add_Restoration_Output)
View(Restoration_Prioritization_Output_for_WebMap)
dim(Restoration_Prioritization_Output_for_WebMap)
Restoration_Prioritization_Output_for_WebMap[,c(1:7)]
columns_to_add_Restoration_Output = c()
for(reach_x in Restoration_Prioritization_Output_for_WebMap$`Reach Name`){
# ---------------------- Add Basin ------------------
basin_x = Reach_Information_data$Basin[which(Reach_Information_data$ReachName == reach_x)]
# ------------------- Add Reach Rank ---------------
reach_rank_x = Reach_Rankings_Output_Restoration$AU_level_Reach_Rank[which(Reach_Rankings_Output_Restoration$ReachName == reach_x)]
if(length(reach_rank_x) == 0){ reach_rank_x = NA}
# -------------- Unacceptable Limiting Factors ----------------
unacceptable_limiting_factors_x = Restoration_Prioritization_Output$Unacceptable_Impaired_Habitat_Attributes_All_Species[which(Restoration_Prioritization_Output$ReachName == reach_x)]
# ------------ Add At-Risk Limiting Factors  ----------------
at_risk_limiting_factors_x = Restoration_Prioritization_Output$At_Risk_Impaired_Habitat_Attributes_All_Species[which(Restoration_Prioritization_Output$ReachName == reach_x)]
# --------------- combine all the output -------------
output_x = t( as.data.frame( c(basin_x, reach_rank_x,unacceptable_limiting_factors_x, at_risk_limiting_factors_x )  )  )
colnames(output_x) = c("Basin","Reach Rank", "Unacceptable Limiting Factors", "At-Risk Limiting Factors")
columns_to_add_Restoration_Output = rbind(columns_to_add_Restoration_Output,  output_x )
}
rownames(columns_to_add_Restoration_Output) = rownames(Restoration_Prioritization_Output_for_WebMap)
Restoration_Prioritization_Output_for_WebMap = cbind(Restoration_Prioritization_Output_for_WebMap, columns_to_add_Restoration_Output)
View(Restoration_Prioritization_Output_for_WebMap)
Restoration_Prioritization_Output_for_WebMap = Restoration_Prioritization_Output_for_WebMap[,c(1:7,12:15)]
colnames(Restoration_Prioritization_Output_for_WebMap)
# --------------------------- re-order reaches to be in correct order ---------------------------------
Restoration_Prioritization_Output_for_WebMap_column_order = c("Reach Name","Basin", "Assessment Unit" ,"Priority Actions" ,"Reach Rank",
"Priority Species" , "Priority Life Stages" ,
"Unacceptable Limiting Factors" ,"At-Risk Limiting Factors", "Action Categories" )
# --------------------------- re-order reaches to be in correct order ---------------------------------
# NOTE: these are also the correct column names (as of 24.June.2021)
Restoration_Prioritization_Output_for_WebMap_column_order = c("Reach Name","Basin", "Assessment Unit" ,"Priority Actions" ,"Reach Rank",
"Priority Species" , "Priority Life Stages" ,
"Unacceptable Limiting Factors" ,"At-Risk Limiting Factors", "Action Categories" )
Restoration_Prioritization_Output_for_WebMap = Restoration_Prioritization_Output_for_WebMap[,Restoration_Prioritization_Output_for_WebMap_column_order]
View(Restoration_Prioritization_Output_for_WebMap)
colnames(Restoration_Prioritization_Output_for_WebMap)
# ----------- Outward Facing Table (pops up when reach is clicked on) -----------
output_path_x =  paste(output_path,'Restoration_Prioritization_Output_for_WebMap_Table.xlsx', sep="")
write_xlsx(Restoration_Prioritization_Output_for_WebMap,output_path_x )
dim(Protection_Prioritization_Output)
print("----------------------------------------- OUTPUT THE RESULTS --------------------------------------------")
# -------------- Generate Function ---------------
source(paste(script_path, 'FUNCTIONS_for_Protection_Output.R', sep=""))
# -------------- Run Function to generate Protection output -----------
Protection_Prioritization_Output = FUNCTION_Combine_Protection_Output(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']],
exclude_bull_trout)
Q
Q
View(FUNCTION_Combine_Protection_Output)
# ---------------------------------------------------------------------------
#
#   Function to prep Protection Output
#
# ---------------------------------------------------------------------------
test_x = TRUE
if(test_x){
HQ_spring_chinook = Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']]
HQ_steelhead = Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']]
HQ_bull_trout = Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']]
LF_spring_chinook = Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']]
LF_steelhead = Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']]
LF_bull_trout = Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']]
}
# -------------- identify reaches across all protection
reaches_unique = unique( c(HQ_spring_chinook$ReachName, HQ_steelhead$ReachName, HQ_bull_trout$ReachName,
LF_spring_chinook$ReachName, LF_steelhead$ReachName, LF_bull_trout$ReachName))
# -------- remove NA reach ---------
xNA = which(is.na(reaches_unique))
if(length(xNA)>0){
reaches_unique = reaches_unique[-xNA]
}
# --------------------------------------------------------------
#           Loop through each reach and prep for output
# --------------------------------------------------------------
Protection_Output = c()
for(reach_x in reaches_unique){
# ------------------------------------
#      Get Basin and Assessment Unit
# -----------------------------------
basin_x = Reach_Information_data$Basin[which(Reach_Information_data$ReachName == reach_x)]
assessment_unit_x = Reach_Information_data$Assessment.Unit[which(Reach_Information_data$ReachName == reach_x)]
# ------------------------------------
#     Pathway
# -----------------------------------
pathway_x = c()
if( any(HQ_spring_chinook$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "HQ_spring_chinook", sep=",")
}
if( any(HQ_steelhead$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "HQ_steelhead", sep=",")
}
if( any(LF_spring_chinook$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_spring_chinook", sep=",")
}
if( any(LF_steelhead$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_steelhead", sep=",")
}
if(exclude_bull_trout == "no"){
if( any(HQ_bull_trout$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "HQ_bull_trout", sep=",")
}
if( any(LF_bull_trout$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_bull_trout", sep=",")
}
}
# ---------------- remove leading comma -------
pathway_x = substr(pathway_x,2,nchar(pathway_x))
# ------------- Number of Pathways -------------------
number_of_pathways_x =  length( unlist(strsplit(pathway_x, ",")) )
# ------------------------------------
#      Life Stage
# -----------------------------------
life_stage_x = c()
if( any(LF_spring_chinook$ReachName == reach_x) ){
life_stages_LF_x = LF_spring_chinook$life_stage[which(LF_spring_chinook$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
if( any(LF_steelhead$ReachName == reach_x) ){
life_stages_LF_x = LF_steelhead$life_stage[which(LF_steelhead$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
if(exclude_bull_trout == "no"){
if( any(LF_bull_trout$ReachName == reach_x) ){
life_stages_LF_x = LF_bull_trout$life_stage[which(LF_bull_trout$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
}
# ------------- Number of Life Stages -------------------
if( !is.null(life_stage_x) ){
life_stage_x = substr(life_stage_x,2,nchar(life_stage_x))   # remove leading comma
life_stage_x = unique(unlist(strsplit(life_stage_x, ","))) # get unique life stages (don't double count)
number_of_life_stage_x =  length( life_stage_x )  # number of life stages
life_stage_x = paste(life_stage_x, collapse=",") # put all life stages into a single element
}else{
number_of_life_stage_x = "NA"
}
# ----- make NA if no life stages -----------
if(is.null(life_stage_x)){life_stage_x = "NA"}
# ------------------------------------
#     Action
# -----------------------------------
action_x = "Habitat Protection"
# ------------------------------------
#    Combine into one row, then output
# -----------------------------------
output_x = t(as.data.frame( c(reach_x, assessment_unit_x, basin_x, pathway_x, number_of_pathways_x,
life_stage_x, number_of_life_stage_x, action_x )))
rownames(output_x) = reach_x
colnames(output_x) = c("ReachName","Assessment.Unit", "Basin","Pathway", "Number_of_Pathways",
"Life_Stages","Number_of_Life_Stages","Action")
Protection_Output = rbind(Protection_Output, output_x)
}
reach_x
reaches_unique
# ------------------------------------
#      Get Basin and Assessment Unit
# -----------------------------------
basin_x = Reach_Information_data$Basin[which(Reach_Information_data$ReachName == reach_x)]
assessment_unit_x = Reach_Information_data$Assessment.Unit[which(Reach_Information_data$ReachName == reach_x)]
# ------------------------------------
#     Pathway
# -----------------------------------
pathway_x = c()
if( any(HQ_spring_chinook$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "HQ_spring_chinook", sep=",")
}
if( any(HQ_steelhead$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "HQ_steelhead", sep=",")
}
if( any(LF_spring_chinook$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_spring_chinook", sep=",")
}
if( any(LF_steelhead$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_steelhead", sep=",")
}
if(exclude_bull_trout == "no"){
if( any(HQ_bull_trout$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "HQ_bull_trout", sep=",")
}
if( any(LF_bull_trout$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_bull_trout", sep=",")
}
}
# ---------------- remove leading comma -------
pathway_x = substr(pathway_x,2,nchar(pathway_x))
# ------------- Number of Pathways -------------------
number_of_pathways_x =  length( unlist(strsplit(pathway_x, ",")) )
# ------------------------------------
#      Life Stage
# -----------------------------------
life_stage_x = c()
if( any(LF_spring_chinook$ReachName == reach_x) ){
life_stages_LF_x = LF_spring_chinook$life_stage[which(LF_spring_chinook$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
if( any(LF_steelhead$ReachName == reach_x) ){
life_stages_LF_x = LF_steelhead$life_stage[which(LF_steelhead$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
if(exclude_bull_trout == "no"){
if( any(LF_bull_trout$ReachName == reach_x) ){
life_stages_LF_x = LF_bull_trout$life_stage[which(LF_bull_trout$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
}
# ------------- Number of Life Stages -------------------
if( !is.null(life_stage_x) ){
life_stage_x = substr(life_stage_x,2,nchar(life_stage_x))   # remove leading comma
life_stage_x = unique(unlist(strsplit(life_stage_x, ","))) # get unique life stages (don't double count)
number_of_life_stage_x =  length( life_stage_x )  # number of life stages
life_stage_x = paste(life_stage_x, collapse=",") # put all life stages into a single element
}else{
number_of_life_stage_x = "NA"
}
# ----- make NA if no life stages -----------
if(is.null(life_stage_x)){life_stage_x = "NA"}
# ------------------------------------
#     Action
# -----------------------------------
action_x = "Habitat Protection"
# ------------------------------------
#    Combine into one row, then output
# -----------------------------------
output_x = t(as.data.frame( c(reach_x, assessment_unit_x, basin_x, pathway_x, number_of_pathways_x,
life_stage_x, number_of_life_stage_x, action_x )))
rownames(output_x) = reach_x
colnames(output_x) = c("ReachName","Assessment.Unit", "Basin","Pathway", "Number_of_Pathways",
"Life_Stages","Number_of_Life_Stages","Action")
dim(output_x)
output_x
View(Reach_Information_data)
reach_x
assessment_unit_x
basin_x
pathway_x
any( LF_bull_trout$ReachName == reach_x)
exclude_bull_trout
# -------------- Generate Function ---------------
source(paste(script_path, 'FUNCTIONS_for_Protection_Output.R', sep=""))
# -------------- Run Function to generate Protection output -----------
Protection_Prioritization_Output = FUNCTION_Combine_Protection_Output(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']],
exclude_bull_trout)
dim(Protection_Prioritization_Output)
View(Protection_Prioritization_Output)
View(AU_Rank_Data)
unique(Protection_Prioritization_Output$Assessment.Unit)
View(AU_Rank)
View(AU_Ranks_data)
dim(AU_Ranks_data)
View(AU_Ranks_data[,c(1:2,11,13,15)])
colnames(Protection_Prioritization_Output)
View(Protection_Prioritization_Output)
reach_x = Protection_Prioritization_Output$`Reach Name`[1]
reach_x
row_i = 2
Protection_Prioritization_Output$ReachName[row_i]
# ---------------- pull row -------------------
# ------------------- Pull Reach Rank ---------------
reach_rank_x = Reach_Rankings_Output_Protection$AU_level_Reach_Rank[ which( Reach_Rankings_Output_Protection$ReachName == Protection_Prioritization_Output$ReachName[row_i] )]
reach_rank_x
Protection_Prioritization_Output$Reach_Rank = NA
for(row_i in 1:nrow( Protection_Prioritization_Output) ){
# ------------------- Pull Reach Rank ---------------
reach_rank_x = Reach_Rankings_Output_Protection$AU_level_Reach_Rank[ which( Reach_Rankings_Output_Protection$ReachName == Protection_Prioritization_Output$ReachName[row_i] )]
# --------------- Add to Ouptut -------------
if(length(reach_rank_x) > 0 ){
Protection_Prioritization_Output$Reach_Rank[row_i] = reach_rank_x
}
}
colnames(Protection_Prioritization_Output)
# ------------------- order columns and give them correct names --------------
Protection_Prioritization_Output_column_order = c("ReachName","Basin", "Assessment.Unit", "Pathway","Reach_Rank",  "Life_Stages","Action")
Protection_Prioritization_Output_column_UPDATED_names = c("Reach Name", "Basin", "Assessment Unit", "Prioritization Pathway","Reach Rank", "Priority Life Stages", "Priority Actions")
# ---------------- re-order columns for WebMap ------
Protection_Prioritization_Output_for_WebMap = Protection_Prioritization_Output[,Protection_Prioritization_Output_column_order]
# --------------- correct names for output ------------
colnames(Protection_Prioritization_Output_for_WebMap) = Protection_Prioritization_Output_column_UPDATED_names
# ----------- Outward Facing Table (pops up when reach is clicked on) - PROTECTION -----------
output_path_x =  paste(output_path,'Protection_Prioritization_Output_for_WebMap_Table.xlsx', sep="")
write_xlsx(Protection_Prioritization_Output_for_WebMap,output_path_x )
colnames(Habitat_Quality_Data_Gaps)
colnames(Habitat_Quality_Scores)
dim(Habitat_Quality_Scores)
habitat_attributes_for_missing_layer = c("BankStability_score",  "ChannelStability_score", "CoarseSubstrate_score", "Cover-Wood_score", "Flow-SummerBaseFlow_score" ,
"Off-Channel-Floodplain_score" , "Off-Channel-Side-Channels_score" ,"PoolQuantity&Quality_score" ,
"Riparian-CanopyCover_score", "Riparian-Disturbance_score" , "Temperature-Rearing_score" )
habitat_attributes_for_missing_layer_COLUMN_NAMES = c("Bank Stability",  "Channel Stability", "Coarse Substrate", "Cover-Wood", "Flow-Summer Base Flow" ,
"Off-Channel-Floodplain" , "Off-Channel-Side-Channels" ,"Pool Quantity & Quality" ,
"Riparian-Canopy Cover", "Riparian-Disturbance" , "Temperature-Rearing" )
i = 1
habitat_attributes_for_missing_layer_COLUMN_NAMES[i]
# ------------------- add to Habitat_Quality_Data_Gaps --------------
Habitat_Quality_Data_Gaps$habitat_attributes_for_missing_layer_COLUMN_NAMES[i] = NA
# ------------------- add to Habitat_Quality_Data_Gaps --------------
Habitat_Quality_Data_Gaps[,habitat_attributes_for_missing_layer_COLUMN_NAMES[i]] = NA
Habitat_Quality_Data_Gaps = Habitat_Quality_Scores[, c("ReachName","Basin","Assessment.Unit")]
# ------------------- add to Habitat_Quality_Data_Gaps --------------
Habitat_Quality_Data_Gaps$habitat_attributes_for_missing_layer_COLUMN_NAMES[i] = NA
colnames(Habitat_Quality_Data_Gaps)
Habitat_Quality_Data_Gaps = Habitat_Quality_Scores[, c("ReachName","Basin","Assessment.Unit")]
# ------------------- add to Habitat_Quality_Data_Gaps --------------
Habitat_Quality_Data_Gaps[,habitat_attributes_for_missing_layer_COLUMN_NAMES[i]] = NA
colnames(Habitat_Quality_Data_Gaps)
habitat_attribute_x = habitat_attributes_for_missing_layer[1]
habitat_attribute_x
# -------------------- pull if present -----------------
present_data_x = which(Habitat_Quality_Scores[,habitat_attribute_x]>0)
Habitat_Quality_Scores[present_data_x,habitat_attribute_x]
present_data_x
Habitat_Quality_Scores[c(3,4,13:17,95:105),habitat_attribute_x]
habitat_attributes_for_missing_layer = c("BankStability_score",  "ChannelStability_score", "CoarseSubstrate_score", "Cover-Wood_score", "Flow-SummerBaseFlow_score" ,
"Off-Channel-Floodplain_score" , "Off-Channel-Side-Channels_score" ,"PoolQuantity&Quality_score" ,
"Riparian-CanopyCover_score", "Riparian-Disturbance_score" , "Temperature-Rearing_score" )
Habitat_Quality_Data_Gaps = Habitat_Quality_Scores[, c("ReachName","Basin","Assessment.Unit")]
habitat_attributes_for_missing_layer = c("BankStability_score",  "ChannelStability_score", "CoarseSubstrate_score", "Cover-Wood_score", "Flow-SummerBaseFlow_score" ,
"Off-Channel-Floodplain_score" , "Off-Channel-Side-Channels_score" ,"PoolQuantity&Quality_score" ,
"Riparian-CanopyCover_score", "Riparian-Disturbance_score" , "Temperature-Rearing_score" )
habitat_attributes_for_missing_layer_COLUMN_NAMES = c("Bank Stability",  "Channel Stability", "Coarse Substrate", "Cover-Wood", "Flow-Summer Base Flow" ,
"Off-Channel-Floodplain" , "Off-Channel-Side-Channels" ,"Pool Quantity & Quality" ,
"Riparian-Canopy Cover", "Riparian-Disturbance" , "Temperature-Rearing" )
i = 0
for(habitat_attribute_x in habitat_attributes_for_missing_layer){
i = i + 1
# ------------------- add to Habitat_Quality_Data_Gaps --------------
Habitat_Quality_Data_Gaps[,habitat_attributes_for_missing_layer_COLUMN_NAMES[i]] = "missing"
# -------------------- pull if present -----------------
present_data_x = which(Habitat_Quality_Scores[,habitat_attribute_x]>0)
Habitat_Quality_Data_Gaps[present_data_x,habitat_attributes_for_missing_layer_COLUMN_NAMES[i]] = "present"
}
View(Habitat_Quality_Data_Gaps)
output_path_x =  paste(output_path,'Habitat_Quality_Data_Missing.xlsx', sep="")
write_xlsx(Habitat_Quality_Data_Gaps,output_path_x )
# ---------------------------------------------------------------------------
#  Reach-Habitat Attributes-Life Stage per row
# ---------------------------------------------------------------------------
columns_info = c( "ReachName","Basin","Assessment.Unit" ) # columns to automatically add to beginning (left side) of output
Reach_Habitat_Attribute_Life_Stage_Restoration_Output = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage(  Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info, exclude_bull_trout)
# ---------------------------------------------------------------------------
#  Reach-Habitat Attributes-Life Stage-Species per row
# ---------------------------------------------------------------------------
Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage_Species( Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info, exclude_bull_trout, HQ_priority_life_stages)
# ------------------ just to test/compare output --------------
# note these should be the same - except some of the HQ output is different (Stability, Riparian)
reach_test = "Chiwawa River Lower 01"
hab_ats_1 = unlist( strsplit(Restoration_Prioritization_Output_for_WebMap[which(Restoration_Prioritization_Output_for_WebMap$`Reach Name` == reach_test),]$`Limiting Factor`, ",") )
hab_ats_2 = unique(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output$ReachName == reach_test),]$Habitat_Attribute)
setdiff(hab_ats_1, hab_ats_2)
setdiff(hab_ats_2, hab_ats_1)
unlist( strsplit(Restoration_Prioritization_Output_for_WebMap$`Priority Species`[which(Restoration_Prioritization_Output_for_WebMap$`Reach Name` == reach_test)], ",") )
unique(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output$ReachName == reach_test),]$Species)
unlist(strsplit(Restoration_Prioritization_Output_for_WebMap[which(Restoration_Prioritization_Output_for_WebMap$`Reach Name` == reach_test),]$`Priority Life Stages`, ","))[order(unlist(strsplit(Restoration_Prioritization_Output_for_WebMap[which(Restoration_Prioritization_Output_for_WebMap$`Reach Name` == reach_test),]$`Priority Life Stages`, ",")))]
unique(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output$ReachName == reach_test),]$Life_Stage)[order(unique(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output$ReachName == reach_test),]$Life_Stage))]
# ------------- Output for WebMap ------------------
# ------- change "Habitat_Attribute" name to "Limiting_Factor"
colnames(Reach_Habitat_Attribute_Life_Stage_Restoration_Output)[colnames(Reach_Habitat_Attribute_Life_Stage_Restoration_Output) == "Habitat_Attribute"] <- "Limiting_Factor"
output_path_x =  paste(output_path,'Reach_Habitat_Attribute_Life_Stage_Restoration_Output.xlsx', sep="")
write_xlsx(Reach_Habitat_Attribute_Life_Stage_Restoration_Output,output_path_x )
# ------------- Output for WebMap ------------------
colnames(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output)[colnames(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output) == "Habitat_Attribute"] <- "Limiting_Factor"
output_path_x =  paste(output_path,'Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output.xlsx', sep="")
write_xlsx(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output,output_path_x )
dim(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output)
dim(Reach_Habitat_Attribute_Life_Stage_Restoration_Output)
