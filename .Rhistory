Habitat_Quality_Pathway_Restoration_Spring_Chinook = Habitat_Quality_Pathway_Restoration_Spring_Chinook %>%
filter(ReachName   %in%   Confinement_Scores_Restoration$`ReachName`)
Habitat_Quality_Pathway_Restoration_Steelhead = Habitat_Quality_Pathway_Restoration_Steelhead %>%
filter(ReachName   %in%   Confinement_Scores_Restoration$`ReachName`)
if(exclude_bull_trout == "no"){
Habitat_Quality_Pathway_Restoration_Bull_Trout = Habitat_Quality_Pathway_Restoration_Bull_Trout %>%
filter(ReachName   %in%   Confinement_Scores_Restoration$`ReachName`)
}
print(paste("HQ Pathway-RESTORATION Spring Chinook - total reaches after reach confinement filter: ", nrow(Habitat_Quality_Pathway_Restoration_Spring_Chinook), sep=""))
print(paste("HQ Pathway-RESTORATION Steelhead - total reaches after reach confinement filter: ", nrow(Habitat_Quality_Pathway_Restoration_Steelhead), sep=""))
#  ---------------------------------------------------------------------------------
#           Reach Confinement  - PROTECTION
#  ---------------------------------------------------------------------------------
# !!!!!!!!!!!!!!!!!!! need to divide by species
# ------------------------- Confinement criteria --------------------
Reach_Confinement_Criteria_Protection_Reach_Rankings = Protection_Reach_Scoring[which(Protection_Reach_Scoring$Indicator == "Confinement" &
Protection_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
# ----------------------- filter out for Habitat_Quality_Scores reaches with Habitat Quality Score criteria --------------
Confinement_Scores_Protection = Confinement_Scores %>%
filter(Confined_Pct    >=   Reach_Confinement_Criteria_Protection_Reach_Rankings$Category_lower_limit  ) %>%
filter(Confined_Pct    <   Reach_Confinement_Criteria_Protection_Reach_Rankings$Category_upper_limit)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Habitat_Quality_Pathway_Protection = Habitat_Quality_Pathway_Protection %>%
filter(ReachName   %in%   Confinement_Scores_Protection$`ReachName`)
print(paste("HQ Pathway-PROTECTION- total reaches after reach confinement filter: ", nrow(Habitat_Quality_Pathway_Protection), sep=""))
#  ---------------------------------------------------------------------------------
#           Number of Life Stages Filter (Restoration and Protection)
#  ---------------------------------------------------------------------------------
# ----------- generate life stage filter -------------
Life_Stage_Priorities_AU_and_Reach_data_FILTER_Restoration = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "Number_Life_Stage_Presence" &
Restoration_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
Life_Stage_Priorities_AU_and_Reach_data_FILTER_Protection = Protection_Reach_Scoring[which(Protection_Reach_Scoring$Indicator == "Number_Life_Stage_Presence" &
Protection_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
# -------------------- add additional column for this particular species reach presence ---------------
Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column_Spring_Chinook"] = Life_Stage_Priorities_AU_and_Reach_data[life_stage_sum_column_Spring_Chinook]
Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column_Steelhead"] = Life_Stage_Priorities_AU_and_Reach_data[life_stage_sum_column_Steelhead]
if(exclude_bull_trout == "no"){
Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column_Bull_Trout"] = Life_Stage_Priorities_AU_and_Reach_data[life_stage_sum_column_Bull_Trout]
}
# ----------------------- filter out for Habitat_Quality_Scores reaches with Habitat Quality Score criteria --------------
x = which(  Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column_Spring_Chinook"]   >=   Life_Stage_Priorities_AU_and_Reach_data_FILTER_Restoration$Category_lower_limit  |
Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column_Steelhead"]   >=   Life_Stage_Priorities_AU_and_Reach_data_FILTER_Restoration$Category_lower_limit   )
Life_Stage_Priorities_AU_and_Reach_data_FILTERED_Restoration = Life_Stage_Priorities_AU_and_Reach_data[x,]
if(exclude_bull_trout == "no"){
x = which(  Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column_Bull_Trout"]   >=   Life_Stage_Priorities_AU_and_Reach_data_FILTER_Restoration$Category_lower_limit  )
Life_Stage_Priorities_AU_and_Reach_data_FILTERED_Restoration = Life_Stage_Priorities_AU_and_Reach_data[x,]
}
# -- !!!!!!!!!!!!!! need to get all Species in protection
Life_Stage_Priorities_AU_and_Reach_data_FILTERED_Protection = Life_Stage_Priorities_AU_and_Reach_data %>%
filter(Life_Stage_Sum_Column   >=   Life_Stage_Priorities_AU_and_Reach_data_FILTER_Protection$Category_lower_limit)
# ------------------------ identify reaches that pass through the RESTORATION filter ----------
Habitat_Quality_Pathway_Restoration_Spring_Chinook = Habitat_Quality_Pathway_Restoration_Spring_Chinook %>%
filter(ReachName   %in%   Life_Stage_Priorities_AU_and_Reach_data_FILTERED_Restoration$`ReachName`)
Habitat_Quality_Pathway_Restoration_Steelhead = Habitat_Quality_Pathway_Restoration_Steelhead %>%
filter(ReachName   %in%   Life_Stage_Priorities_AU_and_Reach_data_FILTERED_Restoration$`ReachName`)
if(exclude_bull_trout == "no"){
Habitat_Quality_Pathway_Restoration_Bull_Trout = Habitat_Quality_Pathway_Restoration_Bull_Trout %>%
filter(ReachName   %in%   Life_Stage_Priorities_AU_and_Reach_data_FILTERED_Restoration$`ReachName`)
}
# ------------------------ identify reaches that pass through the PROTECTION filter ----------
Habitat_Quality_Pathway_Protection = Habitat_Quality_Pathway_Protection %>%
filter(ReachName   %in%   Life_Stage_Priorities_AU_and_Reach_data_FILTERED_Protection$`ReachName`)
print(paste("HQ Pathway-RESTORATION Spring Chinook - total reaches after life stages number filter: ", nrow(Habitat_Quality_Pathway_Restoration_Spring_Chinook), sep=""))
print(paste("HQ Pathway-RESTORATION Steelhead - total reaches after life stages number filter: ", nrow(Habitat_Quality_Pathway_Restoration_Steelhead), sep=""))
print(paste("HQ Pathway-PROTECTION - total reaches after life stages number filter: ", nrow(Habitat_Quality_Pathway_Protection), sep=""))
# -------------------------- COMBINE across the species -----------------------------
Habitat_Quality_Pathway_Restoration = Habitat_Quality_Pathway_Restoration_Spring_Chinook
# -------- reaches in Steelhead (that are not in Spring Chinook) -------
reaches_additional_Steelhead = setdiff(Habitat_Quality_Pathway_Restoration_Steelhead$ReachName,
Habitat_Quality_Pathway_Restoration_Spring_Chinook$ReachName)
x = Habitat_Quality_Pathway_Restoration_Steelhead$ReachName %in% reaches_additional_Steelhead
Habitat_Quality_Pathway_Restoration_Steelhead_X = Habitat_Quality_Pathway_Restoration_Steelhead[x,]
# ----------- combine ---------------
Habitat_Quality_Pathway_Restoration = rbind(Habitat_Quality_Pathway_Restoration,Habitat_Quality_Pathway_Restoration_Steelhead_X )
# --------------- add Bull Trout -----------------
if(exclude_bull_trout == "no"){
# -------- reaches in Bull Trout (that are not in Spring Chinook) -------
reaches_additional_Bull_Trout = setdiff(Habitat_Quality_Pathway_Restoration_Bull_Trout$ReachName,
Habitat_Quality_Pathway_Restoration$ReachName)
x = Habitat_Quality_Pathway_Restoration_Steelhead$ReachName %in% reaches_additional_Bull_Trout
Habitat_Quality_Pathway_Restoration_Bull_Trout_X = Habitat_Quality_Pathway_Restoration_Bull_Trout[x,]
# ----------- combine ---------------
Habitat_Quality_Pathway_Restoration = rbind(Habitat_Quality_Pathway_Restoration,Habitat_Quality_Pathway_Restoration_Bull_Trout_X )
}
dim(v)
dim(Habitat_Quality_Pathway_Restoration)
# -----------------------------------------------------------------------------------
#        Initiate Data Frame
# -----------------------------------------------------------------------------------
Restoration_Scores_Output = Habitat_Quality_Pathway_Restoration[,c("ReachName","Basin","Assessment.Unit")]
# -----------------------------------------------------------------------------------
#
#         Confinement Scores
#
# -----------------------------------------------------------------------------------
# ------------------ add Confinement Percent ----------
Restoration_Scores_Output = left_join(Restoration_Scores_Output,
Confinement_Scores_Restoration[,c("ReachName","Unconfined_Pct")], by = c("ReachName" = "ReachName"))
# ------------------ indicator ratings  -----------------------
confinement_metric_data = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "Confinement" &
Restoration_Reach_Scoring$Category_Stage == "indicator"),c("Category_lower_limit","Category_upper_limit", "Score")]
# ----------------- generate score --------------------
Restoration_Scores_Output = Restoration_Scores_Output  %>%
mutate(Confinement_SCORES = ifelse(Unconfined_Pct  >= confinement_metric_data$Category_lower_limit[1] &
Unconfined_Pct  <= confinement_metric_data$Category_upper_limit[1] , confinement_metric_data$Score[1],
ifelse(Unconfined_Pct  > confinement_metric_data$Category_lower_limit[2] &
Unconfined_Pct  <= confinement_metric_data$Category_upper_limit[2] , confinement_metric_data$Score[2],
ifelse(Unconfined_Pct  >= confinement_metric_data$Category_lower_limit[3] &
Unconfined_Pct  <= confinement_metric_data$Category_upper_limit[3] , confinement_metric_data$Score[3],
NA))))
# -----------------------------------------------------------------------------------
#
#         Habitat Quality Scores
#
# -----------------------------------------------------------------------------------
# ------------------ add Habitat Quality Scores ----------
Habitat_Quality_Pathway_Restoration$Habitat_Quality_Percent = Habitat_Quality_Pathway_Restoration$HQ_Pct*100  # need to establish as percent
Restoration_Scores_Output = left_join(Restoration_Scores_Output,
Habitat_Quality_Pathway_Restoration[,c("ReachName","Habitat_Quality_Percent")], by = c("ReachName" = "ReachName"))
# ------------------ indicator ratings  -----------------------
habitat_quality_metric_data = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "Habitat_Quality" &
Restoration_Reach_Scoring$Category_Stage == "indicator"),c("Category_lower_limit","Category_upper_limit", "Score")]
# ----------------- generate score --------------------
Restoration_Scores_Output = Restoration_Scores_Output  %>%
mutate(Habitat_Quality_SCORES = ifelse(Habitat_Quality_Percent  >= habitat_quality_metric_data$Category_lower_limit[1] &
Habitat_Quality_Percent  <= habitat_quality_metric_data$Category_upper_limit[1] , habitat_quality_metric_data$Score[1],
ifelse(Habitat_Quality_Percent  > habitat_quality_metric_data$Category_lower_limit[2] &
Habitat_Quality_Percent  <= habitat_quality_metric_data$Category_upper_limit[2] , habitat_quality_metric_data$Score[2],
ifelse(Habitat_Quality_Percent  >= habitat_quality_metric_data$Category_lower_limit[3] &
Habitat_Quality_Percent  <= habitat_quality_metric_data$Category_upper_limit[3] , habitat_quality_metric_data$Score[3],
NA))))
# -----------------------------------------------------------------------------------
#
#         Limiting Factors for High Priority Life Stages
#
# -----------------------------------------------------------------------------------
# ------------------ add Habitat Quality Scores ----------
Limiting_Factor_Output = FUNCTION_calc_Limiting_Factor_Score(Habitat_Quality_Pathway_Restoration)
Restoration_Scores_Output = left_join(Restoration_Scores_Output,
Limiting_Factor_Output, by = c("ReachName" = "ReachName"))
# ------------------ indicator ratings  -----------------------
limiting_factor_metric_data = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "Limiting_Factor_for_High_Priority_Life_Stages" &
Restoration_Reach_Scoring$Category_Stage == "indicator"),c("Category_lower_limit","Category_upper_limit", "Score")]
# ----------------- generate score --------------------
Restoration_Scores_Output = Restoration_Scores_Output  %>%
mutate(Limiting_Factor_SCORES = ifelse(Limiting_Factor_Score_Percent  >= limiting_factor_metric_data$Category_lower_limit[1] &
Limiting_Factor_Score_Percent  <= limiting_factor_metric_data$Category_upper_limit[1] , limiting_factor_metric_data$Score[1],
ifelse(Limiting_Factor_Score_Percent  > limiting_factor_metric_data$Category_lower_limit[2] &
Limiting_Factor_Score_Percent  <= limiting_factor_metric_data$Category_upper_limit[2] , limiting_factor_metric_data$Score[2],
ifelse(Limiting_Factor_Score_Percent  >= limiting_factor_metric_data$Category_lower_limit[3] &
Limiting_Factor_Score_Percent  <= limiting_factor_metric_data$Category_upper_limit[3] , limiting_factor_metric_data$Score[3],
NA))))
# ----------- set NAs to 1 -----------
x = which(is.na(Restoration_Scores_Output$Limiting_Factor_SCORES ))
Restoration_Scores_Output$Limiting_Factor_SCORES[x] = 1
# -----------------------------------------------------------------------------------
#
#         Number of Life Stages Present
#
# -----------------------------------------------------------------------------------
# ------------------------ get the maximum life stage sum number across species -------------------
if(exclude_bull_trout == "no"){
Life_Stage_Priorities_AU_and_Reach_data$Life_Stage_Sum_Max <-apply(X=Life_Stage_Priorities_AU_and_Reach_data[,c("Life_Stage_Sum_Column_Spring_Chinook","Life_Stage_Sum_Column_Steelhead", "Life_Stage_Sum_Column_Bull_Trout")], MARGIN=1, FUN=max)
}else{
Life_Stage_Priorities_AU_and_Reach_data$Life_Stage_Sum_Max <-apply(X=Life_Stage_Priorities_AU_and_Reach_data[,c("Life_Stage_Sum_Column_Spring_Chinook","Life_Stage_Sum_Column_Steelhead")], MARGIN=1, FUN=max)
}
# ------------------ add Life Stage Sum ----------
Restoration_Scores_Output = left_join(Restoration_Scores_Output,
Life_Stage_Priorities_AU_and_Reach_data[,c("ReachName", "Life_Stage_Sum_Max")], by = c("ReachName" = "ReachName"))
# ------- update Life Stage Column Names --------
colnames(Restoration_Scores_Output)[length(colnames(Restoration_Scores_Output))] = "Life_Stage_Sum"
# ------------------ indicator ratings  -----------------------
life_stage_metric_data = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "Number_Life_Stage_Presence" &
Restoration_Reach_Scoring$Category_Stage == "indicator"),c("Category_lower_limit","Category_upper_limit", "Score")]
# ----------------- generate score --------------------
Restoration_Scores_Output = Restoration_Scores_Output  %>%
mutate(Life_Stage_Sum_SCORES = ifelse(Life_Stage_Sum  >= life_stage_metric_data$Category_lower_limit[1] &
Life_Stage_Sum  <= life_stage_metric_data$Category_upper_limit[1] , life_stage_metric_data$Score[1],
ifelse(Life_Stage_Sum  > life_stage_metric_data$Category_lower_limit[2] &
Life_Stage_Sum  <= life_stage_metric_data$Category_upper_limit[2] , life_stage_metric_data$Score[2],
NA)))
}else{
print(paste("--- No Restoration Reaches generated for species: ", species, sep=""))
}
# -------------------------------------------------------
#     Add Fish Barrier Columns (will fill out below)
# -------------------------------------------------------
Restoration_Scores_Output$Fish_Barrier_Filter = 0
# -------------------------------------------------------
#
#     Calculate Scores and Sort into Tiers
#
# -------------------------------------------------------
# --------------------- Put Restoration and Protection into a list --------------
Restoration_Scores_Output$Score_Total = rowSums(Restoration_Scores_Output[, c("Confinement_SCORES", "Habitat_Quality_SCORES",
"Limiting_Factor_SCORES", "Life_Stage_Sum_SCORES")])
# ----------------------------------------------
#    Rank them (across all reaches)
# ----------------------------------------------
Restoration_Scores_Output$Rank_Total = rank( -Restoration_Scores_Output$Score_Total, ties.method= "min")
# ----------------------------------------------
#    Rank them (within AUs)
# ----------------------------------------------
# ------------ unique AUs -------
unique_AUs = unique(Restoration_Scores_Output$Assessment.Unit)
# ------------------ start column ----------------
Restoration_Scores_Output$Rank_AUs = NA
for(AUx in unique_AUs){
# --------- get the rows for all reaches in this AU ---------------
x = which(Restoration_Scores_Output$Assessment.Unit == AUx)
# ----------- Rank the Reaches within the AU -----------
ranks_initial = rank( -Restoration_Scores_Output$Score_Total[x], ties.method= "min")
Restoration_Scores_Output$Rank_AUs[x] = as.numeric(factor(rank(sort(ranks_initial))))[ranks_initial]
}
# -------------------------------------------------------
#
#     Add Fish Barriers
#
# -------------------------------------------------------
# ----------------- identify if reaches in fish barrier overlap ---------
reaches_barrier_intersection = intersect(Restoration_Scores_Output$ReachName, Barriers_Pathways_Data$ReachName)
reaches_barrier_different = setdiff( Barriers_Pathways_Data$ReachName, Restoration_Scores_Output$ReachName)
if( length(reaches_barrier_intersection)>0 ){
for(reach_x in reaches_barrier_intersection){
# ------------ identify reach ------------
x = which(Restoration_Scores_Output$ReachName == reach_x)
# -------------- mark filter as 1 ------------
Restoration_Scores_Output$Fish_Barrier_Filter[x] = 1
# -------------- make AU Rank as 1 ------------
Restoration_Scores_Output$Rank_AUs[x] = 1
}
}
for(reach_x in reaches_barrier_different){
# ---------------- create new row ----------------
Restoration_Scores_Output[nrow(Restoration_Scores_Output)+1,] <- NA
# ------------------- add reach name ---------------
Restoration_Scores_Output$ReachName[nrow(Restoration_Scores_Output)] = reach_x
# ------- add Basin and Assessment Unit ------------
reach_info_x = Reach_Information_data[ which(Reach_Information_data$ReachName == reach_x),  ]
Restoration_Scores_Output$Basin[nrow(Restoration_Scores_Output)] = reach_info_x$Basin
Restoration_Scores_Output$Assessment.Unit[nrow(Restoration_Scores_Output)] = reach_info_x$Assessment.Unit
# -------------- mark filter as 1 ------------
Restoration_Scores_Output$Fish_Barrier_Filter[nrow(Restoration_Scores_Output)] = 1
# -------------- make AU Rank as 1 ------------
Restoration_Scores_Output$Rank_AUs[nrow(Restoration_Scores_Output)] = 1
}
dim(Restoration_Scores_Output)
# ----- but in export section -----------
output_path_x =  paste(output_path,'Reach_Rankings_Restoration.xlsx', sep="")
# ----- but in export section -----------
output_path_x =  paste(output_path,'Reach_Rankings_Restoration.xlsx', sep="")
write_xlsx(Restoration_Scores_Output,output_path_x )
mapview(reaches_PROTECTOIN_data, lwd=4, legend = mapviewGetOption("legend"),
color= 'blue', map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
attribute_1 = "HQ_Score_Protection"
mapview(reaches_HQ_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"),
color= color_palette_x, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
View(AU_Ranks_data)
View(Life_Stage_Priorities_AU_and_Reach_data)
Okanogan_Crosswalk =  read_excel(  paste(data_path,'Okanogan_AU_Reach_Crosswalk.xlsx', sep="")  )
dim(Okanogan_Crosswalk)
paste(data_path,'Okanogan_AU_Reach_Crosswalk.xlsx', sep="")
Okanogan_Crosswalk =  read_excel(  paste(data_path,'Okanogan_AU_Reach_Crosswalk.xlsx', sep="")  )
library(tidyverse)
library(xlsx)
library(writexl)
library(readxl)
basins_to_include = c("Methow",  "Entiat","Wenatchee")  # basins to include insimulation
exclude_bull_trout = "yes"  # if "yes" -> remove bull trout for WebMap applications
output_Habitat_Quality_and_Habitat_Attribute_Scores = "no"  # enter "yes" or "no" if you want this output
time1 <- proc.time()[3] # for timing the total time to run the tool
# --------------- directory of scripts -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
data_path = 'Data/'
# ----------- directory for output ---------
output_path = 'Output/'
# ---------------------------------------------------------------------------
#
#     Read in Data
#
# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
Okanogan_Crosswalk =  read_excel(  paste(data_path,'Okanogan_AU_Reach_Crosswalk.xlsx', sep="")  )
View(Okanogan_Crosswalk)
View(habitat_raw_data)
help(FindReplace)
new_and_old_data_frame = Okanogan_Crosswalk[,c("ReachName_Old", "ReachName_New")]
i = 1
x_replace = which(input_column == new_and_old_data_frame[i,1])
input_column = habitat_raw_data$ReachName
x_replace = which(input_column == new_and_old_data_frame[i,1])
x_replace
input_column[1:5]
new_and_old_data_frame[i,1]
new_and_old_data_frame[i,2]
output_path_x = paste(data_path,'Habitat_Data_Raw.xlsx', sep="")
#updated_column_old = Okanogan_Crosswalk$ReachName_Old
#update_column_new = Okanogan_Crosswalk$ReachName_New
input_data_frame = habitat_raw_data
input_column = habitat_raw_data$ReachName
input_column_name = "ReachName"
new_and_old_data_frame = Okanogan_Crosswalk[,c("ReachName_Old", "ReachName_New")]
output_path_x = paste(data_path,'Habitat_Data_Raw.xlsx', sep="")
input_column[1:20]
# --------------- update names in column -----------------
for(i in 1:nrow(new_and_old_data_frame)){
x_replace = which(input_column == new_and_old_data_frame[i,1])
input_column[x_replace] = new_and_old_data_frame[i,2]
}
nrow(new_and_old_data_frame)
i
i
x_replace = which(input_column == new_and_old_data_frame[i,1])
dim(new_and_old_data_frame)
new_and_old_data_frame[i,1]
i
dim(input_column)
length(input_column)
input_column[1:20]
class(input_column)
dim(habitat_raw_data)
class(habitat_raw_data)
input_column = habitat_raw_data[,"ReachName"]
class(input_column)
# --------------- update names in column -----------------
for(i in 1:nrow(new_and_old_data_frame)){
x_replace = which(input_column == new_and_old_data_frame[i,1])
input_column[x_replace] = new_and_old_data_frame[i,2]
}
i
x_replace = which(input_column == new_and_old_data_frame[i,1])
x_replace = which(input_column$ReachName == new_and_old_data_frame[i,1])
x_replace
# --------------- update names in column -----------------
for(i in 1:nrow(new_and_old_data_frame)){
x_replace = which(input_column$ReachName == new_and_old_data_frame[i,1])
input_column[x_replace] = new_and_old_data_frame[i,2]
}
input_column = as.data.frame(habitat_raw_data[,"ReachName"])
class(input_column)
dim9input_column
dim(input_column)
x_replace = which(input_column == new_and_old_data_frame[i,1])
x_replace = which(input_column[,1] == new_and_old_data_frame[i,1])
# --------------- update names in column -----------------
for(i in 1:nrow(new_and_old_data_frame)){
x_replace = which(input_column[,1] == new_and_old_data_frame[i,1])
input_column[x_replace] = new_and_old_data_frame[i,2]
}
input_column = as.data.frame(habitat_raw_data[,"ReachName"])[,1]
# --------------- update names in column -----------------
for(i in 1:nrow(new_and_old_data_frame)){
x_replace = which(input_column[,1] == new_and_old_data_frame[i,1])
input_column[x_replace] = new_and_old_data_frame[i,2]
}
input_column = as.data.frame(habitat_raw_data[,"ReachName"])
input_column = input_column[,1]
# --------------- update names in column -----------------
for(i in 1:nrow(new_and_old_data_frame)){
x_replace = which(input_column[,1] == new_and_old_data_frame[i,1])
input_column[x_replace] = new_and_old_data_frame[i,2]
}
i
# --------------- update names in column -----------------
for(i in 1:nrow(new_and_old_data_frame)){
x_replace = which(input_column == new_and_old_data_frame[i,1])
input_column[x_replace] = new_and_old_data_frame[i,2]
}
i
class(input_column)
input_column = as.data.frame(habitat_raw_data[,"ReachName"])
# --------------- update names in column -----------------
for(i in 1:nrow(new_and_old_data_frame)){
x_replace = which(input_column[,1] == new_and_old_data_frame[i,1])
input_column[x_replace] = new_and_old_data_frame[i,2]
}
# ------------------ update column in data frame ------------
input_data_frame[,input_column_name] = input_column
dim(input_data_frame)
View(input_data_frame)
# --------------- update names in column -----------------
for(i in 1:nrow(new_and_old_data_frame)){
x_replace = which(input_column[,1] == new_and_old_data_frame[i,1])
input_column[x_replace,1] = new_and_old_data_frame[i,2]
}
input_column[1:20]
input_column[1:20,1]
#updated_column_old = Okanogan_Crosswalk$ReachName_Old
#update_column_new = Okanogan_Crosswalk$ReachName_New
input_data_frame = habitat_raw_data
input_column = as.data.frame(habitat_raw_data[,"ReachName"])
#input_column = input_column[,1]
input_column_name = "ReachName"
new_and_old_data_frame = Okanogan_Crosswalk[,c("ReachName_Old", "ReachName_New")]
output_path_x = paste(data_path,'Habitat_Data_Raw.xlsx', sep="")
# --------------- update names in column -----------------
for(i in 1:nrow(new_and_old_data_frame)){
x_replace = which(input_column[,1] == new_and_old_data_frame[i,1])
input_column[x_replace,1] = new_and_old_data_frame[i,2]
}
input_column[1:20,1]
# ------------------ update column in data frame ------------
input_data_frame[,input_column_name] = input_column
View(input_data_frame)
View(Okanogan_Crosswalk)
View(input_data_frame)
View(input_column)
new_and_old_data_frameiew()
new_and_old_data_frameiew
View(new_and_old_data_frame)
#updated_column_old = Okanogan_Crosswalk$ReachName_Old
#update_column_new = Okanogan_Crosswalk$ReachName_New
input_data_frame = habitat_raw_data
input_column = as.data.frame(habitat_raw_data[,"ReachName"])
#input_column = input_column[,1]
input_column_name = "ReachName"
new_and_old_data_frame = Okanogan_Crosswalk[,c("ReachName_Old", "ReachName_New")]
output_path_x = paste(data_path,'Habitat_Data_Raw.xlsx', sep="")
i = 4
x_replace = which(input_column[,1] == new_and_old_data_frame[i,1])
x_replace
new_and_old_data_frame[i,1]
input_column[,1]
input_column[50:150,1]
input_column[150:250,1]
input_column[250:300,1]
new_and_old_data_frame[i,1]
input_column[250:300,1]
new_and_old_data_frame[i,1]
class(new_and_old_data_frame[i,1])
as.string(new_and_old_data_frame[i,1])
as.character(new_and_old_data_frame[i,1])
x_replace = which(input_column[,1] == as.character(new_and_old_data_frame[i,1]) )
x_replace
#updated_column_old = Okanogan_Crosswalk$ReachName_Old
#update_column_new = Okanogan_Crosswalk$ReachName_New
input_data_frame = habitat_raw_data
input_column = as.data.frame(habitat_raw_data[,"ReachName"])
#input_column = input_column[,1]
input_column_name = "ReachName"
new_and_old_data_frame = Okanogan_Crosswalk[,c("ReachName_Old", "ReachName_New")]
output_path_x = paste(data_path,'Habitat_Data_Raw.xlsx', sep="")
# --------------- update names in column -----------------
for(i in 1:nrow(new_and_old_data_frame)){
x_replace = which(input_column[,1] == as.character(new_and_old_data_frame[i,1]) )
input_column[x_replace,1] = new_and_old_data_frame[i,2]
}
View(input_column)
#updated_column_old = Okanogan_Crosswalk$ReachName_Old
#update_column_new = Okanogan_Crosswalk$ReachName_New
input_data_frame = habitat_raw_data
input_column = as.data.frame(habitat_raw_data[,"ReachName"])
#input_column = input_column[,1]
input_column_name = "ReachName"
new_and_old_data_frame = Okanogan_Crosswalk[,c("ReachName_Old", "ReachName_New")]
output_path_x = paste(data_path,'Habitat_Data_Raw.xlsx', sep="")
# --------------- update names in column -----------------
for(i in 1:nrow(new_and_old_data_frame)){
x_replace = which(input_column[,1] == as.character(new_and_old_data_frame[i,1]) )
input_column[x_replace,1] = new_and_old_data_frame[i,2]
}
# ------------------ update column in data frame ------------
input_data_frame[,input_column_name] = input_column
View(input_data_frame)
# ----------------- write excel ------------
write_xlsx(input_data_frame,output_path_x )
colnames(Channel_Unit_Raw)
# --------------- Channel_Unit_Raw ---------
FUNCTION_read_in_and_update_file_reach_names(Channel_Unit_Raw, as.data.frame(Channel_Unit_Raw[,"ReachName"]), "ReachName",
Okanogan_Crosswalk[,c("ReachName_Old", "ReachName_New")],
paste(data_path,'Channel_Unit_Raw.xlsx', sep="")  )
# -------------- the Function -----------------
FUNCTION_read_in_and_update_file_reach_names = function(input_data_frame, input_column, input_column_name, new_and_old_data_frame, output_path_x){
# --------------- update names in column -----------------
for(i in 1:nrow(new_and_old_data_frame)){
x_replace = which(input_column[,1] == as.character(new_and_old_data_frame[i,1]) )
input_column[x_replace,1] = new_and_old_data_frame[i,2]
}
# ------------------ update column in data frame ------------
input_data_frame[,input_column_name] = input_column
# ----------------- write excel ------------
write_xlsx(input_data_frame,output_path_x )
}
# --------------- Channel_Unit_Raw ---------
FUNCTION_read_in_and_update_file_reach_names(Channel_Unit_Raw, as.data.frame(Channel_Unit_Raw[,"ReachName"]), "ReachName",
Okanogan_Crosswalk[,c("ReachName_Old", "ReachName_New")],
paste(data_path,'Channel_Unit_Raw.xlsx', sep="")  )
View(Confinement_Scores)
colnames(Confinement_Scores)
# ----------------------- Confinement_Scores ----------------------
FUNCTION_read_in_and_update_file_reach_names(Confinement_Scores, as.data.frame(Confinement_Scores[,"ReachName"]), "ReachName",
Okanogan_Crosswalk[,c("ReachName_Old", "ReachName_New")],
paste(data_path,'Confinement_Scores.xlsx', sep="")  )
dim(Habitat_Attribute_Notes_and_Professional_Judgement)
colnames(Habitat_Attribute_Notes_and_Professional_Judgement)
dim(LifeStagePriorities_AUandReach)
colnames(Life_Stage_Priorities_AU_and_Reach_data)
# ----------------------- Life_Stage_Priorities_AU_and_Reach_data ----------------------
FUNCTION_read_in_and_update_file_reach_names(Life_Stage_Priorities_AU_and_Reach_data,
as.data.frame(Life_Stage_Priorities_AU_and_Reach_data[,"ReachName"]), "ReachName",
Okanogan_Crosswalk[,c("ReachName_Old", "ReachName_New")],
paste(data_path,'LifeStagePriorities_AUandReach.xlsx', sep="")  )
dim(Reach_Information_ALL_Actions)
dim(Reach_Information)
colnames(Reach_Information_data)
# ------------------- Reach_Information_data ------------------
FUNCTION_read_in_and_update_file_reach_names(Reach_Information_data,
as.data.frame(Reach_Information_data[,"ReachName"]), "ReachName",
Okanogan_Crosswalk[,c("ReachName_Old", "ReachName_New")],
paste(data_path,'ReachInfo.xlsx', sep="")  )
