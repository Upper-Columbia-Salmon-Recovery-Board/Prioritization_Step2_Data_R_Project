# ---------------------------------------------------------------------------
#      Criteria for Filters
# ---------------------------------------------------------------------------
print("----------------------------------------- ASSIGN CRITERIA --------------------------------------------")
source(paste(script_path, 'Criteria_Script.R', sep=""))
# ---------------------------------------------------------------------------
#      Criteria for Filters
# ---------------------------------------------------------------------------
print("----------------------------------------- ASSIGN CRITERIA --------------------------------------------")
source(paste(script_path, 'Criteria_Script.R', sep=""))
print("----------------------------------------- Prepare Okanogan EDT prep --------------------------------------------")
source(paste(script_path, 'Okanogan_EDT_data_input_prep.R', sep=""))
# ---------------------------------------------------------------------------
#   LIMITING FACTOR PATHWAY: Generate Habitat Attribute Table (used in Limiting Factor Pathway)
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITAT ATTRIBUTE SCORES (for Limtiting Factor Pathway) --------------------------------------------")
# some of HQ filters are used in Habitat Attribute generation
source( paste(script_path, 'FUNCTIONS_for_Habitat_Quality_Filters.R', sep="")  )
# script to generate habitat attribute scores
source(paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep="") )
print("----------------------------------------- GENERATE HABITAT QUALITY SCORES --------------------------------------------")
source( paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep="") )
print("----------------------------------------- GENERATE OKANOGAN HABITAT QUALITY AND LIMTING FACTOR SCORES --------------------------------------------")
# Okanogan: generate Habitat Attribute Scores for Habitat Quality (just Level 2) and Limiting Factor (Level 3 filter 1s and 3s to generate Level 2s)
# NOTE: Habitat_Quality_Scorse_Okanogan and Habiat_Attribute_Scores_Okanogan are generated by this script
source( paste(script_path, 'FUNCTIONS_Okanogan_EDT_Habitat_Attribute_Habitat_Quality_Scripts.R', sep="") )
# ---------------------------------------------------------------------------
#   HABITAT QUALITY PATHWAY: Apply Habitat Quality Pathway Filters
# ---------------------------------------------------------------------------
# NOTE: the function below runs HQ Pathway for Restoration and Protection
print("----------------------------------------- APPLY HABITAT QUALITY FILTERS FOR PRIORITIZATION --------------------------------------------")
# ------- Habitat Quality Pathway Filter for the Methow-Entiat-Wenatchee ---------------
source(paste(script_path, 'Habitat_Quality_Pathway_Filter.R', sep=""))  # for Methow-Wenatchee-Entiat AND Okanogan functions
# ------- Habitat Quality Pathway Filter for the Okanogan ---------------
source(paste(script_path, 'Habitat_Quality_Pathway_Filter_OKANOGAN.R', sep=""))  # for Methow-Wenatchee-Entiat AND Okanogan functions
# ----- set names of Habitat Quality Scores to sum ------
habitat_quality_scores_colnames_for_sum = c("Stability_Mean" , "CoarseSubstrate_score" ,"Cover-Wood_score", "Flow-SummerBaseFlow_score",
"Off-Channel-Floodplain_score", "Off-Channel-Side-Channels_score","PoolQuantity&Quality_score",
"Riparian_Mean","Temperature-Rearing_score")
# --------------- generate for all basins except Okanogan ---------------
Habitat_Quality_Pathway_Spring_Chinook = Generate_Habitat_Quality_Output_Table("Spring Chinook", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Steelhead = Generate_Habitat_Quality_Output_Table("Steelhead", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Bull_Trout = Generate_Habitat_Quality_Output_Table("Bull Trout", basins_to_include, habitat_quality_scores_colnames_for_sum )
# --------------- generate for Okanogan ---------------
colnames_HQ_output = colnames(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
colnames_HQ_habitat_attributes = colnames_HQ_output[7:19]
#  to test
test_x = TRUE
if(test_x){
species = "Steelhead"
colnames_HQ_output = colnames(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
}
# ------------------------------------------------------------------------------
#       Establish species-specific variable names
# ------------------------------------------------------------------------------
print(paste("---------------------------------- START HQ Pathway FOR: ",species, sep=""))
if(species == "Steelhead"){
# ---------------- species reach ---------------
species_reach = 'Steelhead.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration = 'AU Restoration Rank'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection = 'AU Protection Rank'
# --------------- Life stage Sum column name ----------
life_stage_sum_column = 'SH_Life_Stage_Sum'
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Steelhead_Habitat_Quality_RESTORATION_Okanogan" , ".xlsx", sep="") )
protection_output_name = paste(paste("Steelhead_Habitat_Quality_PROTECTION_Okanogan" ,".xlsx", sep=""))
}else{
print('Incorrectly entered species name - re-type species name')
}
#  ---------------------------------------------------------------------------------
#           Create AU Ranks data frame
#  ---------------------------------------------------------------------------------
Species_AU_Ranks_data = AU_Ranks_Okanogan
#  ---------------------------------------------------------------------------------
#           Establish Reach Information Data Frame Just for this Output
#  ---------------------------------------------------------------------------------
# -------- Reach Information data frame for this species -----------
Species_Reach_Information_data = Reach_Information_data
# --------------------- Filter by Okanogan -------------
Species_Reach_Information_data = Species_Reach_Information_data[which(Species_Reach_Information_data$Basin == "Okanogan"),]
# --------------- combined all data -------------
Output_All_Combined  = Species_Reach_Information_data[,c("ReachName","Basin","Assessment.Unit")]
print(paste("Total Initial Reaches (HQ Pathway): ", nrow(Species_Reach_Information_data), sep=""))
#  ---------------------------------------------------------------------------------
#            Filter out to only have Species-specific reaches
#  ---------------------------------------------------------------------------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_Reach_Information_data$Species_Reaches = Species_Reach_Information_data[species_reach]
Species_Reach_Information_data_all = Species_Reach_Information_data
# ----------------------- filter out for only reaches with this species --------------
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
# ----------- add to combined ----------
Species_Reach_Information_data_merge = Species_Reach_Information_data_all[,c("ReachName", species_reach)]
Output_All_Combined = merge(Output_All_Combined, Species_Reach_Information_data_merge, by="ReachName", all.x=TRUE)
print(paste("Total reaches after species-reach filter: ", nrow(Species_Reach_Information_data), sep=""))
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data["Species_AU_Ranks"] = Species_AU_Ranks_data[AU_rank_name_restoration]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_restoration = Species_AU_Ranks_data %>%
filter(Species_AU_Ranks    %in%   AU_Rank)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Species_Reach_Information_data_restoration = Species_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_restoration$`EDT AU`)
# ----------- add to combined ----------
AU_ranks_for_combo = Species_AU_Ranks_data[,c("EDT AU","AU Restoration Rank")]
colnames(AU_ranks_for_combo)[1] = "Assessment.Unit"
Output_All_Combined = merge(Output_All_Combined, AU_ranks_for_combo, by="Assessment.Unit", all.x=TRUE)
print(paste("Restoration - total AU rank filter: ", nrow(Species_Reach_Information_data_restoration), sep=""))
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data["Species_AU_Ranks"] = Species_AU_Ranks_data[AU_rank_name_protection]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_protection = Species_AU_Ranks_data %>%
filter(Species_AU_Ranks    %in%   AU_Rank)
# ------------------------ identify after AUs that pass this filter in reach-based table ----------
Species_Reach_Information_data_protection = Species_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_protection$`EDT AU`)
# ----------- add to combined ----------
AU_ranks_for_combo = Species_AU_Ranks_data[,c("EDT AU","AU Protection Rank")]
colnames(AU_ranks_for_combo)[1] = "Assessment.Unit"
Output_All_Combined = merge(Output_All_Combined, AU_ranks_for_combo, by="Assessment.Unit", all.x=TRUE)
print(paste("Protection - total after Protection AU rank filter: ", nrow(Species_Reach_Information_data_protection), sep=""))
# ----------------------- filter out for Habitat_Quality_Scores reaches with Habitat Quality Score criteria --------------
Confinement_Scores_Restoration = Confinement_Scores %>%
filter(Score   ==   Reach_Confinement_SCORE_Criteria)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Species_Reach_Information_data_restoration = Species_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Confinement_Scores_Restoration$`ReachName`)
# ----------- add to combined ----------
Confinement_Scores_for_combo = Confinement_Scores[,c("ReachName","Score")]
colnames(Confinement_Scores_for_combo) = c("ReachName","Confinement_Score")
Output_All_Combined = merge(Output_All_Combined, Confinement_Scores_for_combo, by="ReachName", all.x=TRUE)
print(paste("HQ Pathway-RESTORATION - total reaches after reach confinement filter: ", nrow(Species_Reach_Information_data_restoration), sep=""))
# -------------------- add additional column for this particular species reach presence ---------------
Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column"] = Life_Stage_Priorities_AU_and_Reach_data[life_stage_sum_column]
# ----------------------- filter out for Habitat_Quality_Scores reaches with Habitat Quality Score criteria --------------
Life_Stage_Priorities_AU_and_Reach_data_FILTERED = Life_Stage_Priorities_AU_and_Reach_data %>%
filter(Life_Stage_Sum_Column   >=   Sum_Life_Stage_Criteria)
# ----------- add to combined ----------
Life_Stage_for_combo = Life_Stage_Priorities_AU_and_Reach_data[,c("ReachName",life_stage_sum_column)]
Output_All_Combined = merge(Output_All_Combined, Life_Stage_for_combo, by="ReachName", all.x=TRUE)
# ------------------------ identify reaches that pass through the RESTORATION filter ----------
Habitat_Quality_Pathway_Restoration = Species_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Life_Stage_Priorities_AU_and_Reach_data_FILTERED$`ReachName`)
# ------------------------ identify reaches that pass through the PROTECTION filter ----------
Habitat_Quality_Pathway_Protection = Species_Reach_Information_data_protection %>%
filter(ReachName   %in%   Life_Stage_Priorities_AU_and_Reach_data_FILTERED$`ReachName`)
print(paste("HQ Pathway-RESTORATION - total reaches after life stages number filter: ", nrow(Habitat_Quality_Pathway_Restoration), sep=""))
print(paste("HQ Pathway-PROTECTION - total reaches after life stages number filter: ", nrow(Habitat_Quality_Pathway_Protection), sep=""))
#  ---------------------------------------------------------------------------------
#            RESTORATION = Filter out for AU-level % Habitat Quality (EDT = "% Template")
#  ---------------------------------------------------------------------------------
# Filter for <80% habitat function using %HabitatQuality Tab
# ------------------- filter out % of Template that is below certain score --------------------
PRCNT_Habitat_Quality_Okanogan_EDT_FILTER_RESTORATION = PRCNT_Habitat_Quality_Okanogan_EDT[which(PRCNT_Habitat_Quality_Okanogan_EDT$HQ_Score <= PRCNT_of_Template_Restoration_Score), ]
# ------------------------ identify reaches that pass through the RESTORATION filter ----------
Habitat_Quality_Pathway_Restoration = Habitat_Quality_Pathway_Restoration %>%
filter(ReachName   %in%   PRCNT_Habitat_Quality_Okanogan_EDT_FILTER_RESTORATION$`ReachName`)
# ----------- add to combined ----------
PRCNT_HQ_merge = PRCNT_Habitat_Quality_Okanogan_EDT[,c("ReachName","HQ_Score")]
Output_All_Combined = merge(Output_All_Combined, PRCNT_HQ_merge, by="ReachName", all.x=TRUE)
print(paste("HQ Pathway-RESTORATION - total reaches after life stages number filter: ", nrow(Habitat_Quality_Pathway_Restoration), sep=""))
#  ---------------------------------------------------------------------------------
#            PROTECTION = Filter out for AU-level % Habitat Quality (EDT = "% Template")
#  ---------------------------------------------------------------------------------
# Filter for <80% habitat function using %HabitatQuality Tab
# ------------------- filter out % of Template that is below certain score --------------------
PRCNT_Habitat_Quality_Okanogan_EDT_FILTER_PROTECTION = PRCNT_Habitat_Quality_Okanogan_EDT[which(PRCNT_Habitat_Quality_Okanogan_EDT$HQ_Score >= PRCNT_of_Template_Protection_Score), ]
# ------------------------ identify reaches that pass through the PROTECTION filter ----------
Habitat_Quality_Pathway_Protection = Habitat_Quality_Pathway_Protection %>%
filter(ReachName   %in%   PRCNT_Habitat_Quality_Okanogan_EDT_FILTER_PROTECTION$`ReachName`)
print(paste("HQ Pathway-PROTECTION - total reaches after life stages number filter: ", nrow(Habitat_Quality_Pathway_Protection), sep=""))
# -------------------------------------------------------
#     Combine ALL data output with Okanogan_Habitat_Quality_Output (HQ table)
# -------------------------------------------------------
Habitat_Quality_Scores_Okanogan_merge = Habitat_Quality_Scores_Okanogan[, -which(names(Habitat_Quality_Scores_Okanogan) %in% c("Assessment.Unit"))]
# ------- IF there are still reaches that got past filters --------
if( nrow(Habitat_Quality_Pathway_Restoration) > 0 ){
# -------------------------------------------------------
#         identify all individual habitat attribute scores at 3 (or lower) and 1
# -------------------------------------------------------
# NOTE: these two columns are added at the very end
# -------------------- Restoration -----------
# --------------- identify habitat attributes at 1 (Unacceptable) OR 3 (At Risk) -----------------------
# HabitatAttribute_Ratings_Level2_updated
indiv_habitat_attributes_impaired_restoration = c()
# ------ list column names/all habitat attributes -----------------
colnames_restoration_x = unique(Habitat_Attribute_Scores_Okanogan$Habitat_Attribute)
colnames_restoration_x = colnames_restoration_x[order(colnames_restoration_x)]
# ------------------ if any names are NA (remove them) -----------------
if(any(is.na(colnames_restoration_x))){
colnames_restoration_x = colnames_restoration_x[-which(is.na(colnames_restoration_x))]
}
# ----------------- original way to pull impaired habitat attributes -----------
# THIS way just pulled from EDT data - new ways integrates EDT with distributed data we have
for( rowx in 1:nrow(Habitat_Quality_Pathway_Restoration) ){
# --------------------- pull habitat attributes for this reach -----------------
habitat_attributes_output_x = HabitatAttribute_Ratings_Level2_updated[which(HabitatAttribute_Ratings_Level2_updated$Reach ==  Habitat_Quality_Pathway_Restoration$ReachName[rowx] ), ]
# ------------ function to identify habitat attributes at 1 and 3 (and list for each reach) ---------
output_row_x = list_indiv_habitat_attributes_low_FUNCTION_OKANOGAN_ORIGINAL(habitat_attributes_output_x, colnames_restoration_x)
# ------------------ combine row -------------------
indiv_habitat_attributes_impaired_restoration = rbind(indiv_habitat_attributes_impaired_restoration,output_row_x )
}
# ----------------------- Remove any rows that had no unacceptable or at risk habitat attributes -----------
NA_df = is.na( indiv_habitat_attributes_impaired_restoration[ ,colnames(indiv_habitat_attributes_impaired_restoration)[ (length(colnames(indiv_habitat_attributes_impaired_restoration))-2):length(colnames(indiv_habitat_attributes_impaired_restoration))  ]  ] )
NA_rows_x = which(NA_df[,1] & NA_df[,2] & NA_df[,3])
indiv_habitat_attributes_impaired_restoration = indiv_habitat_attributes_impaired_restoration[-NA_rows_x, ]
print(paste("--- Restoration - TOTAL reaches after habitat attributes filter: ", nrow(indiv_habitat_attributes_impaired_restoration), sep=""))
indiv_habitat_attributes_impaired_restoration_old = indiv_habitat_attributes_impaired_restoration
# ------------ pull from Habitat_Attribute_Scores_Okanogan ----------
# SINCE EDT results are integarted with Habitat_Attribute_Scores_Okanogan, this pulls EDT data
# and any distributed habitat data (or other data for the Okanogan) that we have - see "Data_Sources_List_for_Habitat_Attributes.R"
indiv_habitat_attributes_impaired_restoration = c()
# ---------------- pull the reaches ------------
Habitat_Attribute_Scores_Okanogan_FILTERED = Habitat_Attribute_Scores_Okanogan %>%
filter(ReachName   %in%   Habitat_Quality_Pathway_Restoration$ReachName)
# --------------- just pull the habitat attributes in RTT list ---------
#Habitat_Attribute_Scores_Okanogan_FILTERED = Habitat_Attribute_Scores_Okanogan_FILTERED %>%
#  filter(Habitat_Attribute   %in%   colnames_restoration_x)
# --------------- only pull 1s (Unacceptable) and 3s (At Risk) ------------
Habitat_Attribute_Scores_Okanogan_FILTERED$Habitat_Attribute_Score = as.numeric(as.character(Habitat_Attribute_Scores_Okanogan_FILTERED$Habitat_Attribute_Score))
# ------------- only have habitat attributes in RTT HQ --------------
for(attribute_x in colnames_HQ_habitat_attributes){
# ----------- remove white space
x_i = which(Habitat_Attribute_Scores_Okanogan_FILTERED$Habitat_Attribute == attribute_x)
}
Habitat_Attribute_Scores_Okanogan_FILTERED = Habitat_Attribute_Scores_Okanogan_FILTERED[which(Habitat_Attribute_Scores_Okanogan_FILTERED$Habitat_Attribute_Score <= Individual_Habitat_Attribute_Score), ]
# --------------------- PREP FOR OUTPUT ----------------
reaches_unique = unique(Habitat_Attribute_Scores_Okanogan_FILTERED$ReachName)
for(reaches_x in reaches_unique){
# -------- pull rows ----------
x = which(Habitat_Attribute_Scores_Okanogan_FILTERED$ReachName == reaches_x)
Habitat_Attribute_Scores_Okanogan_FILTERED_reach_x = Habitat_Attribute_Scores_Okanogan_FILTERED[x,]
# --------------- get Reach Info -------
Reach_Info_x = Habitat_Attribute_Scores_Okanogan_FILTERED_reach_x[1,1:3]
Reach_Info_x$Spring.Chinook.Reach = NA
# ----------------------------------------------------
#   Add Reach Columns for HQ Output merge
# ----------------------------------------------------
# Reach_Info_x$Steelhead.Reach = Reach_Information_data$Steelhead.Reach[which(Reach_Information_data$ReachName == reaches_x)]
# ----------------------------------------------------
#   Get individual habitat attributes
# ----------------------------------------------------
# --------------- Unacceptable (1s) --------------
x_1 = which(Habitat_Attribute_Scores_Okanogan_FILTERED_reach_x$Habitat_Attribute_Score == 1)
unacceptable_1_indiv_habitat_attributes_x = Habitat_Attribute_Scores_Okanogan_FILTERED_reach_x$Habitat_Attribute[x_1]
Reach_Info_x$unacceptable_1_indiv_habitat_attributes = paste(unacceptable_1_indiv_habitat_attributes_x, collapse=",")
# --------------- At Risk (3s) --------------
x_3 = which(Habitat_Attribute_Scores_Okanogan_FILTERED_reach_x$Habitat_Attribute_Score <= 3  &
Habitat_Attribute_Scores_Okanogan_FILTERED_reach_x$Habitat_Attribute_Score > 1 )
at_risk_2_or_3_indiv_habitat_attributes_x = Habitat_Attribute_Scores_Okanogan_FILTERED_reach_x$Habitat_Attribute[x_3]
Reach_Info_x$at_risk_2_or_3_indiv_habitat_attributes = paste(at_risk_2_or_3_indiv_habitat_attributes_x, collapse=",")
# --------------- Unacceptable (1s) or At Risk (3s) --------------
x_1_3 = which(Habitat_Attribute_Scores_Okanogan_FILTERED_reach_x$Habitat_Attribute_Score <= 3  )
unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes_x = Habitat_Attribute_Scores_Okanogan_FILTERED_reach_x$Habitat_Attribute[x_1_3]
Reach_Info_x$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes = paste(unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes_x, collapse=",")
# ------------ combine ------
indiv_habitat_attributes_impaired_restoration  = rbind(indiv_habitat_attributes_impaired_restoration,Reach_Info_x )
}
print(paste("--- Restoration - TOTAL reaches after habitat attributes filter: ", length(unique(Habitat_Attribute_Scores_Okanogan_FILTERED$ReachName)), sep=""))
# ---------------------------- get output for ALL ---------------------
Habitat_Attribute_Scores_Okanogan_FILTERED_ALL = Habitat_Attribute_Scores_Okanogan %>%
filter(ReachName   %in%   Output_All_Combined$ReachName)
# --------------- just pull the habitat attributes in RTT list ---------
#Habitat_Attribute_Scores_Okanogan_FILTERED_ALL = Habitat_Attribute_Scores_Okanogan_FILTERED_ALL %>%
#  filter(Habitat_Attribute   %in%   colnames_restoration_x)
# --------------- only pull 1s (Unacceptable) and 3s (At Risk) ------------
Habitat_Attribute_Scores_Okanogan_FILTERED_ALL$Habitat_Attribute_Score = as.numeric(as.character(Habitat_Attribute_Scores_Okanogan_FILTERED_ALL$Habitat_Attribute_Score))
# ------------- add to output --------
all_habitat_attributes = unique(Habitat_Attribute_Scores_Okanogan_FILTERED_ALL$Habitat_Attribute)[order(unique(Habitat_Attribute_Scores_Okanogan_FILTERED_ALL$Habitat_Attribute))]
for(habitat_attribute_x in all_habitat_attributes){
if(habitat_attribute_x == "Brook Trout"){next} # we don't do Brook Trout
# ----------- pull data for this habitat attribute ---------
habitat_attribute_x_data_frame = Habitat_Attribute_Scores_Okanogan_FILTERED_ALL[Habitat_Attribute_Scores_Okanogan_FILTERED_ALL$Habitat_Attribute == habitat_attribute_x,c("ReachName","Habitat_Attribute_Score")]
# -------------- rename column name ---------
colnames(habitat_attribute_x_data_frame)[2] = habitat_attribute_x
# ------------ merge with Output_All_Combined ------
Output_All_Combined = merge( Output_All_Combined,  habitat_attribute_x_data_frame, by="ReachName", )
}
# ---------- write all the output ------------
write.xlsx(Output_All_Combined, file=paste(output_path,"Habitat_Quality_Scores_Filters_Okanogan.xlsx",sep=""),  row.names=FALSE)
#  ---------------------------------------------------------------------------------
#           Write output data to output file
#  ---------------------------------------------------------------------------------
# ----------------------- Restoration --------------------
output_path_x =  paste(output_path,restoration_output_name, sep="")
write_xlsx(indiv_habitat_attributes_impaired_restoration, output_path_x)
}else{
print(paste("--- No Restoration Reaches generated for species: ", species, sep=""))
}
nrow(Habitat_Quality_Pathway_Restoration)
# -------------------- Restoration -----------
# --------------- identify habitat attributes at 1 (Unacceptable) OR 3 (At Risk) -----------------------
# HabitatAttribute_Ratings_Level2_updated
indiv_habitat_attributes_impaired_restoration = c()
# ------ list column names/all habitat attributes -----------------
colnames_restoration_x = unique(Habitat_Attribute_Scores_Okanogan$Habitat_Attribute)
colnames_restoration_x = colnames_restoration_x[order(colnames_restoration_x)]
colnames(Habitat_Quality_Scores_Okanogan)
colnames(Habitat_Quality_Scores)
cbind( colnames(Habitat_Quality_Scores_Okanogan),colnames(Habitat_Quality_Scores) )
colnames(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
View(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
# -------------------- Restoration -----------
# --------------- identify habitat attributes at 1 (Unacceptable) OR 3 (At Risk) -----------------------
# HabitatAttribute_Ratings_Level2_updated
indiv_habitat_attributes_impaired_restoration = c()
# ------ list column names/all habitat attributes -----------------
colnames_restoration_x = unique(Habitat_Attribute_Scores_Okanogan$Habitat_Attribute)
colnames_restoration_x
# ------------ pull from Habitat_Attribute_Scores_Okanogan ----------
# SINCE EDT results are integarted with Habitat_Attribute_Scores_Okanogan, this pulls EDT data
# and any distributed habitat data (or other data for the Okanogan) that we have - see "Data_Sources_List_for_Habitat_Attributes.R"
indiv_habitat_attributes_impaired_restoration = c()
# ---------------- pull the reaches ------------
Habitat_Attribute_Scores_Okanogan_FILTERED = Habitat_Attribute_Scores_Okanogan %>%
filter(ReachName   %in%   Habitat_Quality_Pathway_Restoration$ReachName)
View(Habitat_Attribute_Scores_Okanogan_FILTERED)
unique(Habitat_Attribute_Scores_Okanogan_FILTERED$Habitat_Attribute)
View(Habitat_Quality_Pathway_Restoration)
reaches_x = "Salmon 16-2"
reaches_x = "Salmon 16-3"
# -------- pull rows ----------
x = which(Habitat_Quality_Scores_Okanogan$ReachName == reaches_x)
Habitat_Quality_Scores_Okanogan_reach_x = Habitat_Quality_Scores_Okanogan[x,]
Habitat_Quality_Scores_Okanogan_reach_x
class(Habitat_Quality_Scores_Okanogan_reach_x)
dim(Habitat_Quality_Scores_Okanogan_reach_x)
colnames(Habitat_Quality_Scores_Okanogan_reach_x)
colnames_HQ_output[7:19]
colnames_HQ_habitat_attributes = colnames_HQ_output[7:19]
Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes]
# ----------------------------------------------------
#   Get individual habitat attributes
# ----------------------------------------------------
# --------------- Unacceptable (1s) --------------
x_1 = which(Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes] == 1)
x_1
unacceptable_1_indiv_habitat_attributes_x = colnames_HQ_habitat_attributes[x_1]
unacceptable_1_indiv_habitat_attributes_x
Reach_Info_x$unacceptable_1_indiv_habitat_attributes = paste(unacceptable_1_indiv_habitat_attributes_x, collapse=",")
Habitat_Quality_Scores_Okanogan_reach_x$unacceptable_1_indiv_habitat_attributes = paste(unacceptable_1_indiv_habitat_attributes_x, collapse=",")
Habitat_Quality_Scores_Okanogan_reach_x
# --------------- Unacceptable (1s) or At Risk (3s) --------------
x_1_3 = which(Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes]  <= 3  )
x_1_3
# --------------- At Risk (3s) --------------
x_3 = which(Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes]  <= 3  &
Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes] > 1 )
x_3
# --------------- At Risk (3s) --------------
x_3 = which(Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes]  <= 3  &
Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes] > 1 )
at_risk_2_or_3_indiv_habitat_attributes_x = colnames_HQ_habitat_attributes[x_3]
at_risk_2_or_3_indiv_habitat_attributes_x
Habitat_Quality_Scores_Okanogan_reach_x$at_risk_2_or_3_indiv_habitat_attributes = paste(at_risk_2_or_3_indiv_habitat_attributes_x, collapse=",")
# --------------- Unacceptable (1s) or At Risk (3s) --------------
x_1_3 = which(Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes]  <= 3  )
unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes_x = colnames_HQ_habitat_attributes[x_1_3]
Habitat_Quality_Scores_Okanogan_reach_x$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes = paste(unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes_x, collapse=",")
# ----------------------------------------------------------------
#     Loop through each reach to get HQ Scores AND impaired attributes
# ----------------------------------------------------------------
Habitat_Quality_Scores_Okanogan_with_impaired_attributes = c()
for(reaches_x in Habitat_Quality_Pathway_Restoration$ReachName){
# ----------------------------------------------------
#   Pull Habitat_Quality_Scores_Okanogan_reach_x data for this reach
# ----------------------------------------------------
x = which(Habitat_Quality_Scores_Okanogan$ReachName == reaches_x)
Habitat_Quality_Scores_Okanogan_reach_x = Habitat_Quality_Scores_Okanogan[x,]
# ----------------------------------------------------
#   Get individual habitat attributes
# ----------------------------------------------------
# --------------- Unacceptable (1s) --------------
x_1 = which(Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes] == 1)
unacceptable_1_indiv_habitat_attributes_x = colnames_HQ_habitat_attributes[x_1]
Habitat_Quality_Scores_Okanogan_reach_x$unacceptable_1_indiv_habitat_attributes = paste(unacceptable_1_indiv_habitat_attributes_x, collapse=",")
# --------------- At Risk (3s) --------------
x_3 = which(Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes]  <= 3  &
Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes] > 1 )
at_risk_2_or_3_indiv_habitat_attributes_x = colnames_HQ_habitat_attributes[x_3]
Habitat_Quality_Scores_Okanogan_reach_x$at_risk_2_or_3_indiv_habitat_attributes = paste(at_risk_2_or_3_indiv_habitat_attributes_x, collapse=",")
# --------------- Unacceptable (1s) or At Risk (3s) --------------
x_1_3 = which(Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes]  <= 3  )
unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes_x = colnames_HQ_habitat_attributes[x_1_3]
Habitat_Quality_Scores_Okanogan_reach_x$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes = paste(unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes_x, collapse=",")
# ------------ combine ------
Habitat_Quality_Scores_Okanogan_with_impaired_attributes  = rbind(Habitat_Quality_Scores_Okanogan_with_impaired_attributes,Habitat_Quality_Scores_Okanogan_reach_x )
}
dim(Habitat_Quality_Scores_Okanogan_with_impaired_attributes)
x_3
length(x_3)
# ----------------------------------------------------------------
#     Loop through each reach to get HQ Scores AND impaired attributes
# ----------------------------------------------------------------
Habitat_Quality_Scores_Okanogan_with_impaired_attributes = c()
for(reaches_x in Habitat_Quality_Pathway_Restoration$ReachName){
# ----------------------------------------------------
#   Pull Habitat_Quality_Scores_Okanogan_reach_x data for this reach
# ----------------------------------------------------
x = which(Habitat_Quality_Scores_Okanogan$ReachName == reaches_x)
Habitat_Quality_Scores_Okanogan_reach_x = Habitat_Quality_Scores_Okanogan[x,]
# ----------------------------------------------------
#   Get individual habitat attributes
# ----------------------------------------------------
# --------------- Unacceptable (1s) --------------
x_1 = which(Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes] == 1)
unacceptable_1_indiv_habitat_attributes_x = colnames_HQ_habitat_attributes[x_1]
Habitat_Quality_Scores_Okanogan_reach_x$unacceptable_1_indiv_habitat_attributes = paste(unacceptable_1_indiv_habitat_attributes_x, collapse=",")
# --------------- At Risk (3s) --------------
x_3 = which(Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes]  <= 3  &
Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes] > 1 )
at_risk_2_or_3_indiv_habitat_attributes_x = colnames_HQ_habitat_attributes[x_3]
Habitat_Quality_Scores_Okanogan_reach_x$at_risk_2_or_3_indiv_habitat_attributes = paste(at_risk_2_or_3_indiv_habitat_attributes_x, collapse=",")
# --------------- Unacceptable (1s) or At Risk (3s) --------------
x_1_3 = which(Habitat_Quality_Scores_Okanogan_reach_x[,colnames_HQ_habitat_attributes]  <= 3  )
unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes_x = colnames_HQ_habitat_attributes[x_1_3]
Habitat_Quality_Scores_Okanogan_reach_x$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes = paste(unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes_x, collapse=",")
# ------ only move forward reaches with impaired habitat attributes -------
if( length(x_1) > 0 | length(x_3) > 0 | length(x_1_3) > 0 ){
# ------------ combine ------
Habitat_Quality_Scores_Okanogan_with_impaired_attributes  = rbind(Habitat_Quality_Scores_Okanogan_with_impaired_attributes,Habitat_Quality_Scores_Okanogan_reach_x )
}
}
dim(Habitat_Quality_Scores_Okanogan_with_impaired_attributes)
print(paste("--- Restoration - TOTAL reaches after habitat attributes filter: ", length(unique(Habitat_Quality_Scores_Okanogan_with_impaired_attributes$ReachName)), sep=""))
colnames(Habitat_Quality_Scores_Okanogan_with_impaired_attributes)
# ----------------------- Restoration --------------------
output_path_x =  paste(output_path,restoration_output_name, sep="")
dim(Output_All_Combined)
colnames(Output_All_Combined)
Habitat_Attribute_Scores_Okanogan_FILTERED_ALL = Habitat_Attribute_Scores_Okanogan %>%
filter(ReachName   %in%   Output_All_Combined$ReachName)
# --------------- just pull the habitat attributes in RTT list ---------
#Habitat_Attribute_Scores_Okanogan_FILTERED_ALL = Habitat_Attribute_Scores_Okanogan_FILTERED_ALL %>%
#  filter(Habitat_Attribute   %in%   colnames_restoration_x)
# --------------- only pull 1s (Unacceptable) and 3s (At Risk) ------------
Habitat_Attribute_Scores_Okanogan_FILTERED_ALL$Habitat_Attribute_Score = as.numeric(as.character(Habitat_Attribute_Scores_Okanogan_FILTERED_ALL$Habitat_Attribute_Score))
# ------------- add to output --------
all_habitat_attributes = unique(Habitat_Attribute_Scores_Okanogan_FILTERED_ALL$Habitat_Attribute)[order(unique(Habitat_Attribute_Scores_Okanogan_FILTERED_ALL$Habitat_Attribute))]
for(habitat_attribute_x in all_habitat_attributes){
if(habitat_attribute_x == "Brook Trout"){next} # we don't do Brook Trout
# ----------- pull data for this habitat attribute ---------
habitat_attribute_x_data_frame = Habitat_Attribute_Scores_Okanogan_FILTERED_ALL[Habitat_Attribute_Scores_Okanogan_FILTERED_ALL$Habitat_Attribute == habitat_attribute_x,c("ReachName","Habitat_Attribute_Score")]
# -------------- rename column name ---------
colnames(habitat_attribute_x_data_frame)[2] = habitat_attribute_x
# ------------ merge with Output_All_Combined ------
Output_All_Combined = merge( Output_All_Combined,  habitat_attribute_x_data_frame, by="ReachName", )
}
dim(Output_All_Combined)
colnames(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']])
cbind(colnames(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']]), colnames(Habitat_Quality_Scores_Okanogan))
# -------------------------------------------------------
#         Pull Habitat_Quality_Scores_Okanogan row for each Protection reach
# -------------------------------------------------------
Habitat_Quality_Scores_Okanogan_for_Protection = c()
reach_x = Habitat_Quality_Pathway_Protection$ReachName[1]
reach_x
# ----------------------------------------------------
#   Pull Habitat_Quality_Scores_Okanogan_reach_x data for this reach
# ----------------------------------------------------
x = which(Habitat_Quality_Scores_Okanogan$ReachName == reach_x)
x
Habitat_Quality_Scores_Okanogan_reach_x = Habitat_Quality_Scores_Okanogan[x,]
colnames(Habitat_Quality_Scores_Okanogan_reach_x)
# ------- Habitat Quality Pathway Filter for the Okanogan ---------------
source(paste(script_path, 'Habitat_Quality_Pathway_Filter_OKANOGAN.R', sep=""))  # for Methow-Wenatchee-Entiat AND Okanogan functions
# ----- set names of Habitat Quality Scores to sum ------
habitat_quality_scores_colnames_for_sum = c("Stability_Mean" , "CoarseSubstrate_score" ,"Cover-Wood_score", "Flow-SummerBaseFlow_score",
"Off-Channel-Floodplain_score", "Off-Channel-Side-Channels_score","PoolQuantity&Quality_score",
"Riparian_Mean","Temperature-Rearing_score")
# --------------- generate for all basins except Okanogan ---------------
Habitat_Quality_Pathway_Spring_Chinook = Generate_Habitat_Quality_Output_Table("Spring Chinook", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Steelhead = Generate_Habitat_Quality_Output_Table("Steelhead", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Bull_Trout = Generate_Habitat_Quality_Output_Table("Bull Trout", basins_to_include, habitat_quality_scores_colnames_for_sum )
# --------------- generate for Okanogan ---------------
colnames_HQ_output = colnames(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
colnames_HQ_habitat_attributes = colnames_HQ_output[7:19]  # habitat attributes to pull for impaired habitat attributes
# NOTE: just need to apply filters to Habitat_Quality_Scores_Okanogan - pull those directly
Habitat_Quality_Pathway_Steelhead_OKANOGAN = Generate_Habitat_Quality_Output_Table_Okanogan("Steelhead" , colnames_HQ_output, colnames_HQ_habitat_attributes)
# ----- set names of Habitat Quality Scores to sum ------
habitat_quality_scores_colnames_for_sum = c("Stability_Mean" , "CoarseSubstrate_score" ,"Cover-Wood_score", "Flow-SummerBaseFlow_score",
"Off-Channel-Floodplain_score", "Off-Channel-Side-Channels_score","PoolQuantity&Quality_score",
"Riparian_Mean","Temperature-Rearing_score")
# --------------- generate for all basins except Okanogan ---------------
Habitat_Quality_Pathway_Spring_Chinook = Generate_Habitat_Quality_Output_Table("Spring Chinook", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Steelhead = Generate_Habitat_Quality_Output_Table("Steelhead", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Bull_Trout = Generate_Habitat_Quality_Output_Table("Bull Trout", basins_to_include, habitat_quality_scores_colnames_for_sum )
# --------------- generate for Okanogan ---------------
colnames_HQ_output = colnames(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
colnames_HQ_habitat_attributes = colnames_HQ_output[7:19]  # habitat attributes to pull for impaired habitat attributes
# NOTE: just need to apply filters to Habitat_Quality_Scores_Okanogan - pull those directly
Habitat_Quality_Pathway_Steelhead_OKANOGAN = Generate_Habitat_Quality_Output_Table_Okanogan("Steelhead" , colnames_HQ_output, colnames_HQ_habitat_attributes)
# ---------------- Restoration: add Okanogan to Methow-Wenatchee-Okanogan HQ Output ------------
habitat_quality_scores_colnames_for_combo = colnames(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])[7:(ncol(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])-7)]
# ---------------- Restoration: add Okanogan to Methow-Wenatchee-Okanogan HQ Output ------------
habitat_quality_scores_colnames_for_combo = colnames(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])[7:(ncol(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])-7)]
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']] = Combine_MetEntWen_and_Okanogan_Habitat_Quality_Output(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead_OKANOGAN [['Habitat_Quality_Pathway_Restoration']],
habitat_quality_scores_colnames_for_combo)
# ---------------- Protection: add Okanogan to Methow-Wenatchee-Okanogan HQ Output ------------
habitat_quality_scores_colnames_for_combo = colnames(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']])[7:(ncol(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']])-4)]
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']] = Combine_MetEntWen_and_Okanogan_Habitat_Quality_Output_Protection(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead_OKANOGAN[['Habitat_Quality_Pathway_Protection']],
habitat_quality_scores_colnames_for_combo)
# ------------------- Compare EDT and RTT Output ----------------------
source(paste(script_path, 'Compare_EDT_and_RTT_output_data.R', sep=""))  # for Methow-Wenatchee-Entiat AND Okanogan functions
View(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']])
dim(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']])
View(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
