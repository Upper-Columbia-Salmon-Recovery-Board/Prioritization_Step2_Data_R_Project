if( any(HQ_bull_trout$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "HQ_bull_trout", sep=",")
}
if( any(LF_spring_chinook$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_spring_chinook", sep=",")
}
if( any(LF_steelhead$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_steelhead", sep=",")
}
if( any(LF_bull_trout$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_bull_trout", sep=",")
}
# ---------------- remove leading comma -------
pathway_x = substr(pathway_x,2,nchar(pathway_x))
# ------------- Number of Pathways -------------------
number_of_pathways_x =  length( unlist(strsplit(pathway_x, ",")) )
# ------------------------------------
#      Life Stage
# -----------------------------------
life_stage_x = c()
if( any(LF_spring_chinook$ReachName == reach_x) ){
life_stages_LF_x = LF_spring_chinook$life_stage[which(LF_spring_chinook$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
if( any(LF_steelhead$ReachName == reach_x) ){
life_stages_LF_x = LF_steelhead$life_stage[which(LF_steelhead$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
if( any(LF_bull_trout$ReachName == reach_x) ){
life_stages_LF_x = LF_bull_trout$life_stage[which(LF_bull_trout$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
# ------------- Number of Life Stages -------------------
if( !is.null(life_stage_x) ){
life_stage_x = substr(life_stage_x,2,nchar(life_stage_x))   # remove leading comma
life_stage_x = unique(unlist(strsplit(life_stage_x, ",")))
life_stage_x = paste(life_stage_x, collapse=",")
number_of_life_stage_x =  length( life_stage_x )
}else{
number_of_life_stage_x = NA
}
# ----- make NA if no life stages -----------
if(is.null(life_stage_x)){life_stage_x = NA}
# ------------------------------------
#     Action
# -----------------------------------
action_x = "Habitat Protection"
# ------------------------------------
#    Combine into one row, then output
# -----------------------------------
output_x = t(as.data.frame( c(reach_x, assessment_unit_x, basin_x, pathway_x, number_of_pathways_x,
life_stage_x, number_of_life_stage_x, action_x )))
rownames(output_x) = reach_x
colnames(output_x) = c("ReachName","Assessment.Unit", "Basin","Pathway", "Number_of_Pathways",
"Life_Stages","Number_of_Life_Stages","Action")
Protection_Output = rbind(Protection_Output, output_x)
}
View(Protection_Output )
View(Protection_Output )
# --------------------------------------------------------------
#           Loop through each reach and prep for output
# --------------------------------------------------------------
Protection_Output = c()
for(reach_x in reaches_unique){
# ------------------------------------
#      Get Basin and Assessment Unit
# -----------------------------------
basin_x = Reach_Information_data$Basin[which(Reach_Information_data$ReachName == reach_x)]
assessment_unit_x = Reach_Information_data$Assessment.Unit[which(Reach_Information_data$ReachName == reach_x)]
# ------------------------------------
#     Pathway
# -----------------------------------
pathway_x = c()
if( any(HQ_spring_chinook$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "HQ_spring_chinook", sep=",")
}
if( any(HQ_steelhead$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "HQ_steelhead", sep=",")
}
if( any(HQ_bull_trout$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "HQ_bull_trout", sep=",")
}
if( any(LF_spring_chinook$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_spring_chinook", sep=",")
}
if( any(LF_steelhead$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_steelhead", sep=",")
}
if( any(LF_bull_trout$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_bull_trout", sep=",")
}
# ---------------- remove leading comma -------
pathway_x = substr(pathway_x,2,nchar(pathway_x))
# ------------- Number of Pathways -------------------
number_of_pathways_x =  length( unlist(strsplit(pathway_x, ",")) )
# ------------------------------------
#      Life Stage
# -----------------------------------
life_stage_x = c()
if( any(LF_spring_chinook$ReachName == reach_x) ){
life_stages_LF_x = LF_spring_chinook$life_stage[which(LF_spring_chinook$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
if( any(LF_steelhead$ReachName == reach_x) ){
life_stages_LF_x = LF_steelhead$life_stage[which(LF_steelhead$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
if( any(LF_bull_trout$ReachName == reach_x) ){
life_stages_LF_x = LF_bull_trout$life_stage[which(LF_bull_trout$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
# ------------- Number of Life Stages -------------------
if( !is.null(life_stage_x) ){
life_stage_x = substr(life_stage_x,2,nchar(life_stage_x))   # remove leading comma
life_stage_x = unique(unlist(strsplit(life_stage_x, ","))) # get unique life stages (don't double count)
number_of_life_stage_x =  length( life_stage_x )  # number of life stages
life_stage_x = paste(life_stage_x, collapse=",") # put all life stages into a single element
}else{
number_of_life_stage_x = NA
}
# ----- make NA if no life stages -----------
if(is.null(life_stage_x)){life_stage_x = NA}
# ------------------------------------
#     Action
# -----------------------------------
action_x = "Habitat Protection"
# ------------------------------------
#    Combine into one row, then output
# -----------------------------------
output_x = t(as.data.frame( c(reach_x, assessment_unit_x, basin_x, pathway_x, number_of_pathways_x,
life_stage_x, number_of_life_stage_x, action_x )))
rownames(output_x) = reach_x
colnames(output_x) = c("ReachName","Assessment.Unit", "Basin","Pathway", "Number_of_Pathways",
"Life_Stages","Number_of_Life_Stages","Action")
Protection_Output = rbind(Protection_Output, output_x)
}
View(Protection_Output)
source(paste(script_path, 'FUNCTIONS_for_Protection_Output.R', sep=""))
Protection_Prioritization_Output = FUNCTION_Combine_Protection_Output(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']] )
View(Protection_Prioritization_Output)
source(paste(script_path, 'FUNCTIONS_for_Protection_Output.R', sep=""))
Protection_Prioritization_Output = FUNCTION_Combine_Protection_Output(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']] )
View(Protection_Prioritization_Output)
help(write_xlsx)
source(paste(script_path, 'FUNCTIONS_for_Protection_Output.R', sep=""))
Protection_Prioritization_Output = FUNCTION_Combine_Protection_Output(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']] )
View(Protection_Prioritization_Output)
# -----------------------------------------------------------------
#      Protection
# -----------------------------------------------------------------
output_path_x =  paste(output_path,'Reach_Actions_Protection.xlsx', sep="")
write_xlsx(Protection_Prioritization_Output,output_path_x )
Protection_Prioritization_Output = FUNCTION_Combine_Protection_Output(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']] )
dim9Protection_Prioritization_Output
dim(Protection_Prioritization_Output)
Protection_Prioritization_Output
# -----------------------------------------------------------------
#      Protection
# -----------------------------------------------------------------
output_path_x =  paste(output_path,'Reach_Actions_Protection.xlsx', sep="")
write_xlsx(Protection_Prioritization_Output,output_path_x )
Protection_Output = c()
for(reach_x in reaches_unique){
# ------------------------------------
#      Get Basin and Assessment Unit
# -----------------------------------
basin_x = Reach_Information_data$Basin[which(Reach_Information_data$ReachName == reach_x)]
assessment_unit_x = Reach_Information_data$Assessment.Unit[which(Reach_Information_data$ReachName == reach_x)]
# ------------------------------------
#     Pathway
# -----------------------------------
pathway_x = c()
if( any(HQ_spring_chinook$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "HQ_spring_chinook", sep=",")
}
if( any(HQ_steelhead$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "HQ_steelhead", sep=",")
}
if( any(HQ_bull_trout$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "HQ_bull_trout", sep=",")
}
if( any(LF_spring_chinook$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_spring_chinook", sep=",")
}
if( any(LF_steelhead$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_steelhead", sep=",")
}
if( any(LF_bull_trout$ReachName == reach_x) ){
pathway_x = paste(pathway_x, "LF_bull_trout", sep=",")
}
# ---------------- remove leading comma -------
pathway_x = substr(pathway_x,2,nchar(pathway_x))
# ------------- Number of Pathways -------------------
number_of_pathways_x =  length( unlist(strsplit(pathway_x, ",")) )
# ------------------------------------
#      Life Stage
# -----------------------------------
life_stage_x = c()
if( any(LF_spring_chinook$ReachName == reach_x) ){
life_stages_LF_x = LF_spring_chinook$life_stage[which(LF_spring_chinook$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
if( any(LF_steelhead$ReachName == reach_x) ){
life_stages_LF_x = LF_steelhead$life_stage[which(LF_steelhead$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
if( any(LF_bull_trout$ReachName == reach_x) ){
life_stages_LF_x = LF_bull_trout$life_stage[which(LF_bull_trout$ReachName == reach_x)]
# make into one element if more than one life stage
if(length(life_stages_LF_x) > 1){   life_stages_LF_x = paste(life_stages_LF_x, collapse=",")}
life_stage_x = paste(life_stage_x, life_stages_LF_x, sep=",")
}
# ------------- Number of Life Stages -------------------
if( !is.null(life_stage_x) ){
life_stage_x = substr(life_stage_x,2,nchar(life_stage_x))   # remove leading comma
life_stage_x = unique(unlist(strsplit(life_stage_x, ","))) # get unique life stages (don't double count)
number_of_life_stage_x =  length( life_stage_x )  # number of life stages
life_stage_x = paste(life_stage_x, collapse=",") # put all life stages into a single element
}else{
number_of_life_stage_x = NA
}
# ----- make NA if no life stages -----------
if(is.null(life_stage_x)){life_stage_x = NA}
# ------------------------------------
#     Action
# -----------------------------------
action_x = "Habitat Protection"
# ------------------------------------
#    Combine into one row, then output
# -----------------------------------
output_x = t(as.data.frame( c(reach_x, assessment_unit_x, basin_x, pathway_x, number_of_pathways_x,
life_stage_x, number_of_life_stage_x, action_x )))
rownames(output_x) = reach_x
colnames(output_x) = c("ReachName","Assessment.Unit", "Basin","Pathway", "Number_of_Pathways",
"Life_Stages","Number_of_Life_Stages","Action")
Protection_Output = rbind(Protection_Output, output_x)
}
class(Protection_Output)
# ------------ prep data to process ------
Protection_Output = as.data.frame(Protection_Output)
rownames(Protection_Output) = seq(1,nrow(Protection_Output))
class(Protection_Output)
Protection_Output$Number_of_Pathways
colnames(Protection_Output)
source(paste(script_path, 'FUNCTIONS_for_Protection_Output.R', sep=""))
Protection_Prioritization_Output = FUNCTION_Combine_Protection_Output(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']] )
View(Protection_Prioritization_Output)
# -----------------------------------------------------------------
#      Protection
# -----------------------------------------------------------------
output_path_x =  paste(output_path,'Reach_Actions_Protection.xlsx', sep="")
write_xlsx(Protection_Prioritization_Output,output_path_x )
Protection_Prioritization_Output$Life_Stages
source(paste(script_path, 'FUNCTIONS_for_Protection_Output.R', sep=""))
Protection_Prioritization_Output = FUNCTION_Combine_Protection_Output(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']] )
Protection_Prioritization_Output$Life_Stages
# -----------------------------------------------------------------
#      Protection
# -----------------------------------------------------------------
output_path_x =  paste(output_path,'Reach_Actions_Protection.xlsx', sep="")
write_xlsx(Protection_Prioritization_Output,output_path_x )
Protection_Output$Number_of_Pathways
Protection_Output$Number_of_Life_Stages
# -------- make blank cells to NA -------
x_na = which(is.na(Protection_Output$Number_of_Life_Stages))
x_na
source(paste(script_path, 'FUNCTIONS_for_Protection_Output.R', sep=""))
Protection_Prioritization_Output = FUNCTION_Combine_Protection_Output(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']] )
# -----------------------------------------------------------------
#      Protection
# -----------------------------------------------------------------
output_path_x =  paste(output_path,'Reach_Actions_Protection.xlsx', sep="")
write_xlsx(Protection_Prioritization_Output,output_path_x )
source(paste(script_path, 'FUNCTIONS_for_Protection_Output.R', sep=""))
Protection_Prioritization_Output = FUNCTION_Combine_Protection_Output(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']] )
# -----------------------------------------------------------------
#      Protection
# -----------------------------------------------------------------
output_path_x =  paste(output_path,'Reach_Actions_Protection.xlsx', sep="")
write_xlsx(Protection_Prioritization_Output,output_path_x )
View(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']])
View(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
dim(Crosswalk_Habitat_Attributes_and_Actions)
View(Crosswalk_Habitat_Attributes_and_Actions)
View(Attribute_LifeStage_Crosswalk)
Attribute_LifeStage_Crosswalk = read_excel( paste(data_path,'Attribute_LifeStage_Crosswalk.xlsx', sep="") )
View(Attribute_LifeStage_Crosswalk)
View(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']])
View(Habitat_Attribute_Scores)
31/35
# ---------------------------------------------------------------------------
#  Combine into ONE Data frame across all pathways and scores
# ---------------------------------------------------------------------------
Restoration_Prioritization_Output = FUNCTION_combine_across_Unacceptable_and_AtRisk(Restoration_Unacceptable, Restoration_At_Risk, Restoration_Unacceptable_and_At_Risk)
# ---------------------------------------------------------------------------
#  Add Barrier Prioritization Info
# ---------------------------------------------------------------------------
Restoration_Prioritization_Output = FUNCTION_Add_Barrier_Data(Restoration_Prioritization_Output, Barriers_Pathways_Data)
# -----------------------------------------------------------------
#       Restoration
# -----------------------------------------------------------------
output_path_x =  paste(output_path,'Reach_Actions_Restoratoin_Unacceptable_and_AtRisk.xlsx', sep="")
write_xlsx(Restoration_Prioritization_Output,output_path_x )
HQ_LF_Unacceptable = Restoration_Unacceptable
HQ_LF_At_Risk = Restoration_At_Risk
HQ_LF_Both = Restoration_Unacceptable_and_At_Risk
HQ_LF_Combined = Unacceptable_AtRisk_combined_output
dim(Barriers_Pathways_Data)
Barriers_Pathways_Data
for(reach_x in unique(Barriers_Pathways_Data$ReachName) ){
HQ_LF_index = which(HQ_LF_Combined$ReachName == reach_x)
barrier_index = which(Barriers_Pathways_Data$ReachName == reach_x)
# ------------------------------------------------------------
#   IF the barriers reach is in the existing list of prioritized reaches
# ------------------------------------------------------------
if(length(HQ_LF_index) > 0){
# ---------------------------------------------------------------------------
#    Update Pathways, Action Categories, and Habitat Attributes
# ---------------------------------------------------------------------------
# ---------------- make barrier pathway a yes --------------
HQ_LF_Combined$Barrier_Prioritization_Pathway[HQ_LF_index] = "yes"
# ------------- add pathway info -----------
HQ_LF_Combined$Pathways[HQ_LF_index] = paste(HQ_LF_Combined$Pathways[HQ_LF_index] ,"Barriers_pathway",sep=",")
HQ_LF_Combined$Number_of_Pathways[HQ_LF_index] = HQ_LF_Combined$Number_of_Pathways[HQ_LF_index] + 1
# ----------------- add Action Categories  ------------
HQ_LF_Combined$Action_Categories_All_Species[HQ_LF_index] = paste( HQ_LF_Combined$Action_Categories_All_Species[HQ_LF_index], Barriers_Pathways_Data$`Action Category`[barrier_index], sep=",")
HQ_LF_Combined$Number_Action_Categories_All_Species[HQ_LF_index] = HQ_LF_Combined$Number_Action_Categories_All_Species[HQ_LF_index] + 1
# -------------- add Habitat Attributes ------------
HQ_LF_Combined$Impaired_Habitat_Attributes_All_Species[HQ_LF_index] = paste( HQ_LF_Combined$Impaired_Habitat_Attributes_All_Species[HQ_LF_index], Barriers_Pathways_Data$Habitat_Attributes[barrier_index], sep=",")
HQ_LF_Combined$Number_Impaired_Habitat_Attributes_All_Species[HQ_LF_index] = HQ_LF_Combined$Number_Action_Categories_All_Species[HQ_LF_index] + 1
# ------------------------------------------------------------
#   IF the barriers reach DOES NOT exist in prioritized reach list
# ------------------------------------------------------------
}else{
barrier_index = which(Barriers_Pathways_Data$ReachName == reach_x)
# ------------- add reach information --------------------
HQ_and_LF_combo_x = as.data.frame( Barriers_Pathways_Data[barrier_index, columns_info]  )
# ------------- add pathway info -----------
HQ_and_LF_combo_x$Pathways = "Barriers_pathway"
HQ_and_LF_combo_x$Number_of_Pathways = 1
# ------------ yes or no pathways --------
HQ_and_LF_combo_x$HabitatQuality_Spring_Chinook_Pathway = "no"
HQ_and_LF_combo_x$HabitatQuality_Steelhead_Pathway= "no"
HQ_and_LF_combo_x$HabitatQuality_BullTrout_Pathway= "no"
HQ_and_LF_combo_x$LimitingFactor_Spring_Chinook_Pathway= "no"
HQ_and_LF_combo_x$LimitingFactor_Steelhead_Pathway= "no"
HQ_and_LF_combo_x$LimitingFactor_BullTrout_Pathway= "no"
# ----------- add "yes" to barrier -----
HQ_and_LF_combo_x$Barrier_Prioritization_Pathway = "yes"
# ------------- misc other ----------
HQ_and_LF_combo_x$Species = NA
HQ_and_LF_combo_x$SprCh_STLD_BullTr_All_Benefit = NA
HQ_and_LF_combo_x$Spring_Chinook_Benefit = NA
HQ_and_LF_combo_x$Life_Stages = NA
# ----------------- add Action Categories  ------------
HQ_and_LF_combo_x$Action_Categories_All_Species = Barriers_Pathways_Data$`Action Category`[barrier_index]
HQ_and_LF_combo_x$Number_Action_Categories_All_Species = 1
# -------------- add Habitat Attributes ------------
HQ_and_LF_combo_x$Impaired_Habitat_Attributes_All_Species = Barriers_Pathways_Data$Habitat_Attributes[barrier_index]
HQ_and_LF_combo_x$Number_Impaired_Habitat_Attributes_All_Species = 1
# ------ more misc -------
HQ_and_LF_combo_x$Unacceptable_Impaired_Habitat_Attributes_All_Species = NA
HQ_and_LF_combo_x$Unacceptable_Number_Impaired_Habitat_Attributes_All_Species = NA
# ------ Add another row to output ------
colnames(HQ_and_LF_combo_x) = colnames(HQ_LF_Combined)
HQ_LF_Combined = rbind(HQ_LF_Combined, HQ_and_LF_combo_x)
}
}
dim9HQ_LF_Combined
dim(HQ_LF_Combined)
which( is.na(HQ_LF_Combined$Species))
which( is.na(HQ_LF_Combined$SprCh_STLD_BullTr_All_Benefit) )
which( is.na(HQ_LF_Combined$Life_Stages) )
FUNCTION_Add_Barrier_Data = function(HQ_LF_Combined, Barriers_Pathways_Data){
for(reach_x in unique(Barriers_Pathways_Data$ReachName) ){
HQ_LF_index = which(HQ_LF_Combined$ReachName == reach_x)
barrier_index = which(Barriers_Pathways_Data$ReachName == reach_x)
# ------------------------------------------------------------
#   IF the barriers reach is in the existing list of prioritized reaches
# ------------------------------------------------------------
if(length(HQ_LF_index) > 0){
# ---------------------------------------------------------------------------
#    Update Pathways, Action Categories, and Habitat Attributes
# ---------------------------------------------------------------------------
# ---------------- make barrier pathway a yes --------------
HQ_LF_Combined$Barrier_Prioritization_Pathway[HQ_LF_index] = "yes"
# ------------- add pathway info -----------
HQ_LF_Combined$Pathways[HQ_LF_index] = paste(HQ_LF_Combined$Pathways[HQ_LF_index] ,"Barriers_pathway",sep=",")
HQ_LF_Combined$Number_of_Pathways[HQ_LF_index] = HQ_LF_Combined$Number_of_Pathways[HQ_LF_index] + 1
# ----------------- add Action Categories  ------------
HQ_LF_Combined$Action_Categories_All_Species[HQ_LF_index] = paste( HQ_LF_Combined$Action_Categories_All_Species[HQ_LF_index], Barriers_Pathways_Data$`Action Category`[barrier_index], sep=",")
HQ_LF_Combined$Number_Action_Categories_All_Species[HQ_LF_index] = HQ_LF_Combined$Number_Action_Categories_All_Species[HQ_LF_index] + 1
# -------------- add Habitat Attributes ------------
HQ_LF_Combined$Impaired_Habitat_Attributes_All_Species[HQ_LF_index] = paste( HQ_LF_Combined$Impaired_Habitat_Attributes_All_Species[HQ_LF_index], Barriers_Pathways_Data$Habitat_Attributes[barrier_index], sep=",")
HQ_LF_Combined$Number_Impaired_Habitat_Attributes_All_Species[HQ_LF_index] = HQ_LF_Combined$Number_Action_Categories_All_Species[HQ_LF_index] + 1
# ------------------------------------------------------------
#   IF the barriers reach DOES NOT exist in prioritized reach list
# ------------------------------------------------------------
}else{
barrier_index = which(Barriers_Pathways_Data$ReachName == reach_x)
# ------------- add reach information --------------------
HQ_and_LF_combo_x = as.data.frame( Barriers_Pathways_Data[barrier_index, columns_info]  )
# ------------- add pathway info -----------
HQ_and_LF_combo_x$Pathways = "Barriers_pathway"
HQ_and_LF_combo_x$Number_of_Pathways = 1
# ------------ yes or no pathways --------
HQ_and_LF_combo_x$HabitatQuality_Spring_Chinook_Pathway = "no"
HQ_and_LF_combo_x$HabitatQuality_Steelhead_Pathway= "no"
HQ_and_LF_combo_x$HabitatQuality_BullTrout_Pathway= "no"
HQ_and_LF_combo_x$LimitingFactor_Spring_Chinook_Pathway= "no"
HQ_and_LF_combo_x$LimitingFactor_Steelhead_Pathway= "no"
HQ_and_LF_combo_x$LimitingFactor_BullTrout_Pathway= "no"
# ----------- add "yes" to barrier -----
HQ_and_LF_combo_x$Barrier_Prioritization_Pathway = "yes"
# ------------- misc other ----------
HQ_and_LF_combo_x$Species = NA
HQ_and_LF_combo_x$SprCh_STLD_BullTr_All_Benefit = NA
HQ_and_LF_combo_x$Spring_Chinook_Benefit = NA
HQ_and_LF_combo_x$Life_Stages = NA
# ----------------- add Action Categories  ------------
HQ_and_LF_combo_x$Action_Categories_All_Species = Barriers_Pathways_Data$`Action Category`[barrier_index]
HQ_and_LF_combo_x$Number_Action_Categories_All_Species = 1
# -------------- add Habitat Attributes ------------
HQ_and_LF_combo_x$Impaired_Habitat_Attributes_All_Species = Barriers_Pathways_Data$Habitat_Attributes[barrier_index]
HQ_and_LF_combo_x$Number_Impaired_Habitat_Attributes_All_Species = 1
# ------ more misc -------
HQ_and_LF_combo_x$Unacceptable_Impaired_Habitat_Attributes_All_Species = NA
HQ_and_LF_combo_x$Unacceptable_Number_Impaired_Habitat_Attributes_All_Species = NA
# ------ Add another row to output ------
colnames(HQ_and_LF_combo_x) = colnames(HQ_LF_Combined)
HQ_LF_Combined = rbind(HQ_LF_Combined, HQ_and_LF_combo_x)
}
}
# ----------------------------------------- convert lists that are blank to NA --------------
HQ_LF_Combined$Species[ which( is.na(HQ_LF_Combined$Species) ) ] = "NA"
HQ_LF_Combined$SprCh_STLD_BullTr_All_Benefit[ which( is.na(HQ_LF_Combined$SprCh_STLD_BullTr_All_Benefit) ) ] = "NA"
HQ_LF_Combined$Spring_Chinook_Benefit[ which( is.na(HQ_LF_Combined$Spring_Chinook_Benefit) ) ] = "NA"
HQ_LF_Combined$Life_Stages[ which( is.na(HQ_LF_Combined$Life_Stages) ) ] = "NA"
HQ_LF_Combined$Unacceptable_Impaired_Habitat_Attributes_All_Species[ which( is.na(HQ_LF_Combined$Unacceptable_Impaired_Habitat_Attributes_All_Species) ) ] = "NA"
# ------------------- convert NAs in numeric to 0 -------------
HQ_LF_Combined$Unacceptable_Number_Impaired_Habitat_Attributes_All_Species[ which( is.na(HQ_LF_Combined$Unacceptable_Number_Impaired_Habitat_Attributes_All_Species) ) ] = 0
return(HQ_LF_Combined)
}
# ---------------------------------------------------------------------------
#  Combine into ONE Data frame across all pathways and scores
# ---------------------------------------------------------------------------
Restoration_Prioritization_Output = FUNCTION_combine_across_Unacceptable_and_AtRisk(Restoration_Unacceptable, Restoration_At_Risk, Restoration_Unacceptable_and_At_Risk)
# ---------------------------------------------------------------------------
#  Add Barrier Prioritization Info
# ---------------------------------------------------------------------------
Restoration_Prioritization_Output = FUNCTION_Add_Barrier_Data(Restoration_Prioritization_Output, Barriers_Pathways_Data)
# -----------------------------------------------------------------
#       Restoration
# -----------------------------------------------------------------
output_path_x =  paste(output_path,'Reach_Actions_Restoratoin_Unacceptable_and_AtRisk.xlsx', sep="")
write_xlsx(Restoration_Prioritization_Output,output_path_x )
