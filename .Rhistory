}
}
}
# ------------------------------------------------------------
#    Limiting Factor
# ------------------------------------------------------------
for(life_stage_x in life_stages_LF){
# ------------------------------------------------------------
#  Match Impaired Habitat Attributes to Life Stage Habitat Attributes
# ------------------------------------------------------------
# ---------=-------------------------
#  Pull Life Stage habitat attributes
# ---------=-------------------------
life_stage_habitat_attributes = Attribute_LifeStage_Crosswalk %>%
filter( `Life Stage` %in% life_stage_x) %>%
filter( Species %in% species_x ) %>%
dplyr::select(`Habitat Attribute`)
life_stage_habitat_attributes = as.data.frame(life_stage_habitat_attributes)
life_stage_habitat_attributes = life_stage_habitat_attributes$`Habitat Attribute`
# ------------- remove the blank space ---------------
life_stage_habitat_attributes = gsub(" ","",life_stage_habitat_attributes)
# ----------------------------------
#  Get Life Stages in LF Pathway
# ----------------------------------
if( species_x == "Spring Chinook"  ){
if(!is.na(habitat_attributes_spring_chinook_LF)){
habitat_attributes_species = unique( unlist(strsplit(habitat_attributes_spring_chinook_LF, ","))) }else{habitat_attributes_species = NA}
}
if( species_x == "Steelhead"){
if(!is.na(habitat_attributes_steelhead_LF)){
habitat_attributes_species = unique( unlist(strsplit(habitat_attributes_steelhead_LF, ","))) }else{habitat_attributes_species = NA}
}
if( species_x == "Bull Trout"){
if(!is.na(habitat_attributes_bull_trout_LF)){
habitat_attributes_species = unique( unlist(strsplit(habitat_attributes_bull_trout_LF, ","))) }else{habitat_attributes_species = NA}
}
habitat_attributes_species  = gsub(" ","",habitat_attributes_species)
# ----------------------------------
#  Overlap between life stage and HQ
# ----------------------------------
habitat_attributes_all = intersect(life_stage_habitat_attributes, habitat_attributes_species)
# ----------------------------------
#  Unacceptable and At Risk attributes
# ----------------------------------
if(species_x == "Spring Chinook"){
unique_unacceptable_attributes = unique_unacceptable_attributes_spring_chinook_LF
unique_at_risk_attributes = unique_at_risk_attributes_spring_chinook_LF
}
if(species_x == "Steelhead"){
unique_unacceptable_attributes = unique_unacceptable_attributes_steelhead_LF
unique_at_risk_attributes = unique_at_risk_attributes_steelhead_LF
}
if(species_x == "Bull Trout"){
unique_unacceptable_attributes = unique_unacceptable_attributes_bull_trout_LF
unique_at_risk_attributes = unique_at_risk_attributes_bull_trout_LF
}
# ------------------------------------------------------------
#    Loop through Each Habitat Attribute
# ------------------------------------------------------------
if( length(habitat_attributes_all) > 0 ){
for(habitat_attribute_x in habitat_attributes_all){
# ------------------------------------------------------------
#     Add Reach Information Data
# ------------------------------------------------------------
HQ_and_LF_combo_x = as.data.frame(Reach_Information_data[which(Reach_Information_data$ReachName == reach_x), columns_info])
# ------------------------------------------------------------
#     Add Habitat Attribute
# ------------------------------------------------------------
HQ_and_LF_combo_x$Habitat_Attribute = habitat_attribute_x
# ------------------------------------------------------------
#   List the species
# ------------------------------------------------------------
HQ_and_LF_combo_x$Species = species_x
# ------------------------------------------------------------
#     Add Life Stage
# ------------------------------------------------------------
HQ_and_LF_combo_x$Life_Stage = life_stage_x
# ------------------------------------------------------------
#     Add Pathway
# ------------------------------------------------------------
HQ_and_LF_combo_x$Action = "Address Limiting Factors"
# ------------------------------------------------------------
#    Action Categories
# ------------------------------------------------------------
action_category_x = FUNCTION_match_INDIVIDUAL_habitat_attributes_and_action_categories(habitat_attribute_x)
number_of_actions_x = length(action_category_x)
action_category_x = paste(action_category_x, collapse=",")
# ------ add to row ---------
HQ_and_LF_combo_x$Action_Categories = action_category_x
HQ_and_LF_combo_x$Number_of_Actions = number_of_actions_x
# ------------------------------------------------------------
#  Unacceptable Habitat Attributes (Yes/No)
# ------------------------------------------------------------
if(   length(grep(habitat_attribute_x, unique_at_risk_attributes)) > 0  ){
HQ_and_LF_combo_x$Unacceptable_Habitat_Attributes_Presence = "yes"
}else{
HQ_and_LF_combo_x$Unacceptable_Habitat_Attributes_Presence = "no"
}
# ------------------------------------------------------------
#  At Risk Habitat Attributes (Yes/No)
# ------------------------------------------------------------
if( length(grep(habitat_attribute_x, unique_unacceptable_attributes)) > 0   ){
HQ_and_LF_combo_x$At_Risk_Habitat_Attributes_Presence = "yes"
}else{
HQ_and_LF_combo_x$At_Risk_Habitat_Attributes_Presence = "no"
}
# ------------------------------------------------------------
#  Metric a Core metric
# ------------------------------------------------------------
HQ_and_LF_combo_x$Core_Metric = FUNCTION_match_INDIVIDUAL_core_metrics_from_habitat_attributes_SPECIES(species_x, life_stage_x, habitat_attribute_x )
# ------------------------------------------------------------
#  Reach Rank (FOR NOW just putting a "1")
# ------------------------------------------------------------
HQ_and_LF_combo_x$Reach_Rank = 1
# ------------------------------------------------------------
# Combine with output data frame
# ------------------------------------------------------------
Reach_Habitat_Attribute_combined_output = rbind(Reach_Habitat_Attribute_combined_output, HQ_and_LF_combo_x)
}
}
}
}
# ------------------------------------------------------------
#       Get Unique Reaches
# ------------------------------------------------------------
unique_reaches = unique( c(HQ_spring_chinook$ReachName, HQ_steelhead$ReachName, HQ_bull_trout$ReachName,
LF_spring_chinook$ReachName, LF_steelhead$ReachName, LF_bull_trout$ReachName) )
# ------------------------------------------------------------
#      Loop through each Reach and combine data
# ------------------------------------------------------------
Reach_Habitat_Attribute_combined_output = c()
# --------------------- generate HQ and LF index ----------
if( any(HQ_spring_chinook$ReachName == reach_x)){ HQ_spring_chinook_index = which(HQ_spring_chinook$ReachName == reach_x) }else{HQ_spring_chinook_index = NA }
if( any(HQ_steelhead$ReachName == reach_x)){ HQ_steelhead_index = which(HQ_steelhead$ReachName == reach_x) }else{HQ_steelhead_index = NA}
if( any(HQ_bull_trout$ReachName == reach_x)){ HQ_bull_trout_index = which(HQ_bull_trout$ReachName == reach_x) }else{HQ_bull_trout_index = NA}
if( any(LF_spring_chinook$ReachName == reach_x)){ LF_spring_chinook_index = which(LF_spring_chinook$ReachName == reach_x) }else{LF_spring_chinook_index = NA}
if( any(LF_steelhead$ReachName == reach_x)){ LF_steelhead_index = which(LF_steelhead$ReachName == reach_x) }else{LF_steelhead_index = NA}
if( any(LF_bull_trout$ReachName == reach_x)){ LF_bull_trout_index = which(LF_bull_trout$ReachName == reach_x) }else{LF_bull_trout_index = NA}
# ------------------------------------------------------------
#     List Habitat Attributes for each species and life stage
# ------------------------------------------------------------
if(!is.na(HQ_spring_chinook_index)){ habitat_attributes_spring_chinook_HQ = HQ_spring_chinook$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes[HQ_spring_chinook_index]}else{habitat_attributes_spring_chinook_HQ = NA}
if(!is.na(HQ_steelhead_index)){ habitat_attributes_steelhead_HQ = HQ_steelhead$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes[HQ_steelhead_index]  }else{habitat_attributes_steelhead_HQ = NA}
if(!is.na(HQ_bull_trout_index)){ habitat_attributes_bull_trout_HQ = HQ_bull_trout$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes[HQ_bull_trout_index]  }else{habitat_attributes_bull_trout_HQ = NA}
if(!is.na(LF_spring_chinook_index[1])){  habitat_attributes_spring_chinook_LF = paste(LF_spring_chinook$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes[LF_spring_chinook_index], collapse=",")  }else{habitat_attributes_spring_chinook_LF = NA}
if(!is.na(LF_steelhead_index[1])){  habitat_attributes_steelhead_LF = paste(LF_steelhead$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes[LF_steelhead_index], collapse=",")[1] }else{habitat_attributes_steelhead_LF = NA}
if(!is.na(LF_bull_trout_index[1])){ habitat_attributes_bull_trout_LF = paste(LF_bull_trout$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes[LF_bull_trout_index], collapse=",")[1] }else{habitat_attributes_bull_trout_LF = NA}
# ------------------------------------------------------------
#     List All UNACCEPTABLE Habitat Attributes for each species and life stage
# ------------------------------------------------------------
# gsub function removes commas
if(!is.na(HQ_spring_chinook_index)){unique_unacceptable_attributes_spring_chinook_HQ = gsub(" ", "", HQ_spring_chinook$unacceptable_1_indiv_habitat_attributes[HQ_spring_chinook_index], fixed = TRUE) }else{unique_unacceptable_attributes_spring_chinook_HQ = NA}
if(!is.na(HQ_steelhead_index)){unique_unacceptable_attributes_steelhead_HQ = gsub(" ", "", HQ_steelhead$unacceptable_1_indiv_habitat_attributes[HQ_steelhead_index], fixed = TRUE) }else{unique_unacceptable_attributes_steelhead_HQ = NA}
if(!is.na(HQ_bull_trout_index)){unique_unacceptable_attributes_bull_trout_HQ = gsub(" ", "", HQ_bull_trout$unacceptable_1_indiv_habitat_attributes[HQ_bull_trout_index], fixed = TRUE) }else{unique_unacceptable_attributes_bull_trout_HQ = NA}
if(!is.na(LF_spring_chinook_index[1])){  unique_unacceptable_attributes_spring_chinook_LF = gsub(" ", "", paste(LF_spring_chinook$unacceptable_1_indiv_habitat_attributes[LF_spring_chinook_index], collapse=",")[1], fixed = TRUE) }else{unique_unacceptable_attributes_spring_chinook_LF = NA}
if(!is.na(LF_steelhead_index[1])){ unique_unacceptable_attributes_steelhead_LF = gsub(" ", "", paste(LF_steelhead$unacceptable_1_indiv_habitat_attributes[LF_steelhead_index], collapse=",")[1], fixed = TRUE) }else{unique_unacceptable_attributes_steelhead_LF = NA}
if(!is.na(LF_bull_trout_index[1])){ unique_unacceptable_attributes_bull_trout_LF = gsub(" ", "", paste(LF_bull_trout$unacceptable_1_indiv_habitat_attributes[LF_bull_trout_index], collapse=",")[1], fixed = TRUE) }else{unique_unacceptable_attributes_bull_trout_LF = NA}
# ------------------------------------------------------------
#     List All AT RISK Habitat Attributes for each species and life stage
# ------------------------------------------------------------
# gsub function removes commas
if(!is.na(HQ_spring_chinook_index)){unique_at_risk_attributes_spring_chinook_HQ = gsub(" ", "", HQ_spring_chinook$at_risk_2_or_3_indiv_habitat_attributes[HQ_spring_chinook_index], fixed = TRUE) }else{unique_at_risk_attributes_spring_chinook_HQ = NA}
if(!is.na(HQ_steelhead_index)){unique_at_risk_attributes_steelhead_HQ = gsub(" ", "", HQ_steelhead$at_risk_2_or_3_indiv_habitat_attributes[HQ_steelhead_index], fixed = TRUE) }else{unique_at_risk_attributes_steelhead_HQ = NA}
if(!is.na(HQ_bull_trout_index)){unique_at_risk_attributes_bull_trout_HQ = gsub(" ", "", HQ_bull_trout$at_risk_2_or_3_indiv_habitat_attributes[HQ_bull_trout_index], fixed = TRUE) }else{unique_at_risk_attributes_bull_trout_HQ = NA}
if(!is.na(LF_spring_chinook_index[1])){  unique_at_risk_attributes_spring_chinook_LF = gsub(" ", "", paste(LF_spring_chinook$at_risk_2_or_3_indiv_habitat_attributes[LF_spring_chinook_index], collapse=",")[1], fixed = TRUE) }else{unique_at_risk_attributes_spring_chinook_LF = NA}
if(!is.na(LF_steelhead_index[1])){ unique_at_risk_attributes_steelhead_LF = gsub(" ", "", paste(LF_steelhead$at_risk_2_or_3_indiv_habitat_attributes[LF_steelhead_index], collapse=",")[1], fixed = TRUE) }else{unique_at_risk_attributes_steelhead_LF = NA}
if(!is.na(LF_bull_trout_index[1])){ unique_at_risk_attributes_bull_trout_LF = gsub(" ", "", paste(LF_bull_trout$at_risk_2_or_3_indiv_habitat_attributes[LF_bull_trout_index], collapse=",")[1], fixed = TRUE) }else{unique_at_risk_attributes_bull_trout_LF = NA}
# ------------------------------------------------------------
#     List for Each species - IF just generating life stage "multiple" for HQ
# ------------------------------------------------------------
if(!is.na(HQ_spring_chinook_index)){ life_stages_spring_chinook_HQ = "multiple"  }else{ life_stages_spring_chinook_HQ = c()}
if(!is.na(LF_spring_chinook_index[1])){  life_stages_spring_chinook_LF = paste(LF_spring_chinook$life_stage[LF_spring_chinook_index], collapse=",")  }else{ life_stages_spring_chinook_LF = c()}
if(!is.na(HQ_steelhead_index)){ life_stages_steelhead_HQ = "multiple" }else{ life_stages_steelhead_HQ = c()}
if(!is.na(LF_steelhead_index[1])){  life_stages_steelhead_LF =paste(LF_steelhead$life_stage[LF_steelhead_index], collapse=",") }else{ life_stages_steelhead_LF = c()}
if(!is.na(HQ_bull_trout_index)){ life_stages_bull_trout_HQ = "multiple"  }else{ life_stages_bull_trout_HQ = c()}
if(!is.na(LF_bull_trout_index[1])){  life_stages_bull_trout_LF = paste(LF_bull_trout$life_stage[LF_bull_trout_index], collapse=",")   }else{ life_stages_bull_trout_LF = c()  }
# ------------------------------------------------------------
#    IF add life stages for Habitat Quality
# ------------------------------------------------------------
if(HQ_life_stages == "yes"){
# ------------- Spring Chinook -----------
if(!is.na(HQ_spring_chinook_index)){    life_stages_spring_chinook_HQ = FUNCTION_generate_life_stage_list_for_species_reach("Spring Chinook", reach_x)   }else{ life_stages_spring_chinook_HQ = c()}
if(!is.na(LF_spring_chinook_index[1])){  life_stages_spring_chinook_LF = paste(LF_spring_chinook$life_stage[LF_spring_chinook_index], collapse=",")  }else{ life_stages_spring_chinook_LF = c()}
# ----------- Steelhead -----------------
if(!is.na(HQ_steelhead_index)){    life_stages_steelhead_HQ = FUNCTION_generate_life_stage_list_for_species_reach("Steelhead", reach_x)        }else{ life_stages_steelhead_HQ = c()}
if(!is.na(LF_steelhead_index[1])){ life_stages_steelhead_LF =paste(LF_steelhead$life_stage[LF_steelhead_index], collapse=",") }else{ life_stages_steelhead_LF = c()}
# --------------- Bull Trout -------------
if(!is.na(HQ_bull_trout_index)){   life_stages_bull_trout_HQ = FUNCTION_generate_life_stage_list_for_species_reach("Bull Trout", reach_x)     }else{ life_stages_bull_trout_HQ = c()}
if(!is.na(LF_bull_trout_index[1])){   life_stages_bull_trout_LF = paste(LF_bull_trout$life_stage[LF_bull_trout_index], collapse=",")  }else{ life_stages_bull_trout_LF = c()  }
}
# ------------------------------------------------------------
#     List All Species in this Reach
# ------------------------------------------------------------
species_list = c()
if(  !is.na(HQ_spring_chinook_index) | !is.na(LF_spring_chinook_index[1]) ){
species_list = paste(species_list, "Spring Chinook", sep=",") }
if(  !is.na(HQ_steelhead_index) | !is.na(LF_steelhead_index[1]) ){
species_list = paste(species_list, "Steelhead", sep=",") }
if(  !is.na(HQ_bull_trout_index) | !is.na(LF_bull_trout_index[1]) ){
species_list = paste(species_list, "Bull Trout", sep=",") }
species_list = substr(species_list,2,nchar(species_list))   # remove the leading comma
species_list = unique( unlist(strsplit(paste(species_list, collapse=","), ",")) )
# -------------------------------------
species_list
life_stages_HQ
Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage_Species( Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info, exclude_bull_trout, HQ_life_stages)
View(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output)
# ---------------------------------------------------------------------------
#  Reduce for "Outward Facing" table in WebMap
# ---------------------------------------------------------------------------
colnames_outward_facing_WebMap = c("ReachName","Assessment.Unit","Species","Actions", "Life_Stages","Impaired_Habitat_Attributes_All_Species","Action_Categories_All_Species" )
colnames_reach_info = c("RM_Start", "RM_End")  # data that is in the reach geospatial layer to add to these data
colnames_outward_facing_WebMap_ORDER = c("ReachName","RM_Start", "RM_End","Assessment.Unit","Species","Actions", "Life_Stages","Impaired_Habitat_Attributes_All_Species","Action_Categories_All_Species" )
colnames_outward_facing_WebMap_UPDATED = c("Reach Name","River Mile - Start", "River Mile - End","Assessment Unit","Species","Action","Priority Life Stages","Limiting Factor","Action Categories" )
# ------- filter out for specific columns ----------
Restoration_Prioritization_Output_for_WebMap = Restoration_Prioritization_Output[,colnames_outward_facing_WebMap]
# ----------- add Reach information ------------
Restoration_Prioritization_Output_for_WebMap  =  FUNCTION_add_reach_information(Restoration_Prioritization_Output_for_WebMap,  colnames_reach_info)
# ------------ do MISC processing for output ---------
Restoration_Prioritization_Output_for_WebMap = FUNCTION_prepare_outward_facing_table( Restoration_Prioritization_Output_for_WebMap , colnames_outward_facing_WebMap_ORDER, colnames_outward_facing_WebMap_UPDATED, exclude_bull_trout)
colnames(Reach_Habitat_Attribute_Life_Stage_Restoration_Output)
# ------------- Output for WebMap ------------------
# ------- change "Habitat_Attribute" name to "Limiting_Factor"
colnames(Reach_Habitat_Attribute_Life_Stage_Restoration_Output)[colnames(Reach_Habitat_Attribute_Life_Stage_Restoration_Output) == "Habitat_Attribute"] <- "Limiting_Factor"
output_path_x =  paste(output_path,'Reach_Habitat_Attribute_Life_Stage_Restoration_Output.xlsx', sep="")
write_xlsx(Reach_Habitat_Attribute_Life_Stage_Restoration_Output,output_path_x )
# ------------- Output for WebMap ------------------
colnames(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output)[colnames(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output) == "Habitat_Attribute"] <- "Limiting_Factor"
output_path_x =  paste(output_path,'Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output.xlsx', sep="")
write_xlsx(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output,output_path_x )
# ----------- Outward Facing Table (pops up when reach is clicked on) -----------
output_path_x =  paste(output_path,'Restoration_Prioritization_Output_for_WebMap_Table.xlsx', sep="")
write_xlsx(Restoration_Prioritization_Output_for_WebMap,output_path_x )
# ----------- Habitat Attributes Table w/ Ratings (to put in WebMap) -----------
output_path_x =  paste(output_path,'Habitat_Attributes_Ratings_Table.xlsx', sep="")
write_xlsx(Habitat_Attributes_Ratings_Table,output_path_x )
FUNCTION_combine_across_Unacceptable_and_AtRisk = function(HQ_LF_Unacceptable, HQ_LF_At_Risk, HQ_LF_Both, HQ_both, columns_info, exclude_bull_trout, HQ_add_life_stage){
# ------------------------------------------------------------
#       Get Unique Reaches
# ------------------------------------------------------------
# ------------------------------------------------------------
#      Loop through each Reach and combine data
# ------------------------------------------------------------
Unacceptable_AtRisk_combined_output = c()
for(reach_x in HQ_LF_Both$ReachName){
# --------------------- generate HQ and LF index ----------
HQ_LF_Both_index = which(HQ_LF_Both$ReachName == reach_x)
if(any(HQ_LF_Unacceptable$ReachName == reach_x)){ HQ_LF_Unacceptable_index = which(HQ_LF_Unacceptable$ReachName == reach_x) }
if(any(HQ_LF_At_Risk$ReachName == reach_x)){ HQ_LF_At_Risk_index = which(HQ_LF_At_Risk$ReachName == reach_x) }
HQ_Both_index  = which(HQ_Both$ReachName == reach_x) # data frame with just HQ pathway
# ----------- IF excluding bull trout and only bull trout pathway - SKIP this ---------
if(exclude_bull_trout == "yes" & (HQ_LF_Both[HQ_LF_Both_index,"Pathways"] == "HQ_bull_trout" |   HQ_LF_Both[HQ_LF_Both_index,"Pathways"] == "LF_bull_trout" )  ){
next
}
# ------------------------------------------------------------
#     Add Reach Information Data
# ------------------------------------------------------------
HQ_and_LF_combo_x = as.data.frame(HQ_LF_Both[HQ_LF_Both_index, columns_info])
# ------------------------------------------------------------
#    Pathways (list and yes/no)
# ------------------------------------------------------------
# ------------- get pathways --------
pathway_output = HQ_LF_Both[HQ_LF_Both_index, "Pathways"]
# ----- if excluding bull trout -------
if(exclude_bull_trout == "yes"){
pathway_output = gsub("HQ_bull_trout","",pathway_output)
pathway_output = gsub("LF_bull_trout","",pathway_output)
if(substr(pathway_output, nchar(pathway_output), nchar(pathway_output)) == ","){
pathway_output = substr(pathway_output,1,nchar(pathway_output)-1)
}
if(substr(pathway_output, 1, 1) == ","){
pathway_output = substr(pathway_output,2,nchar(pathway_output))
}
pathway_output = gsub(",,",",",pathway_output)
}
HQ_and_LF_combo_x$Pathways = pathway_output
HQ_and_LF_combo_x$Number_of_Pathways = HQ_LF_Both[HQ_LF_Both_index, "Number_of_Pathways"]
# ---------------- Generate General "Actions" list ------------------
general_actions = c()
if( length(grep("HQ",HQ_and_LF_combo_x$Pathways)) > 0){
general_actions = paste( general_actions , "Restore Reach Function", sep=", ")
}
if( length(grep("LF",HQ_and_LF_combo_x$Pathways)) > 0){
general_actions = paste( general_actions , "Address Limiting Factors", sep=", ")
}
general_actions = substr(general_actions,3,nchar(general_actions)) # remove leading comma and space
HQ_and_LF_combo_x$Actions = general_actions
pathways_x =  unique( unlist(strsplit(HQ_and_LF_combo_x$Pathways, ",")) )
# ------------- do yes no for pathways --------
if(  grepl( "HQ_spring_chinook", HQ_and_LF_combo_x$Pathways, fixed = TRUE)  ){ HQ_spring_chinook_yesno = "yes" }else{ HQ_spring_chinook_yesno = "no" }
if(  grepl( "HQ_steelhead", HQ_and_LF_combo_x$Pathways, fixed = TRUE)  ){ HQ_steelhead_yesno = "yes" }else{ HQ_steelhead_yesno = "no" }
if(  grepl( "HQ_bull_trout", HQ_and_LF_combo_x$Pathways, fixed = TRUE)  ){ HQ_bull_trout_yesno = "yes" }else{ HQ_bull_trout_yesno = "no" }
if(  grepl( "LF_spring_chinook", HQ_and_LF_combo_x$Pathways, fixed = TRUE)  ){ LF_spring_chinook_yesno = "yes" }else{ LF_spring_chinook_yesno = "no" }
if(  grepl( "LF_steelhead", HQ_and_LF_combo_x$Pathways, fixed = TRUE)  ){ LF_steelhead_yesno = "yes" }else{ LF_steelhead_yesno = "no" }
if(  grepl( "LF_bull_trout", HQ_and_LF_combo_x$Pathways, fixed = TRUE)  ){ LF_bull_trout_yesno = "yes" }else{ LF_bull_trout_yesno = "no" }
# ----- if excluding bull trout --------
if(exclude_bull_trout == "yes"){
HQ_bull_trout_yesno = "no"
LF_bull_trout_yesno = "no"
}
pathway_yes_no_df = t(  as.data.frame( c(HQ_spring_chinook_yesno, HQ_steelhead_yesno, HQ_bull_trout_yesno,
LF_spring_chinook_yesno, LF_steelhead_yesno, LF_bull_trout_yesno)  ) )
colnames(pathway_yes_no_df) = c(  "HabitatQuality_Spring_Chinook_Pathway",	"HabitatQuality_Steelhead_Pathway",	"HabitatQuality_BullTrout_Pathway",
"LimitingFactor_Spring_Chinook_Pathway",	"LimitingFactor_Steelhead_Pathway",	"LimitingFactor_BullTrout_Pathway" )
row.names(pathway_yes_no_df) = row.names(HQ_and_LF_combo_x)
HQ_and_LF_combo_x = cbind(HQ_and_LF_combo_x, pathway_yes_no_df)
# ----------------- add Barriers if present -------------
Pathway_Barrier_Prioritization = "no" # run other function to add this post-hoc
HQ_and_LF_combo_x$Barrier_Prioritization_Pathway = Pathway_Barrier_Prioritization
# ------------------------------------------------------------
#   List the species
# ------------------------------------------------------------
species_x = c()
# ------------- do yes no for pathways --------
if(  grepl( "HQ_spring_chinook", HQ_and_LF_combo_x$Pathways, fixed = TRUE) |  grepl( "LF_spring_chinook", HQ_and_LF_combo_x$Pathways, fixed = TRUE) ){
species_x = paste(species_x, "Spring_Chinook", sep=",") }
if(  grepl( "HQ_steelhead", HQ_and_LF_combo_x$Pathways, fixed = TRUE) |  grepl( "LF_steelhead", HQ_and_LF_combo_x$Pathways, fixed = TRUE) ){
species_x = paste(species_x, "Steelhead", sep=",") }
# ---- only write if bull trout not excluded ------
if(exclude_bull_trout == "no"){
if(  grepl( "HQ_bull_trout", HQ_and_LF_combo_x$Pathways, fixed = TRUE) |  grepl( "LF_bull_trout", HQ_and_LF_combo_x$Pathways, fixed = TRUE) ){
species_x = paste(species_x, "Bull_Trout", sep=",") }
}
species_x = substr(species_x,2,nchar(species_x))   # remove the leading comma
# ------- add to output --------------
HQ_and_LF_combo_x$Species = species_x
# ------------------------------------------------------------
#  Benefit all species and/or benefits Spring Chinook
# ------------------------------------------------------------
# ------------- Benefit all species ----------
HQ_and_LF_combo_x$SprCh_STLD_BullTr_All_Benefit = HQ_LF_Both[HQ_LF_Both_index, "SprCh_STLD_BullTr_All_Present_Yes_No"]
# ------------- Benefit Spring Chinook ----------
HQ_and_LF_combo_x$Spring_Chinook_Benefit = HQ_LF_Both[HQ_LF_Both_index, "Spring_Chinook_Actions_Present_Yes_No"]
# ------------------------------------------------------------
#   Generate Species-specific columns of habitat attributes and actions
# ------------------------------------------------------------
# ---------- Spring Chinook ----------------
HQ_and_LF_combo_x$Spring_Chinook_Habitat_Attributes = HQ_LF_Both$Impaired_Habitat_Attributes_SpringChinook[HQ_LF_Both_index]
HQ_and_LF_combo_x$Spring_Chinook_Actions = HQ_LF_Both$Action_Categories_SpringChinook[HQ_LF_Both_index]
# ---------- Steelhead ----------------
HQ_and_LF_combo_x$Steelhead_Habitat_Attributes = HQ_LF_Both$Impaired_Habitat_Attributes_Steelhead[HQ_LF_Both_index]
HQ_and_LF_combo_x$Steelhead_Actions = HQ_LF_Both$Action_Categories_Steelhead[HQ_LF_Both_index]
# ---------- Bull Trout ----------------
if(exclude_bull_trout == "no"){
HQ_and_LF_combo_x$Bull_Trout_Habitat_Attributes = HQ_LF_Both$Impaired_Habitat_Attributes_BullTrout[HQ_LF_Both_index]
HQ_and_LF_combo_x$Bull_Trout_Actions = HQ_LF_Both$Action_Categories_BullTrout[HQ_LF_Both_index]
}else{
HQ_and_LF_combo_x$Bull_Trout_Habitat_Attributes = NA
HQ_and_LF_combo_x$Bull_Trout_Actions = NA
}
# ------------------------------------------------------------
#   List all life stages
# ------------------------------------------------------------
HQ_and_LF_combo_x$Life_Stages = HQ_LF_Both[HQ_LF_Both_index, "Life_Stages"]
# ------------------------------------------------------------
#   List all actions
# ------------------------------------------------------------
HQ_and_LF_combo_x$Action_Categories_All_Species = HQ_LF_Both$Action_Categories_All_Species[HQ_LF_Both_index]
# ------------------------------------------------------------
#  Number of all actions
# ------------------------------------------------------------
HQ_and_LF_combo_x$Number_Action_Categories_All_Species = HQ_LF_Both$Number_Action_Categories_All_Species[HQ_LF_Both_index]
# ------------------------------------------------------------
#  All Habitat Attributes
# ------------------------------------------------------------
HQ_and_LF_combo_x$Impaired_Habitat_Attributes_All_Species = HQ_LF_Both$Impaired_Habitat_Attributes_All_Species[HQ_LF_Both_index]
# ------------------------------------------------------------
#  Number of all Habitat Attributes
# ------------------------------------------------------------
HQ_and_LF_combo_x$Number_Impaired_Habitat_Attributes_All_Species = HQ_LF_Both$Number_Impaired_Habitat_Attributes_All_Species[HQ_LF_Both_index]
# ------------------------------------------------------------
#  Unacceptable Habitat Attributes (Yes/No)
# ------------------------------------------------------------
if( reach_x == HQ_LF_Unacceptable$ReachName[HQ_LF_Unacceptable_index]   ){
HQ_and_LF_combo_x$Unacceptable_Habitat_Attributes_Presence = "yes"
}else{
HQ_and_LF_combo_x$Unacceptable_Habitat_Attributes_Presence = "no"
}
# ------------------------------------------------------------
#  Unacceptable Habitat Attributes
# ------------------------------------------------------------
if( reach_x == HQ_LF_Unacceptable$ReachName[HQ_LF_Unacceptable_index]   ){
HQ_and_LF_combo_x$Unacceptable_Impaired_Habitat_Attributes_All_Species = HQ_LF_Unacceptable$Impaired_Habitat_Attributes_All_Species[HQ_LF_Unacceptable_index]
}else{
HQ_and_LF_combo_x$Unacceptable_Impaired_Habitat_Attributes_All_Species = NA
}
# ------------------------------------------------------------
#  Number of Unacceptable Habitat Attributes
# ------------------------------------------------------------
if( reach_x == HQ_LF_Unacceptable$ReachName[HQ_LF_Unacceptable_index]   ){
HQ_and_LF_combo_x$Unacceptable_Number_Impaired_Habitat_Attributes_All_Species = HQ_LF_Unacceptable$Number_Impaired_Habitat_Attributes_All_Species[HQ_LF_Unacceptable_index]
}else{
HQ_and_LF_combo_x$Unacceptable_Number_Impaired_Habitat_Attributes_All_Species = NA
}
# ------------------------------------------------------------
#  At Risk Habitat Attributes (Yes/No)
# ------------------------------------------------------------
if( reach_x == HQ_LF_At_Risk$ReachName[HQ_LF_At_Risk_index]   ){
HQ_and_LF_combo_x$At_Risk_Habitat_Attributes_Presence = "yes"
}else{
HQ_and_LF_combo_x$At_Risk_Habitat_Attributes_Presence = "no"
}
# ------------------------------------------------------------
#  At Risk Habitat Attributes
# ------------------------------------------------------------
if( reach_x == HQ_LF_At_Risk$ReachName[HQ_LF_At_Risk_index]   ){
HQ_and_LF_combo_x$At_Risk_Impaired_Habitat_Attributes_All_Species = HQ_LF_At_Risk$Impaired_Habitat_Attributes_All_Species[HQ_LF_At_Risk_index]
}else{
HQ_and_LF_combo_x$At_Risk_Impaired_Habitat_Attributes_All_Species = NA
}
# ------------------------------------------------------------
#  Number of At Risk Habitat Attributes
# ------------------------------------------------------------
if( reach_x == HQ_LF_At_Risk$ReachName[HQ_LF_At_Risk_index]   ){
HQ_and_LF_combo_x$At_Risk_Number_Impaired_Habitat_Attributes_All_Species = HQ_LF_At_Risk$Number_Impaired_Habitat_Attributes_All_Species[HQ_LF_At_Risk_index]
}else{
HQ_and_LF_combo_x$At_Risk_Number_Impaired_Habitat_Attributes_All_Species = NA
}
# ------------------------------------------------------------
#  IF excluding Bull Trout, remove the references and life stages
# ------------------------------------------------------------
if(exclude_bull_trout == "yes" &
( HQ_and_LF_combo_x$HabitatQuality_BullTrout_Pathway  == "yes" |  HQ_and_LF_combo_x$LimitingFactor_BullTrout_Pathway == "yes"  )    ){
# --------------------- if the only pathway is HQ or LF Bull Trout - remove the row ------------------
if(
HQ_and_LF_combo_x$HabitatQuality_Spring_Chinook_Pathway == "no" &
HQ_and_LF_combo_x$HabitatQuality_Steelhead_Pathway == "no" &
HQ_and_LF_combo_x$LimitingFactor_Spring_Chinook_Pathway  == "no" &
HQ_and_LF_combo_x$LimitingFactor_Steelhead_Pathway == "no" &
HQ_and_LF_combo_x$Barrier_Prioritization_Pathway == "no"
){
do_not_write_row_since_only_bull_trout = "yes"
}else{
do_not_write_row_since_only_bull_trout = "no"
}
}else{
do_not_write_row_since_only_bull_trout = "no"
}
# ------------------------------------------------------------
#   add HQ life stages (if HQ_add_life_stage is yes)
# ------------------------------------------------------------
if(HQ_add_life_stage  == "yes"){
# ---- pull the reach's row in HQ Pathway data frame ---------
HQ_Both_row = HQ_Both[HQ_Both_index, ]
# --------------------- Pathways------------------
pathways_x_list = unlist(strsplit(HQ_and_LF_combo_x$Pathways, ","))
pathway_list_letters = substr(pathways_x_list, 1, 2)
# ------------- unique species ---------
species_list = substr(pathways_x_list, 4, nchar(pathways_x_list)) # unique species
# ------------ IF Habitat Quality Pathways presence -------------------
if( any(pathway_list_letters == "HQ") ){
# ---------- loop through each species in HQ pathway ---------
life_stages_all_output = c()
for(species_x_HQ in species_list){
life_stages_all = FUNCTION_output_life_stages_based_on_species_and_life_stage_presence(species_x_HQ, reach_x, HQ_Both_row)
life_stages_all_output = paste(life_stages_all_output,life_stages_all, sep="," )
}
life_stages_all_output = substr(life_stages_all_output, 2, nchar(life_stages_all_output))
life_stages_all_output = unique(unlist(strsplit(life_stages_all_output, ",")))
life_stages_all_output = paste(life_stages_all_output, collapse=",")
}
# --------------- update life stages ----------------
# ------ if life stages list is NA ------
if(is.na(HQ_and_LF_combo_x$Life_Stages)){
HQ_and_LF_combo_x$Life_Stages = life_stages_all_output
# ------- if life stages exist already -----
}else{
life_stages_updated = paste(HQ_and_LF_combo_x$Life_Stages,life_stages_all_output, sep="," )
life_stages_updated = unique(unlist(strsplit(life_stages_updated, ",")))
life_stages_updated = paste(life_stages_updated, collapse=",")
HQ_and_LF_combo_x$Life_Stages =  life_stages_updated
}
}
# ------------------------------------------------------------
#  Add to Output
# ------------------------------------------------------------
# if do_not_write_row_since_only_bull_trout = "yes" - row is ONLY from bull trout
if(do_not_write_row_since_only_bull_trout == "no"){
Unacceptable_AtRisk_combined_output = rbind(Unacceptable_AtRisk_combined_output, HQ_and_LF_combo_x)
}
}
return(Unacceptable_AtRisk_combined_output)
}
# Note - only include the Habitat_Quality_Restoration_Unacceptable_and_At_Risk
Restoration_Prioritization_Output = FUNCTION_combine_across_Unacceptable_and_AtRisk(Restoration_Unacceptable, Restoration_At_Risk, Restoration_Unacceptable_and_At_Risk, Habitat_Quality_Restoration_Unacceptable_and_At_Risk, columns_info, exclude_bull_trout, HQ_add_life_stage)
# ---------------------------------------------------------------------------
#  Add Barrier Prioritization Info
# ---------------------------------------------------------------------------
columns_info = c( "ReachName","Basin","Assessment.Unit" ) # columns to automatically add to beginning (left side) of output
Restoration_Prioritization_Output = FUNCTION_Add_Barrier_Data(Restoration_Prioritization_Output, Barriers_Pathways_Data, exclude_bull_trout)
# ---------------------------------------------------------------------------
#  Reduce for "Outward Facing" table in WebMap
# ---------------------------------------------------------------------------
colnames_outward_facing_WebMap = c("ReachName","Assessment.Unit","Species","Actions", "Life_Stages","Impaired_Habitat_Attributes_All_Species","Action_Categories_All_Species" )
colnames_reach_info = c("RM_Start", "RM_End")  # data that is in the reach geospatial layer to add to these data
colnames_outward_facing_WebMap_ORDER = c("ReachName","RM_Start", "RM_End","Assessment.Unit","Species","Actions", "Life_Stages","Impaired_Habitat_Attributes_All_Species","Action_Categories_All_Species" )
colnames_outward_facing_WebMap_UPDATED = c("Reach Name","River Mile - Start", "River Mile - End","Assessment Unit","Species","Action","Priority Life Stages","Limiting Factor","Action Categories" )
# ------- filter out for specific columns ----------
Restoration_Prioritization_Output_for_WebMap = Restoration_Prioritization_Output[,colnames_outward_facing_WebMap]
# ----------- add Reach information ------------
Restoration_Prioritization_Output_for_WebMap  =  FUNCTION_add_reach_information(Restoration_Prioritization_Output_for_WebMap,  colnames_reach_info)
# ------------ do MISC processing for output ---------
Restoration_Prioritization_Output_for_WebMap = FUNCTION_prepare_outward_facing_table( Restoration_Prioritization_Output_for_WebMap , colnames_outward_facing_WebMap_ORDER, colnames_outward_facing_WebMap_UPDATED, exclude_bull_trout)
unique(Restoration_Prioritization_Output_for_WebMap$Action)
# ----------- Outward Facing Table (pops up when reach is clicked on) -----------
output_path_x =  paste(output_path,'Restoration_Prioritization_Output_for_WebMap_Table.xlsx', sep="")
write_xlsx(Restoration_Prioritization_Output_for_WebMap,output_path_x )
