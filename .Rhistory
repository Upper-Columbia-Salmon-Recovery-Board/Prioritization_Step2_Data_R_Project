}else if(length(basins)==3){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter((Basin==basins[1]) | (Basin==basins[2]) | (Basin==basins[3]) )
}else if(length(basins)==4){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter((Basin==basins[1]) | (Basin==basins[2]) | (Basin==basins[3])  | (Basin==basins[4]) )
}
print(paste("Total reaches after only having basins of interest: ", nrow(Species_Reach_Information_data), sep=""))
# ---------- AU Ranks data frame for this species ---------
Species_AU_Ranks_data_Spring_Chinook = AU_Ranks_data
Species_AU_Ranks_data_Steelhead = AU_Ranks_data
Species_AU_Ranks_data_Steelhead_Okanogan = AU_Ranks_Okanogan
if(exclude_bull_trout == "no"){
Species_AU_Ranks_data_Bull_Trout = AU_Ranks_data
}
#  ---------------------------------------------------------------------------------
#            Filter out to only have Species-specific reaches
#  ---------------------------------------------------------------------------------
# -------------------- SPRING CHINOOK: add additional column for this particular species reach presence ---------------
Spring_Chinook_Reach_Information_data = Species_Reach_Information_data
Spring_Chinook_Reach_Information_data$Species_Reaches = Spring_Chinook_Reach_Information_data[species_reach_Spring_Chinook]
# ----------------------- filter out for only reaches with this species --------------
Spring_Chinook_Reach_Information_data = Spring_Chinook_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
print(paste("Total reaches after Spring Chinook species-reach filter: ", nrow(Spring_Chinook_Reach_Information_data), sep=""))
# -------------------- STEELHEAD: add additional column for this particular species reach presence ---------------
Steelhead_Reach_Information_data =  Species_Reach_Information_data
# ---------------------- start data frame that outputs results for all reaches -------------
Output_Steelhead_All = Reach_Information_data[,c(1:3,5)]
Steelhead_Reach_Information_data$Species_Reaches = Steelhead_Reach_Information_data[species_reach_Steelhead]
# ----------------------- filter out for only reaches with this species --------------
Steelhead_Reach_Information_data = Steelhead_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
print(paste("Total reaches after Steelhead species-reach filter: ", nrow(Steelhead_Reach_Information_data), sep=""))
if(exclude_bull_trout == "no"){
# -------------------- BULL TROUT: add additional column for this particular species reach presence ---------------
Bull_Trout_Reach_Information_data = Species_Reach_Information_data
Bull_Trout_Reach_Information_data$Species_Reaches = Bull_Trout_Reach_Information_data[species_reach_Bull_Trout]
# ----------------------- filter out for only reaches with this species --------------
Bull_Trout_Reach_Information_data = Bull_Trout_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
print(paste("Total reaches after Bull Trout species-reach filter: ", nrow(Bull_Trout_Reach_Information_data), sep=""))
}
# ---------------------------------------------------------------------------------------------------------------
#
#     Priority Assessment Unit Filter
#
# ---------------------------------------------------------------------------------------------------------------
#  ---------------------------------------------------------------------------------
#            Filter out to select for AU rank - RESTORATION
#  ---------------------------------------------------------------------------------
# ------------------- establish AU Rank ------------------
AU_Rank_Restoration = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "AU_Ranking" &
Restoration_Reach_Scoring$Category_Stage == "filter"),"Category"]
# --------------------------- SPRING CHINOOK -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Spring_Chinook ["Species_AU_Ranks"] = Species_AU_Ranks_data_Spring_Chinook [AU_rank_name_restoration_Spring_Chinook]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Spring_Chinook_restoration = Species_AU_Ranks_data_Spring_Chinook  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Spring_Chinook_Reach_Information_data_restoration = Spring_Chinook_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Spring_Chinook_restoration$`Assessment Unit`)
print(paste("Spring Chinook Restoration - total AU rank filter: ", nrow(Spring_Chinook_Reach_Information_data_restoration), sep=""))
# --------------------------- STEELHEAD -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead ["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead [AU_rank_name_restoration_Steelhead]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_restoration = Species_AU_Ranks_data_Steelhead  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_restoration = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_restoration$`Assessment Unit`)
# ---------------- add Okanogan -------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead_Okanogan["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead_Okanogan[AU_rank_name_restoration_Steelhead_Okanogan]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_restoration_Okanogan = Species_AU_Ranks_data_Steelhead_Okanogan %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_restoration_Okanogan = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_restoration_Okanogan$`EDT AU`)
# -------- add to data frame that includes all reaches -----
AU_Rank_Data = Species_AU_Ranks_data_Steelhead_Okanogan[,c("EDT AU","AU Restoration Rank")]
colnames(AU_Rank_Data)[1] = "Assessment.Unit"
AU_Rank_Data2 = Species_AU_Ranks_data_Steelhead [,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data2) = c("Assessment.Unit", colnames(AU_Rank_Data)[2])
AU_Rank_Data = rbind(AU_Rank_Data, AU_Rank_Data2)
Output_Steelhead_All = merge(Output_Steelhead_All  ,AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
# ------------------- combine Wen-Ent-Methow and Okanogan ------------
Steelhead_Reach_Information_data_restoration = rbind(Steelhead_Reach_Information_data_restoration, Steelhead_Reach_Information_data_restoration_Okanogan)
print(paste("Steelhead Restoration - total AU rank filter: ", nrow(Steelhead_Reach_Information_data_restoration), sep=""))
# --------------------------- BULL TROUT -----------------
if(exclude_bull_trout == "no"){
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Bull_Trout ["Species_AU_Ranks"] = Species_AU_Ranks_data_Bull_Trout [AU_rank_name_restoration_Bull_Trout]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Bull_Trout_restoration = Species_AU_Ranks_data_Bull_Trout  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Bull_Trout_Reach_Information_data_restoration = Bull_Trout_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Bull_Trout_restoration$`Assessment Unit`)
print(paste("Bull Trout Restoration - total AU rank filter: ", nrow(Bull_Trout_Reach_Information_data_restoration), sep=""))
}
#  ---------------------------------------------------------------------------------
#            Filter out to select for AU rank - PROTECTION
#  ---------------------------------------------------------------------------------
# ------------------- establish AU Rank ------------------
AU_Rank_Protection = Protection_Reach_Scoring[which(Protection_Reach_Scoring$Indicator == "AU_Ranking"  &
Protection_Reach_Scoring$Category_Stage == "filter"),"Category"]
# --------------------------- SPRING CHINOOK -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Spring_Chinook ["Species_AU_Ranks"] = Species_AU_Ranks_data_Spring_Chinook [AU_rank_name_protection_Spring_Chinook]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Spring_Chinook_protection = Species_AU_Ranks_data_Spring_Chinook  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Protection)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Spring_Chinook_Reach_Information_data_protection = Spring_Chinook_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Spring_Chinook_protection$`Assessment Unit`)
print(paste("Spring Chinook Protection - total AU rank filter: ", nrow(Spring_Chinook_Reach_Information_data_protection), sep=""))
# --------------------------- STEELHEAD -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead ["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead [AU_rank_name_protection_Steelhead]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_protection = Species_AU_Ranks_data_Steelhead  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Protection)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_protection = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_protection$`Assessment Unit`)
# ---------------- add Okanogan -------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead_Okanogan["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead_Okanogan[AU_rank_name_protection_Steelhead_Okanogan]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_protection_Okanogan = Species_AU_Ranks_data_Steelhead_Okanogan %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Protection)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_protection_Okanogan = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_protection_Okanogan$`EDT AU`)
# ------------------- combine Wen-Ent-Methow and Okanogan ------------
Steelhead_Reach_Information_data_protection = rbind(Steelhead_Reach_Information_data_protection, Steelhead_Reach_Information_data_protection_Okanogan)
# -------- add to output that includes all reaches -----
AU_Rank_Data = Species_AU_Ranks_data_Steelhead_Okanogan[,c("EDT AU","AU Protection Rank")]
colnames(AU_Rank_Data)[1] = "Assessment.Unit"
AU_Rank_Data2 = Species_AU_Ranks_data_Steelhead [,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data2) = c("Assessment.Unit", colnames(AU_Rank_Data)[2])
AU_Rank_Data = rbind(AU_Rank_Data, AU_Rank_Data2)
Output_Steelhead_All = merge(Output_Steelhead_All  ,AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
print(paste("Steelhead Protection - total AU rank filter: ", nrow(Steelhead_Reach_Information_data_protection), sep=""))
# --------------------------- BULL TROUT -----------------
if(exclude_bull_trout == "no"){
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Bull_Trout ["Species_AU_Ranks"] = Species_AU_Ranks_data_Bull_Trout [AU_rank_name_protection_Bull_Trout]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Bull_Trout_protection = Species_AU_Ranks_data_Bull_Trout  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Protection)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Bull_Trout_Reach_Information_data_protection = Bull_Trout_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Bull_Trout_protection$`Assessment Unit`)
print(paste("Bull Trout Protection - total AU rank filter: ", nrow(Bull_Trout_Reach_Information_data_protection), sep=""))
}
#  ---------------------------------------------------------------------------------
#
#         Habitat Quality Pathway Filter
#
#  ---------------------------------------------------------------------------------
#  ---------------------------------------------------------------------------------
#            Filter out to select for Habitat Quality RESTORATION score
#  ---------------------------------------------------------------------------------
# ------------------- establish Habitat Quality Score cutoff ------------------
HQ_Score_Restoration_Reach_Scores = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "Habitat_Quality_Score" &
Restoration_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
# ----------------------- filter out for Habitat_Quality_Scores reaches with Habitat Quality Score criteria --------------
Habitat_Quality_Scores_Restoration = Habitat_Quality_Scores %>%
filter(HQ_Pct   >=   HQ_Score_Restoration_Reach_Scores$Category_lower_limit) %>%
filter(HQ_Pct   <  HQ_Score_Restoration_Reach_Scores$Category_upper_limit)
# -------------- prepare Okanogan - Steelhead --------------
Habitat_Quality_Scores_Restoration_Okanogan = Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']]
Habitat_Quality_Scores_Restoration_Okanogan = Habitat_Quality_Scores_Restoration_Okanogan[which(Habitat_Quality_Scores_Restoration_Okanogan$Basin == "Okanogan"),]
Habitat_Quality_Scores_Restoration_Okanogan_all = Habitat_Quality_Scores_Restoration_Okanogan
Habitat_Quality_Scores_Restoration_Okanogan = Habitat_Quality_Scores_Restoration_Okanogan %>%
filter(HQ_Pct   >=   HQ_Score_Restoration_Reach_Scores$Category_lower_limit) %>%
filter(HQ_Pct   <  HQ_Score_Restoration_Reach_Scores$Category_upper_limit)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
# ----------------------- SPRING CHINOOK ---------------------
Habitat_Quality_Pathway_Restoration_Spring_Chinook = Spring_Chinook_Reach_Information_data_restoration  %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Restoration$`ReachName`)
print(paste("Spring Chinook Restoration - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Restoration_Spring_Chinook), sep=""))
# ----------------------- STEELHEAD ---------------------
Habitat_Quality_Pathway_Restoration_Steelhead = Steelhead_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Restoration$`ReachName`)
# --------- add Okanogan values -------
Habitat_Quality_Pathway_Restoration_Steelhead_Okanogan = Steelhead_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Restoration_Okanogan$`ReachName`)
# -------- add to output for all reaches -----
# -------- add to total output -----
HQ_data_x = PRCNT_Habitat_Quality_Okanogan_EDT[,c("ReachName","HQ_Score")]
colnames(HQ_data_x) = c("ReachName", "HQ_Pct")
HQ_data_x2 = Habitat_Quality_Scores[which(Habitat_Quality_Scores$Basin != "Okanogan"),c("ReachName", "HQ_Pct")]
HQ_data_x = rbind(HQ_data_x, HQ_data_x2)
Output_Steelhead_All = merge(Output_Steelhead_All  ,HQ_data_x, by = "ReachName" )  # NOTE - some Okanogan reaches are not present in the EDT results HQ output (PRCNT_Habitat_Quality_Okanogan_EDT)
# --------- combine Wen-Ent-Wen and Okanogan -----------
Habitat_Quality_Pathway_Restoration_Steelhead = rbind(Habitat_Quality_Pathway_Restoration_Steelhead, Habitat_Quality_Pathway_Restoration_Steelhead_Okanogan)
print(paste("Steelhead Restoration - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Restoration_Steelhead), sep=""))
# ----------------------- BULL TROUT---------------------
if(exclude_bull_trout == "no"){
Habitat_Quality_Pathway_Restoration_Bull_Trout = Bull_Trout_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Restoration$`ReachName`)
print(paste("Steelhead Restoration - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Restoration_Bull_Trout), sep=""))
}
#  ---------------------------------------------------------------------------------
#            Filter out to select for Habitat Quality PROTECTION score
#  ---------------------------------------------------------------------------------
# ------------------- establish Habitat Quality Score cutoff ------------------
HQ_Score_Protection_Reach_Scores = Protection_Reach_Scoring[which(Protection_Reach_Scoring$Indicator == "Habitat_Quality_Score" &
Protection_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
# ----------------------- filter out for Habitat_Quality_Scores reaches with Habitat Quality Score criteria --------------
Habitat_Quality_Scores_Protection = Habitat_Quality_Scores %>%
filter(HQ_Pct   >=   HQ_Score_Protection_Reach_Scores$Category_lower_limit) %>%
filter(HQ_Pct   <  HQ_Score_Protection_Reach_Scores$Category_upper_limit)
# -------------- prepare Okanogan - Steelhead --------------
Habitat_Quality_Scores_Protection_Okanogan = Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']]
Habitat_Quality_Scores_Protection_Okanogan = Habitat_Quality_Scores_Protection_Okanogan[which(Habitat_Quality_Scores_Protection_Okanogan$Basin == "Okanogan"),]
Habitat_Quality_Scores_Protection_Okanogan = Habitat_Quality_Scores_Protection_Okanogan %>%
filter(HQ_Pct   >=   HQ_Score_Protection_Reach_Scores$Category_lower_limit) %>%
filter(HQ_Pct   <  HQ_Score_Protection_Reach_Scores$Category_upper_limit)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
# ----------------------- SPRING CHINOOK ---------------------
Habitat_Quality_Pathway_Protection_Spring_Chinook = Spring_Chinook_Reach_Information_data_protection %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Protection$`ReachName`)
print(paste("Spring Chinook Protection - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Protection_Spring_Chinook), sep=""))
# ----------------------- STEELHEAD ---------------------
Habitat_Quality_Pathway_Protection_Steelhead = Steelhead_Reach_Information_data_protection %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Protection$`ReachName`)
# --------- add Okanogan values -------
Habitat_Quality_Pathway_Protection_Steelhead_Okanogan = Steelhead_Reach_Information_data_protection %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Protection_Okanogan$`ReachName`)
# --------- combine Wen-Ent-Wen and Okanogan -----------
Habitat_Quality_Pathway_Protection_Steelhead = rbind(Habitat_Quality_Pathway_Protection_Steelhead, Habitat_Quality_Pathway_Protection_Steelhead_Okanogan)
print(paste("Steelhead Protection - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Protection_Steelhead), sep=""))
# -------- add to output for all reaches -----
# NOTE: no need to include here - since Restoration and Protection are driven by HQ_Pct
# ----------------------- BULL TROUT---------------------
if(exclude_bull_trout == "no"){
Habitat_Quality_Pathway_Protection_Bull_Trout = Bull_Trout_Reach_Information_data_protection %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Protection$`ReachName`)
print(paste("Steelhead Protection - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Protection_Bull_Trout), sep=""))
}
#  ---------------------------------------------------------------------------------
#
#         Limiting Factor for a High Priority Life Stage
#
#  ---------------------------------------------------------------------------------
#  ---------------------------------------------------------------------------------
#       Restoration - pull reaches with Limiting Factor for a High Priority Life Stage
#  ---------------------------------------------------------------------------------
# ----------------------- SPRING CHINOOK ---------------------
# ------------- only pull reaches with unacceptable attributes -----------
Limiting_Factor_Pathway_Spring_Chinook_Reach_Ranking = Limiting_Factor_Pathway_Spring_Chinook[["Limiting_Factor_Pathway_Restoration"]][nchar(Limiting_Factor_Pathway_Spring_Chinook[["Limiting_Factor_Pathway_Restoration"]]$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes)>0,]
# --------------- filter  the reaches ---------------
Limiting_Factor_Pathway_Restoration_Spring_Chinook = Spring_Chinook_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Limiting_Factor_Pathway_Spring_Chinook_Reach_Ranking$`ReachName`)
print(paste("Spring Chinook Restoration - total after LF score filter: ", nrow(Limiting_Factor_Pathway_Restoration_Spring_Chinook), sep=""))
# -------------- combine with HQ Pathway ------------
# ----------------------- STEELHEAD ---------------------
# ------------- only pull reaches with unacceptable attributes -----------
Limiting_Factor_Pathway_Steelhead_Reach_Ranking = Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]][nchar(Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]]$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes)>0,]
# --------------- filter  the reaches ---------------
Limiting_Factor_Pathway_Restoration_Steelhead = Steelhead_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Limiting_Factor_Pathway_Steelhead_Reach_Ranking$`ReachName`)
print(paste("Steelhead Restoration - total after LF score filter: ", nrow(Limiting_Factor_Pathway_Restoration_Steelhead), sep=""))
# -------- add to output of all reaches -----
# list "yes" or "no" if it has a limiting factor in a high priority life stage (maybe list the limiting factor OR life stage?)
# ----------- loop through each reach and identify if the reach has a limiting factor in a priority life stage
Output_LF_all = c()
for(reach_x in Output_Steelhead_All$ReachName){
# ------------------ pull the priority life stages in this reach -------------------
output_life_stages_x = FUNCTION_pull_High_Priority_Life_Stages_for_a_reach(reach_x, "Steelhead")
reach_in_LF_output = any(Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]]$ReachName == reach_x)
# --------------- IF there is a reach in the LF Pathway output -------------
if(reach_in_LF_output){
rows_x = which(Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]]$ReachName == reach_x)
#output_life_stages_x = c()
output_limiting_factor_x = c()
for(x in rows_x){
#output_life_stages_x = c(output_life_stages_x, Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]][x,c("life_stage")])
output_limiting_factor_x = c(output_limiting_factor_x, Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]][x,c("unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes")])
}
# ------------- IF reach is not in the LF pathway -----
}else{
#output_life_stages_x = "No Priority Life Stages with Limiting Factors"
output_limiting_factor_x = "No Priority Life Stages with Limiting Factors"
}
output_life_stages_x = paste(output_life_stages_x, collapse = ",")
output_limiting_factor_x = paste(output_limiting_factor_x, collapse = ",")
Output_LF_x = t(as.data.frame(c(reach_x,output_life_stages_x, output_limiting_factor_x )))
colnames(Output_LF_x) = c("ReachName", "Priority_Life_Stages_with_Limiting_Factors","Limiting_Factors_for_Priority_Life_Stages")
Output_LF_all = rbind(Output_LF_all, Output_LF_x )
}
# ------------- combine -------------
Output_Steelhead_All = merge(Output_Steelhead_All  ,Output_LF_all, by = "ReachName", all.x= TRUE )
# ------------- verify which reach passes HQ pathway or LF Pathway -------------
HQ_or_LF_filter_pass = c()
for(reach_x in Output_Steelhead_All$ReachName){
# -------------- pull row with reach --------
x = which(Output_Steelhead_All$ReachName == reach_x)
# --------------- if HQ score is NA, set to 100, otherwise, pull the HQ_Pct)
if(is.na(Output_Steelhead_All$HQ_Pct[x])){
HQ_Pct_x = 100
}else{
HQ_Pct_x = Output_Steelhead_All$HQ_Pct[x]
}
if(HQ_Pct_x< HQ_Score_Restoration_Reach_Scores$Category_upper_limit |
Output_Steelhead_All$Limiting_Factors_for_Priority_Life_Stages[x] != "No Priority Life Stages with Limiting Factors"){
output_x = t(as.data.frame(c(reach_x, "yes")))
}else{
output_x = t(as.data.frame(c(reach_x, "no")))
}
HQ_or_LF_filter_pass = rbind(HQ_or_LF_filter_pass, output_x)
}
colnames(HQ_or_LF_filter_pass) = c("ReachName","HQ_or_LF_filter_pass_yes_no")
# ------------- combine -------------
Output_Steelhead_All = merge(Output_Steelhead_All  ,HQ_or_LF_filter_pass, by = "ReachName", all.x= TRUE )
# ----------------------- BULL TROUT---------------------
if(exclude_bull_trout == "no"){
# ------------- only pull reaches with unacceptable attributes -----------
Limiting_Factor_Pathway_Bull_Trout_Reach_Ranking = Limiting_Factor_Pathway_Bull_Trout[["Limiting_Factor_Pathway_Restoration"]][nchar(Limiting_Factor_Pathway_Bull_Trout[["Limiting_Factor_Pathway_Restoration"]]$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes)>0,]
# --------------- filter  the reaches ---------------
Limiting_Factor_Pathway_Restoration_Bull_Trout = Bull_Trout_Reach_Information_data_restoration %>%
filter(ReachName   %in%  Limiting_Factor_Pathway_Bull_Trout_Reach_Ranking$`ReachName`)
print(paste("Bull Trout - total after LF score filter: ", nrow(Limiting_Factor_Pathway_Restoration_Bull_Trout), sep=""))
}
#  ---------------------------------------------------------------------------------
#       Protection - pull reaches with Limiting Factor for a High Priority Life Stage
#  ---------------------------------------------------------------------------------
# ----------------------- SPRING CHINOOK ---------------------
Limiting_Factor_Pathway_Protection_Spring_Chinook = Spring_Chinook_Reach_Information_data_protection %>%
filter(ReachName   %in%   Limiting_Factor_Pathway_Spring_Chinook[["Limiting_Factor_Pathway_Protection"]]$`ReachName`)
print(paste("Spring Chinook Restoration - total after LF score filter: ", nrow(Limiting_Factor_Pathway_Protection_Spring_Chinook), sep=""))
# -------------- combine with HQ Pathway ------------
# ----------------------- STEELHEAD ---------------------
Limiting_Factor_Pathway_Protection_Steelhead = Steelhead_Reach_Information_data_protection %>%
filter(ReachName   %in%   Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Protection"]]$`ReachName`)
print(paste("Steelhead Restoration - total after LF score filter: ", nrow(Limiting_Factor_Pathway_Protection_Steelhead), sep=""))
# ----------------------- BULL TROUT---------------------
if(exclude_bull_trout == "no"){
Limiting_Factor_Pathway_Protection_Bull_Trout = Bull_Trout_Reach_Information_data_protection %>%
filter(ReachName   %in%   Limiting_Factor_Pathway_Bull_Trout[["Limiting_Factor_Pathway_Protection"]]$`ReachName`)
print(paste("Bull Trout - total after LF score filter: ", nrow(Limiting_Factor_Pathway_Protection_Bull_Trout), sep=""))
}
#  ---------------------------------------------------------------------------------
#
#         Combine LF and HQ Pathway, and pull HQ Pct score
#
#  ---------------------------------------------------------------------------------
#  ---------------------------------------------------------------------------------
#                Restoration
#  ---------------------------------------------------------------------------------
# ------------------ Spring Chinook ---------------
HQ_and_LF_Pathway_Restoration_Spring_Chinook = rbind(Habitat_Quality_Pathway_Restoration_Spring_Chinook,  Limiting_Factor_Pathway_Restoration_Spring_Chinook)
HQ_and_LF_Pathway_Restoration_Spring_Chinook = HQ_and_LF_Pathway_Restoration_Spring_Chinook[!duplicated(HQ_and_LF_Pathway_Restoration_Spring_Chinook$ReachName), ]
# ------------------ Steelhead ---------------
HQ_and_LF_Pathway_Restoration_Steelhead = rbind(Habitat_Quality_Pathway_Restoration_Steelhead,  Limiting_Factor_Pathway_Restoration_Steelhead)
HQ_and_LF_Pathway_Restoration_Steelhead = HQ_and_LF_Pathway_Restoration_Steelhead[!duplicated(HQ_and_LF_Pathway_Restoration_Steelhead$ReachName), ]
# ------------------ Bull Trout ---------------
if(exclude_bull_trout == "no"){
HQ_and_LF_Pathway_Restoration_Bull_Trout = rbind(Habitat_Quality_Pathway_Restoration_Bull_Trout,  Limiting_Factor_Pathway_Restoration_Bull_Trout)
HQ_and_LF_Pathway_Restoration_Bull_Trout = HQ_and_LF_Pathway_Restoration_Bull_Trout[!duplicated(HQ_and_LF_Pathway_Restoration_Bull_Trout$ReachName), ]
}
#  ---------------------------------------------------------------------------------
#                Protection
#  ---------------------------------------------------------------------------------
# ------------------ Spring Chinook ---------------
HQ_and_LF_Pathway_Protection_Spring_Chinook = rbind(Habitat_Quality_Pathway_Protection_Spring_Chinook,  Limiting_Factor_Pathway_Protection_Spring_Chinook)
HQ_and_LF_Pathway_Protection_Spring_Chinook = HQ_and_LF_Pathway_Protection_Spring_Chinook[!duplicated(HQ_and_LF_Pathway_Protection_Spring_Chinook$ReachName), ]
# ------------------ Steelhead ---------------
HQ_and_LF_Pathway_Protection_Steelhead = rbind(Habitat_Quality_Pathway_Protection_Steelhead,  Limiting_Factor_Pathway_Protection_Steelhead)
HQ_and_LF_Pathway_Protection_Steelhead = HQ_and_LF_Pathway_Protection_Steelhead[!duplicated(HQ_and_LF_Pathway_Protection_Steelhead$ReachName), ]
# ------------------ Bull Trout ---------------
if(exclude_bull_trout == "no"){
HQ_and_LF_Pathway_Protection_Bull_Trout = rbind(Habitat_Quality_Pathway_Protection_Bull_Trout,  Limiting_Factor_Pathway_Protection_Bull_Trout)
HQ_and_LF_Pathway_Protection_Bull_Trout = HQ_and_LF_Pathway_Protection_Bull_Trout[!duplicated(HQ_and_LF_Pathway_Protection_Bull_Trout$ReachName), ]
}
#  ---------------------------------------------------------------------------------
#
#         Add HQ Scores (for scoring)
#
#  ---------------------------------------------------------------------------------
# ------------------ prep HQ data for merge -------
Habitat_Quality_Scores_for_merge = Habitat_Quality_Scores[,c("ReachName","HQ_Pct")]
# ---------- add the Okanogan ---------------
Habitat_Quality_Scores_for_merge_Okanogan = PRCNT_Habitat_Quality_Okanogan_EDT[,c("ReachName","HQ_Score")]
colnames(Habitat_Quality_Scores_for_merge_Okanogan)[2] = "HQ_Pct"
for(i in 1:nrow(Habitat_Quality_Scores_for_merge_Okanogan)){
x = which(Habitat_Quality_Scores_for_merge$ReachName == Habitat_Quality_Scores_for_merge_Okanogan$ReachName[i])
Habitat_Quality_Scores_for_merge$HQ_Pct[x] = Habitat_Quality_Scores_for_merge_Okanogan$HQ_Pct[i]
}
#  ---------------------------------------------------------------------------------
#                Restoration
#  ---------------------------------------------------------------------------------
# ------------------- Spring Chinook ---------------
HQ_and_LF_Pathway_Restoration_Spring_Chinook = merge(HQ_and_LF_Pathway_Restoration_Spring_Chinook, Habitat_Quality_Scores_for_merge, by="ReachName", all.y=FALSE)
# ------------------- Spring Chinook ---------------
HQ_and_LF_Pathway_Restoration_Steelhead = merge(HQ_and_LF_Pathway_Restoration_Steelhead, Habitat_Quality_Scores_for_merge, by="ReachName", all.y=FALSE)
# ------------------- Spring Chinook ---------------
if(exclude_bull_trout == "no"){
HQ_and_LF_Pathway_Restoration_Bull_Trout = merge(HQ_and_LF_Pathway_Restoration_Bull_Trout, Habitat_Quality_Scores_for_merge, by="ReachName", all.y=FALSE)
}
#  ---------------------------------------------------------------------------------
#                Protection
#  ---------------------------------------------------------------------------------
# ------------------- Spring Chinook ---------------
HQ_and_LF_Pathway_Protection_Spring_Chinook = merge(HQ_and_LF_Pathway_Protection_Spring_Chinook, Habitat_Quality_Scores_for_merge, by="ReachName", all.y=FALSE)
# ------------------- Spring Chinook ---------------
HQ_and_LF_Pathway_Protection_Steelhead = merge(HQ_and_LF_Pathway_Protection_Steelhead, Habitat_Quality_Scores_for_merge, by="ReachName", all.y=FALSE)
# ------------------- Spring Chinook ---------------
if(exclude_bull_trout == "no"){
HQ_and_LF_Pathway_Protection_Bull_Trout = merge(HQ_and_LF_Pathway_Protection_Bull_Trout, Habitat_Quality_Scores_for_merge, by="ReachName", all.y=FALSE)
}
#  ---------------------------------------------------------------------------------
#
#          Confinement
#
#  ---------------------------------------------------------------------------------
#  ---------------------------------------------------------------------------------
#           Reach Confinement  - RESTORATION
#  ---------------------------------------------------------------------------------
# ------------------------- Confinement criteria --------------------
Reach_Confinement_Criteria_Restoration_Reach_Rankings = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "Confinement" &
Restoration_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
# ----------------------- filter out for Confinement Scores --------------
Confinement_Scores_Restoration = Confinement_Scores %>%
filter(Confined_Pct    >=   Reach_Confinement_Criteria_Restoration_Reach_Rankings$Category_lower_limit  ) %>%
filter(Confined_Pct    <   Reach_Confinement_Criteria_Restoration_Reach_Rankings$Category_upper_limit)
# ------------------------ identify Reaches that pass through filter ----------
HQ_and_LF_Pathway_Restoration_Spring_Chinook = HQ_and_LF_Pathway_Restoration_Spring_Chinook %>%
filter(ReachName   %in%   Confinement_Scores_Restoration$`ReachName`)
HQ_and_LF_Pathway_Restoration_Steelhead = HQ_and_LF_Pathway_Restoration_Steelhead %>%
filter(ReachName   %in%   Confinement_Scores_Restoration$`ReachName`)
print(paste("HQ Pathway-RESTORATION Spring Chinook - total reaches after reach confinement filter: ", nrow(HQ_and_LF_Pathway_Restoration_Spring_Chinook), sep=""))
print(paste("HQ Pathway-RESTORATION Steelhead - total reaches after reach confinement filter: ", nrow(HQ_and_LF_Pathway_Restoration_Steelhead), sep=""))
if(exclude_bull_trout == "no"){
HQ_and_LF_Pathway_Restoration_Bull_Trout = HQ_and_LF_Pathway_Restoration_Bull_Trout %>%
filter(ReachName   %in%   Confinement_Scores_Restoration$`ReachName`)
print(paste("HQ Pathway-RESTORATION Bull Trout- total reaches after reach confinement filter: ", nrow(HQ_and_LF_Pathway_Restoration_Bull_Trout), sep=""))
}
# -------- add to total output -----
confinement_output = Confinement_Scores[,c("ReachName","Unconfined_Pct")]
confinement_output$Unconfined_more_than_0 = "yes"
confinement_output$Unconfined_more_than_0[which(confinement_output$Unconfined_Pct == 0)] = "no"
Output_Steelhead_All = merge(Output_Steelhead_All  ,confinement_output, by = "ReachName" )
#  ---------------------------------------------------------------------------------
#           Reach Confinement  - PROTECTION
#  ---------------------------------------------------------------------------------
# ------------------------- Confinement criteria --------------------
Reach_Confinement_Criteria_Protection_Reach_Rankings = Protection_Reach_Scoring[which(Protection_Reach_Scoring$Indicator == "Confinement" &
Protection_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
# ----------------------- filter out for Confinement scores --------------
Confinement_Scores_Protection = Confinement_Scores %>%
filter(Confined_Pct    >=   Reach_Confinement_Criteria_Protection_Reach_Rankings$Category_lower_limit  ) %>%
filter(Confined_Pct    <   Reach_Confinement_Criteria_Protection_Reach_Rankings$Category_upper_limit)
# ------------------------ identify Reaches that pass through filter ----------
HQ_and_LF_Pathway_Protection_Spring_Chinook = HQ_and_LF_Pathway_Protection_Spring_Chinook %>%
filter(ReachName   %in%   Confinement_Scores_Protection$`ReachName`)
HQ_and_LF_Pathway_Protection_Steelhead = HQ_and_LF_Pathway_Protection_Steelhead %>%
filter(ReachName   %in%   Confinement_Scores_Protection$`ReachName`)
print(paste("HQ Pathway-PROTECTION Spring Chinook - total reaches after reach confinement filter: ", nrow(HQ_and_LF_Pathway_Protection_Spring_Chinook), sep=""))
print(paste("HQ Pathway-PROTECTION Steelhead - total reaches after reach confinement filter: ", nrow(HQ_and_LF_Pathway_Protection_Steelhead), sep=""))
# ------------------  Bull Trout ----------
if(exclude_bull_trout == "no"){
HQ_and_LF_Pathway_Protection_Bull_Trout = HQ_and_LF_Pathway_Protection_Bull_Trout %>%
filter(ReachName   %in%   Confinement_Scores_Protection$`ReachName`)
print(paste("HQ Pathway-PROTECTION Bull Trout - total reaches after reach confinement filter: ", nrow(HQ_and_LF_Pathway_Protection_Bull_Trout), sep=""))
}
#  ---------------------------------------------------------------------------------
#
#        Number of Life Stages Filter (Restoration and Protection)
#
#  ---------------------------------------------------------------------------------
# ----------- generate life stage filter -------------
Life_Stage_Priorities_AU_and_Reach_data_FILTER_Restoration = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "Number_Life_Stage_Presence" &
Restoration_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
Life_Stage_Priorities_AU_and_Reach_data_FILTER_Protection = Protection_Reach_Scoring[which(Protection_Reach_Scoring$Indicator == "Number_Life_Stage_Presence" &
Protection_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
# -------------------- add additional column for this particular species life stage sum ---------------
Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column_Spring_Chinook"] = Life_Stage_Priorities_AU_and_Reach_data[life_stage_sum_column_Spring_Chinook]
Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column_Steelhead"] = Life_Stage_Priorities_AU_and_Reach_data[life_stage_sum_column_Steelhead]
if(exclude_bull_trout == "no"){
Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column_Bull_Trout"] = Life_Stage_Priorities_AU_and_Reach_data[life_stage_sum_column_Bull_Trout]
}
# ----------------------- filter out number of life stages for each species --------------
Life_Stage_Spring_Chinook_Reaches = Life_Stage_Priorities_AU_and_Reach_data[which(  Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column_Spring_Chinook"]   >=   Life_Stage_Priorities_AU_and_Reach_data_FILTER_Restoration$Category_lower_limit), c("ReachName") ]
Life_Stage_Steelhead_Reaches = Life_Stage_Priorities_AU_and_Reach_data[which(  Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column_Steelhead"]   >=   Life_Stage_Priorities_AU_and_Reach_data_FILTER_Restoration$Category_lower_limit), c("ReachName") ]
if(exclude_bull_trout == "no"){
Life_Stage_Bull_Trout_Reaches = Life_Stage_Priorities_AU_and_Reach_data[which(  Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column_Bull_Trout"]   >=   Life_Stage_Priorities_AU_and_Reach_data_FILTER_Restoration$Category_lower_limit), c("ReachName") ]
}
#  ---------------------------------------------------------------------------------
#          Life Stage Sum - RESTORATION
#  ---------------------------------------------------------------------------------
# ----------------------- merge with current filtered data --------------
HQ_and_LF_Pathway_Restoration_Spring_Chinook = HQ_and_LF_Pathway_Restoration_Spring_Chinook %>%
filter(ReachName   %in%   Life_Stage_Spring_Chinook_Reaches$`ReachName`)
HQ_and_LF_Pathway_Restoration_Steelhead = HQ_and_LF_Pathway_Restoration_Steelhead %>%
filter(ReachName   %in%   Life_Stage_Steelhead_Reaches$`ReachName`)
print(paste("HQ Pathway-RESTORATION Spring Chinook - total reaches after life stage sum filter: ", nrow(HQ_and_LF_Pathway_Restoration_Spring_Chinook), sep=""))
print(paste("HQ Pathway-RESTORATION Steelhead - total reaches after life stage sum filter: ", nrow(HQ_and_LF_Pathway_Restoration_Steelhead), sep=""))
# -------- add to total output -----
life_stage_sum_output = Life_Stage_Priorities_AU_and_Reach_data[,c("ReachName","Life_Stage_Sum_Column_Steelhead")]
Output_Steelhead_All = merge(Output_Steelhead_All  ,life_stage_sum_output, by = "ReachName" )
View(Output_Steelhead_All )
HQ_Score_Protection_Reach_Scores$Category_upper_limit
HQ_Score_Protection_Reach_Scores$Category_lower_limit
HQ_Score_Protection_Reach_Scores$Category_lower_limit
