spring_chinook_actions = NA   # get list of habitat attributes with NO redundancies
number_of_spring_chinook_actions =  0
}else{
if(class(spring_chinook_actions) == "list"){ spring_chinook_actions = unlist(spring_chinook_actions)}
spring_chinook_actions = unique( unlist(strsplit(spring_chinook_actions, ",")) )  # get list of action categories with NO redundancies
number_of_spring_chinook_actions =  length( spring_chinook_actions )
spring_chinook_actions = paste(spring_chinook_actions, collapse=",")
}
# -----------------------------------------
#     for steelhead
# -----------------------------------------
# ------- number of habitat attributes -------------
if( is.null(steelhead_habitat_attributes) ){
steelhead_habitat_attributes = c()   # get list of habitat attributes with NO redundancies
number_of_steelhead_habitat_attributes =  0
}else{
steelhead_habitat_attributes = unique(unlist(strsplit(steelhead_habitat_attributes, ",")))   # get list of habitat attributes with NO redundancies
number_of_steelhead_habitat_attributes =  length( steelhead_habitat_attributes )
steelhead_habitat_attributes = paste(steelhead_habitat_attributes, collapse=",")
species_count_x = species_count_x + 1
}
# -------------- number of action categories -----------
if(class(steelhead_actions) == "list"){steelhead_actions = unlist(steelhead_actions)}
if( is.null(steelhead_actions) ){
steelhead_actions = NA   # get list of habitat attributes with NO redundancies
number_of_steelhead_actions =  0
}else{
if(class(steelhead_actions) == "list"){ steelhead_actions = unlist(steelhead_actions)}
steelhead_actions = unique( unlist(strsplit(steelhead_actions, ",")) )  # get list of action categories with NO redundancies
number_of_steelhead_actions =  length( steelhead_actions )
steelhead_actions = paste(steelhead_actions, collapse=",")
}
# -----------------------------------------
#     for bull trout
# -----------------------------------------
# ------- number of habitat attributes -------------
if(is.null(bull_trout_habitat_attributes)){
bull_trout_habitat_attributes = c()   # get list of habitat attributes with NO redundancies
number_of_bull_trout_habitat_attributes =  0
}else{
bull_trout_habitat_attributes = unique(unlist(strsplit(bull_trout_habitat_attributes, ",")))   # get list of habitat attributes with NO redundancies
number_of_bull_trout_habitat_attributes =  length( bull_trout_habitat_attributes )
bull_trout_habitat_attributes = paste(bull_trout_habitat_attributes, collapse=",")
species_count_x = species_count_x + 1
}
# -------------- number of action categories -----------
if(class(bull_trout_actions) == "list"){bull_trout_actions = unlist(bull_trout_actions)}
if(is.null(bull_trout_actions)){
bull_trout_actions = NA   # get list of habitat attributes with NO redundancies
number_of_bull_trout_actions =  0
}else{
if(class(bull_trout_actions) == "list"){ bull_trout_actions = unlist(bull_trout_actions)}
bull_trout_actions = unique( unlist(strsplit(bull_trout_actions, ",")) )  # get list of action categories with NO redundancies
number_of_bull_trout_actions =  length( bull_trout_actions )
bull_trout_actions = paste(bull_trout_actions, collapse=",")
}
# -------------- if all species are present - yes or no -------------
if(species_count_x == 3){ all_species_present = "yes"
}else{ all_species_present = "no" }
# -----------------------------------------
#   Add life stage ( Life_Stage_Priorities_AU_and_Reach_data has 0 and 1 for life stage presence )
# -----------------------------------------
life_stage_list = c()
if( !is.null(spring_chinook_habitat_attributes) ){
life_stages_present = FUNCTION_life_stage_presence("spring_chinook", reachname_x)
life_stage_list = paste(life_stage_list, life_stages_present, sep="," )
life_stage_spring_chinook_output = life_stages_present
}else{
life_stage_spring_chinook_output = "NA"
spring_chinook_habitat_attributes = "NA"
}
if( !is.null(steelhead_habitat_attributes)  ){
life_stages_present = FUNCTION_life_stage_presence("steelhead", reachname_x)
life_stage_list = paste(life_stage_list, life_stages_present, sep="," )
life_stage_steelhead_output = life_stages_present
}else{
life_stage_steelhead_output = "NA"
steelhead_habitat_attributes = "NA"
}
if( !is.null(bull_trout_habitat_attributes)  & exclude_bull_trout != "yes" ){
life_stages_present = FUNCTION_life_stage_presence("bull_trout", reachname_x)
life_stage_list = paste(life_stage_list, life_stages_present, sep="," )
life_stage_bull_trout_output = life_stages_present
}else{
life_stage_bull_trout_output = "NA"
bull_trout_habitat_attributes = "NA"
}
# ---------------- remove leading comma -------
if( is.null(life_stage_list) ){
life_stage_list = "NA"
}else{
life_stage_list = substr(life_stage_list,2,nchar(life_stage_list))
}
# -----------------------------------------
#     combine and output
# -----------------------------------------
output_info_row_x = output_info_row_x[,c("ReachName")]
output_row_x = as.data.frame( as.data.frame(c(output_info_row_x, spring_chinook_presence,  all_species_present,
pathways_x, number_of_pathways_x,
habitat_attributes_x, number_of_habitat_attributes_x,
spring_chinook_habitat_attributes, number_of_spring_chinook_habitat_attributes,
steelhead_habitat_attributes, number_of_steelhead_habitat_attributes,
bull_trout_habitat_attributes, number_of_bull_trout_habitat_attributes,
action_categories_x, number_of_action_categories_x,
spring_chinook_actions, number_of_spring_chinook_actions,
steelhead_actions, number_of_steelhead_actions,
bull_trout_actions, number_of_bull_trout_actions,
life_stage_list, life_stage_spring_chinook_output, life_stage_steelhead_output, life_stage_bull_trout_output )    ) )
colnames(output_row_x) = c("ReachName", "Spring_Chinook_Actions_Present_Yes_No", "SprCh_STLD_BullTr_All_Present_Yes_No",
"Pathways","Number_of_Pathways",
"Impaired_Habitat_Attributes_All_Species","Number_Impaired_Habitat_Attributes_All_Species",
"Impaired_Habitat_Attributes_SpringChinook","Number_Impaired_Habitat_Attributes_SpringChinook",
"Impaired_Habitat_Attributes_Steelhead","Number_Impaired_Habitat_Attributes_Steelhead",
"Impaired_Habitat_Attributes_BullTrout","Number_Impaired_Habitat_Attributes_BullTrout",
"Action_Categories_All_Species", "Number_Action_Categories_All_Species",
"Action_Categories_SpringChinook", "Number_Action_Categories_SpringChinook",
"Action_Categories_Steelhead", "Number_Action_Categories_Steelhead",
"Action_Categories_BullTrout", "Number_Action_Categories_BullTrout", "Life_Stage_All",
"Life_Stage_Spring_Chinook", "Life_Stage_Steelhead", "Life_Stage_Bull_Trout")
Pathway_Output_x = rbind(Pathway_Output_x, output_row_x)
}
reachname_x
# ------------------ basic info about the reach ------------
x_row = which(Reach_Information_HQ_Actions$ReachName == reachname_x)
output_info_row_x = Reach_Information_HQ_Actions[x_row, c('ReachName','Basin',"Assessment.Unit",  "Spring.Chinook.Reach","Steelhead.Reach" ,"Bull.Trout.Reach" )]
# --------------------- initiate cells for each reach ---------------
pathways_x  = c()
habitat_attributes_x = c()
action_categories_x = c()
spring_chinook_habitat_attributes = c()
steelhead_habitat_attributes = c()
bull_trout_habitat_attributes = c()
all_three_species_habitat_attributes = c()
spring_chinook_actions = c()
steelhead_actions = c()
bull_trout_actions = c()
all_three_species_actions = c()
# ---------------------- Spring_Chinook ----------
if( any(HQ_spring_chinook$ReachName == reachname_x) ){
# ------------- pull that reach --------------
HQ_row_x = HQ_spring_chinook[which(HQ_spring_chinook$ReachName == reachname_x),]
# -------- IF there are habitat attributes for that score (unacceptable, at risk, unacceptable-at risk) -------
if(  !is.na(HQ_row_x[,attributes_column]) ){
# ---------------- pathway -------------------
pathways_x = paste(pathways_x, "HQ_spring_chinook", sep=",")
# ----------------- habitat attributes ------------------
habitat_attributes_x = paste(habitat_attributes_x, HQ_row_x[,attributes_column], sep=",")
# --------------- habitat attributes related to Spring Chinook actions --------------
spring_chinook_habitat_attributes = HQ_row_x[,attributes_column]
# ----------------- action categories ------------------
action_categories_x = paste(action_categories_x, HQ_row_x[,actions_column], sep=",")
# ------------------- specifically add to spring chinook actions --------------
spring_chinook_actions = HQ_row_x[,actions_column]
}
}
# ---------------------- Steelhead ----------
if( any(HQ_steelhead$ReachName == reachname_x) ){
# ------------- pull that reach --------------
HQ_row_x = HQ_steelhead[which(HQ_steelhead$ReachName == reachname_x),]
# -------- IF there are habitat attributes for that score (unnaceptable, at risk, unacceptable-at risk) -------
if(  !is.na(HQ_row_x[,attributes_column]) ){
# ---------------- pathway -------------------
pathways_x = paste(pathways_x, "HQ_steelhead", sep=",")
# ----------------- habitat attributes ------------------
habitat_attributes_x = paste(habitat_attributes_x, HQ_row_x[,attributes_column], sep=",")
# --------------- habitat attributes related to Steelhead actions --------------
steelhead_habitat_attributes = HQ_row_x[,attributes_column]
# ----------------- action categories ------------------
action_categories_x = paste(action_categories_x, HQ_row_x[,actions_column], sep=",")
# ------------------- specifically add to steelhead actions --------------
steelhead_actions = HQ_row_x[,actions_column]
}
}
any(HQ_steelhead$ReachName == reachname_x)
# ------------- pull that reach --------------
HQ_row_x = HQ_steelhead[which(HQ_steelhead$ReachName == reachname_x),]
# -------- IF there are habitat attributes for that score (unnaceptable, at risk, unacceptable-at risk) -------
if(  !is.na(HQ_row_x[,attributes_column]) ){
# ---------------- pathway -------------------
pathways_x = paste(pathways_x, "HQ_steelhead", sep=",")
# ----------------- habitat attributes ------------------
habitat_attributes_x = paste(habitat_attributes_x, HQ_row_x[,attributes_column], sep=",")
# --------------- habitat attributes related to Steelhead actions --------------
steelhead_habitat_attributes = HQ_row_x[,attributes_column]
# ----------------- action categories ------------------
action_categories_x = paste(action_categories_x, HQ_row_x[,actions_column], sep=",")
# ------------------- specifically add to steelhead actions --------------
steelhead_actions = HQ_row_x[,actions_column]
}
HQ_row_x
!is.na(HQ_row_x[,attributes_column])
# ---------------- pathway -------------------
pathways_x = paste(pathways_x, "HQ_steelhead", sep=",")
# ----------------- habitat attributes ------------------
habitat_attributes_x = paste(habitat_attributes_x, HQ_row_x[,attributes_column], sep=",")
# --------------- habitat attributes related to Steelhead actions --------------
steelhead_habitat_attributes = HQ_row_x[,attributes_column]
# ----------------- action categories ------------------
action_categories_x = paste(action_categories_x, HQ_row_x[,actions_column], sep=",")
# ------------------- specifically add to steelhead actions --------------
steelhead_actions = HQ_row_x[,actions_column]
# ---------------------- Steelhead ----------
if( any(HQ_steelhead$ReachName == reachname_x) ){
# ------------- pull that reach --------------
HQ_row_x = HQ_steelhead[which(HQ_steelhead$ReachName == reachname_x),]
# -------- IF there are habitat attributes for that score (unnaceptable, at risk, unacceptable-at risk) -------
if(  !is.na(HQ_row_x[,attributes_column]) ){
# ---------------- pathway -------------------
pathways_x = paste(pathways_x, "HQ_steelhead", sep=",")
# ----------------- habitat attributes ------------------
habitat_attributes_x = paste(habitat_attributes_x, HQ_row_x[,attributes_column], sep=",")
# --------------- habitat attributes related to Steelhead actions --------------
steelhead_habitat_attributes = HQ_row_x[,attributes_column]
# ----------------- action categories ------------------
action_categories_x = paste(action_categories_x, HQ_row_x[,actions_column], sep=",")
# ------------------- specifically add to steelhead actions --------------
steelhead_actions = HQ_row_x[,actions_column]
}
}
# ------------- pull that reach --------------
HQ_row_x = HQ_steelhead[which(HQ_steelhead$ReachName == reachname_x),]
# -------- IF there are habitat attributes for that score (unnaceptable, at risk, unacceptable-at risk) -------
if(  !is.na(HQ_row_x[,attributes_column]) ){
# ---------------- pathway -------------------
pathways_x = paste(pathways_x, "HQ_steelhead", sep=",")
# ----------------- habitat attributes ------------------
habitat_attributes_x = paste(habitat_attributes_x, HQ_row_x[,attributes_column], sep=",")
# --------------- habitat attributes related to Steelhead actions --------------
steelhead_habitat_attributes = HQ_row_x[,attributes_column]
# ----------------- action categories ------------------
action_categories_x = paste(action_categories_x, HQ_row_x[,actions_column], sep=",")
# ------------------- specifically add to steelhead actions --------------
steelhead_actions = HQ_row_x[,actions_column]
}
!is.na(HQ_row_x[,attributes_column])
attributes_column
dim(HQ_row_x)
which(HQ_steelhead$ReachName == reachname_x)
dim(HQ_steelhead)
View(v)
View(HQ_steelhead)
restoration_or_protection == "restoration"
HQ_steelhead = Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']]
dim(v)
dim(HQ_steelhead)
View(HQ_steelhead)
Habitat_Quality_Pathway_Steelhead = Generate_Habitat_Quality_Output_Table("Steelhead", basins_to_include, habitat_quality_scores_colnames_for_sum )
dim(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
View(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
# ---------------------------------------------------------------------------
#  import R Packages
# ---------------------------------------------------------------------------
library(tidyverse)
library(xlsx)
library(writexl)
library(readxl)
# ---------------------------------------------------------------------------
#  Script Criteria for output
# ---------------------------------------------------------------------------
read_MASTER_directly = TRUE # if TRUE - read MASTER from UCSRB servers, if FALSE - read from local
write_MASTER_locally = TRUE # if TRUE -  write tabs in MASTER from UCSRB servers, if FALSE - do not write
basins_to_include = c("Methow",  "Entiat","Wenatchee" , "Okanogan")  # basins to include in simulation
exclude_bull_trout = "no"  # if "yes" -> remove bull trout for WebMap applications
output_Habitat_Quality_and_Habitat_Attribute_Scores = "no"  # enter "yes" or "no" if you want the "flat table" Habitat Attribute output (doubles time to run script)
update_Okanogan_reach_names = "no"  # if "yes" - update Okanogan reach names (should not have to run again - since on 5.Apr.2021 Ryan updated names)
HQ_add_life_stage = "no"   # IF "yes" generate life stages for HQ pathway based on life stage presence in reaches, for combining into ONE Data frame across all pathways and scores
HQ_priority_life_stages = "yes"  # "yes" if use AU Life stages priority reach layer to generate life stages for habitat quality pathway
EDT_convert_Level3_Flow_to_Flow_Variability = "yes" # Level2_Level3_EDT_Crosswalk has "Flow Variability", Limiting_Factors_Okanogan_EDT and HabitatAttribute_Ratings_Level3
core_metric_missing_data_species = c("Steelhead", "Spring Chinook") # species to use for core metrics in missing data (based on data layer Attribute_LifeStage_Crosswalk)
time1 <- proc.time()[3] # for timing the total time to run the tool
# --------------- directory of scripts (where all the R scripts are located) -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
master_path = 'Data/'
habitat_data_path = paste(master_path,"Habitat_Data/", sep="")
ranking_data_path = paste(master_path,"Ranking_Data/", sep="")
crosswalks_path = paste(master_path,"Crosswalks/", sep="")  # various crosswalks
criteria_and_scoring_path = paste(master_path,"Criteria_and_Scoring/", sep="") # Criteria and Scores for prioritization (Restoration and Protection)
Okanogan_EDT_path = paste(master_path,'Okanogan_EDT/', sep="")   # Data from Okanogan EDT results
reach_assessment_projects_path = paste(master_path,'Reach_Assessment_Projects/', sep="")  # data for projects from Reach Assessments
# -------------- MASTER path and file ----------
folder_x = "Y:/UCRTT/Prioritization/Step 2/Habitat Evaluation/"
master_file = "MASTER_Step2_REVIEWDRAFT_071321.xlsx"
MASTER_Data_path = paste(folder_x,master_file, sep="")   # Data from Okanogan EDT results
# ----------- directory for output (where results are saved) ---------
output_path = 'Output/'
# ---------------------------------------------------------------------------
#     Read in Data
# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
# ---------------------------------------------------------------------------
#      Criteria for Filters
# ---------------------------------------------------------------------------
print("----------------------------------------- ASSIGN CRITERIA --------------------------------------------")
source(paste(script_path, 'Criteria_Script.R', sep=""))
print("----------------------------------------- Prepare Okanogan EDT prep --------------------------------------------")
source(paste(script_path, 'Okanogan_EDT_data_input_prep.R', sep=""))
# ---------------------------------------------------------------------------
#   LIMITING FACTOR PATHWAY: Generate Habitat Attribute Table (used in Limiting Factor Pathway)
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITAT ATTRIBUTE SCORES (for Limtiting Factor Pathway) --------------------------------------------")
# some of HQ filters are used in Habitat Attribute generation
source( paste(script_path, 'FUNCTIONS_for_Habitat_Quality_Filters.R', sep="")  )
# script to generate habitat attribute scores
source(paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep="") )
print("----------------------------------------- GENERATE HABITAT QUALITY SCORES --------------------------------------------")
source( paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep="") )
source(paste(script_path, 'Data_Sources_List_for_Habitat_Attributes.R', sep=""))
source(paste(script_path, 'FUNCTIONS_for_Habitat_Quality_Filters.R', sep=""))
# --------------------------------------
#   Loop through each Habitat Attribute
# --------------------------------------
Habitat_Quality_Scores = as.tibble(Reach_Information_data[,c('ReachName','Basin', 'Assessment.Unit',
'Spring.Chinook.Reach','Steelhead.Reach','Bull.Trout.Reach')])
colnames(Habitat_Quality_Scores) = c('ReachName','Basin', 'Assessment.Unit',
'Spring.Chinook.Reach','Steelhead.Reach','Bull.Trout.Reach')
habitat_attribute_x = names(Habitat_Quality_Habitat_Attributes_List)[1] # just to print out
ptm <- proc.time()[3]
for( habitat_attribute_x in names(Habitat_Quality_Habitat_Attributes_List) ){
print(habitat_attribute_x)
# --------------------------------------------------------------------
#   Pull Habitat Attribute Score from Habitat Attributes
# --------------------------------------------------------------------
output_x = Habitat_Attribute_Scores[which(Habitat_Attribute_Scores$Habitat_Attribute == habitat_attribute_x),]
# --------------------------------------------------------------------
#   IF Score for Habitat Attribute is present in Habitat_Attribute_Scores
# --------------------------------------------------------------------
if( nrow(output_x) > 0 ){
# ------- pull score from Habitat Attribute data --------
output_x_add_to_HQ = output_x[  , c("ReachName", "Habitat_Attribute_Score")]
colnames(output_x_add_to_HQ) = c("ReachName","final_score")
# --------------------------------------------------------------------
#   IF NO Score for Habitat Attribute is present in Habitat_Attribute_Scores
# --------------------------------------------------------------------
}else{
print("--------- (for above and below attribute) No habitat attribute in Habitat_Attribute_Scores (calculate from HQ Pathway) --------")
print(habitat_attribute_x)
# --------------------------------------------------------------------
#   Loop through each Data Source for this specific habitat attribute
# --------------------------------------------------------------------
data_sources_list =  Habitat_Quality_Habitat_Attributes_List[habitat_attribute_x]
# --------------------------------------------------------------------
#   Only one data source for this habitat attribute
# --------------------------------------------------------------------
if( length(data_sources_list[[1]]) == 1){
output_x = FUNCTION_generate_habitat_attribute_score_from_Habitat_Data_Raw(habitat_attribute_x, data_sources_list[[1]][1], "HQ")
# --------------------------------------------------------------------
#  MULTIPLE data source for this habitat attribute (need to get optimum)
# --------------------------------------------------------------------
# NOTE this is only true for Temperature- Rearing AND	Flow- Summer Base Flow
}else{
# ------------ data frame to record habitat attributes --------
i = 0
for( location_x in 1:length(data_sources_list[[1]]) ){
# ------------------- skip reading PROFESSOINAL JUDGEMENT -------------
if(data_sources_list[[1]][location_x] == "PROFESSIONAL JUDGEMENT"){ next }else{
# ------------ Generate metric value  AND score (1,3,5) for each habitat attribute -------------------
i = i + 1 # to include reach name if first
# outputs both metric value and score
output_x = FUNCTION_generate_habitat_attribute_score_from_Habitat_Data_Raw(habitat_attribute_x,  data_sources_list[[1]][location_x],  "HQ" )
# -------- data frame for this specific reach and habitat attribute --------
if(i == 1){
habitat_attribute_x_data_frame = output_x[,c("ReachName","score")]
}else{
habitat_attribute_x_data_frame = cbind(habitat_attribute_x_data_frame, output_x$score)
}
}
}
# ------------ data frame to record habitat attributes --------
#habitat_attribute_x_data_frame = t(habitat_attribute_x_data_frame)
#habitat_attribute_x_data_frame = as_data_frame(habitat_attribute_x_data_frame)
# ---------- pull just the scores -------
habitat_attribute_x_data_frame_numeric = habitat_attribute_x_data_frame[,2:ncol(habitat_attribute_x_data_frame)]
# ------------------- get minimum score for each row ----------
habitat_attribute_x_data_frame_numeric= habitat_attribute_x_data_frame_numeric %>%
rowwise() %>%
mutate(minimum_score = min(c_across(), na.rm=T) )
# ------- convert minimum score to numeric ---------------
habitat_attribute_x_data_frame_numeric$minimum_score2 = as.numeric(habitat_attribute_x_data_frame_numeric$minimum_score)
# -------- adding NA column (for metric column, it needs to be NA to be multiple) ------
habitat_attribute_x_data_frame_numeric$na_column = NA
output_x =  cbind(habitat_attribute_x_data_frame$ReachName, habitat_attribute_x_data_frame_numeric[,c("na_column","minimum_score2")])
colnames(output_x) = c("ReachName", "metric_data", "final_score")
# ------ generate output to add to HQ Score data frames -------
output_x_add_to_HQ = output_x[,c("ReachName","final_score")]
}
}
# --------------------------------------------------------------------
#      Combine data with data frame
# --------------------------------------------------------------------
# ---------------------------- add new columns to summary data frame -----------
# --------- generate column name ---------
column_score = paste(gsub(" ", "", habitat_attribute_x, fixed = TRUE), "score", sep="_")
colnames(output_x_add_to_HQ)[2] = column_score
# ---------- add to HQ score ------------
Habitat_Quality_Scores = merge(Habitat_Quality_Scores, output_x_add_to_HQ, by="ReachName")
# --------------------------------------------------------------------
#      Add Riparian Mean score
# --------------------------------------------------------------------
if(habitat_attribute_x == 'Riparian-Disturbance'){
Habitat_Quality_Scores = Habitat_Quality_Scores%>%
rowwise() %>%
mutate(Riparian_Mean = mean( c_across(c('Riparian-Disturbance_score',
'Riparian-CanopyCover_score')),  na.rm=T)   )
}
# --------------------------------------------------------------------
#      Add Stability mean score
# --------------------------------------------------------------------
if(habitat_attribute_x == 'Channel Stability'){
Habitat_Quality_Scores = Habitat_Quality_Scores%>%
rowwise() %>%
mutate(Stability_Mean = mean(c_across(c('BankStability_score',
'ChannelStability_score')), na.rm=T) )
}
}
print(paste("Time to complete loop: ", paste(round((proc.time()[3] - ptm)/60, 2), " minutes")    ))
# -------------------- Calculate the HQ Sum ----------------------
Habitat_Quality_Scores = Habitat_Quality_Scores%>%
rowwise() %>%
mutate(HQ_Sum = sum(c_across( habitat_quality_scores_colnames_for_sum  ), na.rm=F) )
dim(habitat_quality_scores_colnames_for_sum)
length(habitat_quality_scores_colnames_for_sum)
habitat_quality_scores_colnames_for_sum
colnames(Habitat_Quality_Scores)
#------------------------- column names of Habitat_Quality_Scores - HQ scores output (generated scores for pathway) -------
habitat_quality_scores_colnames_for_sum = c('Stability_Mean','CoarseSubstrate_score','Cover-Wood_score',
'Flow-SummerBaseFlow_score', 'FloodplainConnectivity_score',
'Off-Channel/Side-Channels_score','PoolQuantity&Quality_score','Riparian_Mean',
'Temperature-Rearing_score')
# -------------------- Calculate the HQ Sum ----------------------
Habitat_Quality_Scores = Habitat_Quality_Scores%>%
rowwise() %>%
mutate(HQ_Sum = sum(c_across( habitat_quality_scores_colnames_for_sum  ), na.rm=F) )
# -------------------- Calculate percent (0 - 100%) ------------------
Habitat_Quality_Scores$HQ_Pct = Habitat_Quality_Scores$HQ_Sum/45
Habitat_Quality_Scores = Habitat_Quality_Scores  %>%
mutate(HQ_Score_Restoration = ifelse(HQ_Pct  > Restoration_Scoring$Category_Lower[1] &
HQ_Pct  < Restoration_Scoring$Category_Upper[1] , Restoration_Scoring$Score[1],
ifelse(HQ_Pct  >= Restoration_Scoring$Category_Lower[2] &
HQ_Pct  <= Restoration_Scoring$Category_Upper[2] , Restoration_Scoring$Score[2],
ifelse(HQ_Pct  > Restoration_Scoring$Category_Lower[3] &
HQ_Pct  <= Restoration_Scoring$Category_Upper[3] , Restoration_Scoring$Score[3],
NA))))
Habitat_Quality_Scores = Habitat_Quality_Scores  %>%
mutate(HQ_Score_Protection = ifelse(HQ_Pct  > Protection_Scoring$Category_Lower [1] &
HQ_Pct  < Protection_Scoring$Category_Upper[1] , Protection_Scoring$Score[1],
ifelse(HQ_Pct  >= Protection_Scoring$Category_Lower[2] &
HQ_Pct  <= Protection_Scoring$Category_Upper[2] , Protection_Scoring$Score[2],
ifelse(HQ_Pct  > Protection_Scoring$Category_Lower[3] &
HQ_Pct  <= Protection_Scoring$Category_Upper[3] , Protection_Scoring$Score[3],
NA))))
# ------------------ output data -------------------------
if(output_Habitat_Quality_and_Habitat_Attribute_Scores == "yes"){
Habitat_Quality_Scores = as.data.frame(Habitat_Quality_Scores)
output_path_x =  paste(output_path,'Habitat_Quality_Scores.xlsx', sep="")
write.xlsx(
Habitat_Quality_Scores,
output_path_x,
col.names = TRUE,
row.names = FALSE,
append = FALSE,
showNA = TRUE,
password = NULL
)
}
print("----------------------------------------- GENERATE OKANOGAN HABITAT QUALITY AND LIMTING FACTOR SCORES --------------------------------------------")
# Okanogan: generate Habitat Attribute Scores for Habitat Quality (just Level 2) and Limiting Factor (Level 3 filter 1s and 3s to generate Level 2s)
# NOTE: Habitat_Quality_Scorse_Okanogan and Habiat_Attribute_Scores_Okanogan are generated by this script
source( paste(script_path, 'FUNCTIONS_Okanogan_EDT_Habitat_Attribute_Habitat_Quality_Scripts.R', sep="") )
# ---------------------------------------------------------------------------
#  import R Packages
# ---------------------------------------------------------------------------
library(tidyverse)
library(xlsx)
library(writexl)
library(readxl)
# ---------------------------------------------------------------------------
#  Script Criteria for output
# ---------------------------------------------------------------------------
read_MASTER_directly = TRUE # if TRUE - read MASTER from UCSRB servers, if FALSE - read from local
write_MASTER_locally = TRUE # if TRUE -  write tabs in MASTER from UCSRB servers, if FALSE - do not write
basins_to_include = c("Methow",  "Entiat","Wenatchee" , "Okanogan")  # basins to include in simulation
exclude_bull_trout = "no"  # if "yes" -> remove bull trout for WebMap applications
output_Habitat_Quality_and_Habitat_Attribute_Scores = "no"  # enter "yes" or "no" if you want the "flat table" Habitat Attribute output (doubles time to run script)
update_Okanogan_reach_names = "no"  # if "yes" - update Okanogan reach names (should not have to run again - since on 5.Apr.2021 Ryan updated names)
HQ_add_life_stage = "no"   # IF "yes" generate life stages for HQ pathway based on life stage presence in reaches, for combining into ONE Data frame across all pathways and scores
HQ_priority_life_stages = "yes"  # "yes" if use AU Life stages priority reach layer to generate life stages for habitat quality pathway
EDT_convert_Level3_Flow_to_Flow_Variability = "yes" # Level2_Level3_EDT_Crosswalk has "Flow Variability", Limiting_Factors_Okanogan_EDT and HabitatAttribute_Ratings_Level3
core_metric_missing_data_species = c("Steelhead", "Spring Chinook") # species to use for core metrics in missing data (based on data layer Attribute_LifeStage_Crosswalk)
time1 <- proc.time()[3] # for timing the total time to run the tool
# --------------- directory of scripts (where all the R scripts are located) -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
master_path = 'Data/'
habitat_data_path = paste(master_path,"Habitat_Data/", sep="")
ranking_data_path = paste(master_path,"Ranking_Data/", sep="")
crosswalks_path = paste(master_path,"Crosswalks/", sep="")  # various crosswalks
criteria_and_scoring_path = paste(master_path,"Criteria_and_Scoring/", sep="") # Criteria and Scores for prioritization (Restoration and Protection)
Okanogan_EDT_path = paste(master_path,'Okanogan_EDT/', sep="")   # Data from Okanogan EDT results
reach_assessment_projects_path = paste(master_path,'Reach_Assessment_Projects/', sep="")  # data for projects from Reach Assessments
# -------------- MASTER path and file ----------
folder_x = "Y:/UCRTT/Prioritization/Step 2/Habitat Evaluation/"
master_file = "MASTER_Step2_REVIEWDRAFT_071321.xlsx"
MASTER_Data_path = paste(folder_x,master_file, sep="")   # Data from Okanogan EDT results
# ----------- directory for output (where results are saved) ---------
output_path = 'Output/'
# ---------------------------------------------------------------------------
#     Read in Data
# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
