basins_to_include = c("Methow",  "Entiat","Wenatchee" , "Okanogan")  # basins to include in simulation
exclude_bull_trout = "no"  # if "yes" -> remove bull trout for WebMap applications
output_Habitat_Quality_and_Habitat_Attribute_Scores = "no"  # enter "yes" or "no" if you want the "flat table" Habitat Attribute output (doubles time to run script)
update_Okanogan_reach_names = "no"  # if "yes" - update Okanogan reach names (should not have to run again - since on 5.Apr.2021 Ryan updated names)
HQ_add_life_stage = "no"   # IF "yes" generate life stages for HQ pathway based on life stage presence in reaches, for combining into ONE Data frame across all pathways and scores
HQ_priority_life_stages = "yes"  # "yes" if use AU Life stages priority reach layer to generate life stages for habitat quality pathway
EDT_convert_Level3_Flow_to_Flow_Variability = "yes" # Level2_Level3_EDT_Crosswalk has "Flow Variability", Limiting_Factors_Okanogan_EDT and HabitatAttribute_Ratings_Level3
core_metric_missing_data_species = c("Steelhead", "Spring Chinook") # species to use for core metrics in missing data (based on data layer Attribute_LifeStage_Crosswalk)
# -----------------------------------------------------------------------------------------------------------------------------------------------
#   Directories of Input and Output data
# -----------------------------------------------------------------------------------------------------------------------------------------------
time1 <- proc.time()[3] # for timing the total time to run the tool
# --------------- directory of scripts (where all the R scripts are located) -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
master_path = 'Data/'
habitat_data_path = paste(master_path,"Habitat_Data/", sep="")
ranking_data_path = paste(master_path,"Ranking_Data/", sep="")
crosswalks_path = paste(master_path,"Crosswalks/", sep="")  # various crosswalks
criteria_and_scoring_path = paste(master_path,"Criteria_and_Scoring/", sep="") # Criteria and Scores for prioritization (Restoration and Protection)
Okanogan_EDT_path = paste(master_path,'Okanogan_EDT/', sep="")   # Data from Okanogan EDT results
reach_assessment_projects_path = paste(master_path,'Reach_Assessment_Projects/', sep="")  # data for projects from Reach Assessments
# -------------- MASTER path and file ----------
folder_x = "Y:/UCRTT/Prioritization/Step 2/Habitat Evaluation/"
master_file = "MASTER_Step2_REVIEWDRAFT_071321.xlsx"
MASTER_Data_path = paste(folder_x,master_file, sep="")   # Data from Okanogan EDT results
# ----------- directory for output (where results are saved) ---------
output_path = 'Output/'
# Old location of the reach attribute (NOT Raw) data:  'Y:/UCRTT/Prioritization/Tables for Tools/'
# -----------------------------------------------------------------------------------------------------------------------------------------------
#
#
#   - - - - - - - - - Read in Data and Criteria   - - - - - - - - -
#
#
# -----------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#     Read in Data
# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
#print("----------------------------------------- Update Okanogan Reach Names (if necessary) --------------------------------------------")
#if(update_Okanogan_reach_names == "yes"){
#  source(paste(script_path, 'FUNCTION_update_names_in_data_frames.R', sep=""))
#}
# ---------------------------------------------------------------------------
#      Criteria for Filters
# ---------------------------------------------------------------------------
print("----------------------------------------- ASSIGN CRITERIA --------------------------------------------")
source(paste(script_path, 'Criteria_Script.R', sep=""))
# ---------------------------------------------------------------------------
#   Prepare Okanogan EDT data
# ---------------------------------------------------------------------------
print("----------------------------------------- Prepare Okanogan EDT prep --------------------------------------------")
source(paste(script_path, 'Okanogan_EDT_data_input_prep.R', sep=""))
# -----------------------------------------------------------------------------------------------------------------------------------------------
#
#
#   - - - - - - - - -  Generate Habitat Attribute (Limiting Factor) Table and Habitat Quality Scores Table  - - - - - - - - -
#
#
# -----------------------------------------------------------------------------------------------------------------------------------------------
# NOTE: running Limiting Factor pathway first since we decided to generate all habitat attribute scores with the Habitat Attribute Scores
#        script, then for the HQ Pathway, pull from those scores
# ---------------------------------------------------------------------------
#   LIMITING FACTOR PATHWAY: Generate Habitat Attribute Table (used in Limiting Factor Pathway)
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITAT ATTRIBUTE SCORES (for Limtiting Factor Pathway) --------------------------------------------")
# some of HQ filters are used in Habitat Attribute generation
source( paste(script_path, 'FUNCTIONS_for_Habitat_Quality_Filters.R', sep="")  )
# script to generate habitat attribute scores
source(paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep="") )
# OUTPUT is Habitat_Attribute_Scores
# ---------------------------------------------------------------------------
#   HABITAT QUALITY PATHWAY: Generate Habitat Quality Restoration and Protection Score
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITAT QUALITY SCORES --------------------------------------------")
source( paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep="") )
# output for all scores is: Habitat_Quality_Scores
# View(Habitat_Quality_Pathway_Output[['Habitat_Quality_Pathway_Restoration']])
# View(Habitat_Quality_Pathway_Output[['Habitat_Quality_Pathway_Protection']])
# ---------------------------------------------------------------------------
#   OKANOGAN: Habitat Quality AND Limiting Factor Pathway
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE OKANOGAN HABITAT QUALITY AND LIMTING FACTOR SCORES --------------------------------------------")
# Okanogan: generate Habitat Attribute Scores for Habitat Quality (just Level 2) and Limiting Factor (Level 3 filter 1s and 3s to generate Level 2s)
# NOTE: Habitat_Quality_Scorse_Okanogan and Habiat_Attribute_Scores_Okanogan are generated by this script
source( paste(script_path, 'FUNCTIONS_Okanogan_EDT_Habitat_Attribute_Habitat_Quality_Scripts.R', sep="") )
# NOTE: these output should include all reaches in the Okanogan - no filters
# HQ Pathway: Habitat_Quality_Scores_Okanogan
# LF Pathway: Habitat_Attribute_Scores_Okanogan
# Individual Life stages for the Okanogan: Adult_Migration_LF_Okanogan, Fry_LF_Okanogan, Holding_and_Maturation_LF_Okanogan,
#                   Smolt_Outmigration_LF_Okanogan, Spawning_and_Incubation_LF_Okanogan, Summer_Rearing_LF_Okanogan, Winter_Rearing_LF_Okanogan
# -----------------------------------------------------------------------------------------------------------------------------------------------
#
#
#   - - - - - - - - -  Generate Priority Reaches and Habitat Attributes (HQ and LF Pathway) - - - - - - - - -
#
#
# -----------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#   HABITAT QUALITY PATHWAY: Apply Habitat Quality Pathway Filters
# ---------------------------------------------------------------------------
# NOTE: the function below runs HQ Pathway for Restoration and Protection
print("----------------------------------------- APPLY HABITAT QUALITY FILTERS FOR PRIORITIZATION --------------------------------------------")
# ------- Habitat Quality Pathway Filter for the Methow-Entiat-Wenatchee ---------------
source(paste(script_path, 'Habitat_Quality_Pathway_Filter.R', sep=""))  # for Methow-Wenatchee-Entiat AND Okanogan functions
# ------- Habitat Quality Pathway Filter for the Okanogan ---------------
source(paste(script_path, 'Habitat_Quality_Pathway_Filter_OKANOGAN.R', sep=""))  # for Methow-Wenatchee-Entiat AND Okanogan functions
# ----- set names of Habitat Quality Scores to sum ------
habitat_quality_scores_colnames_for_sum = c("Stability_Mean" , "CoarseSubstrate_score" ,"Cover-Wood_score", "Flow-SummerBaseFlow_score",
"FloodplainConnectivity_score", "Off-Channel/Side-Channels_score","PoolQuantity&Quality_score",
"Riparian_Mean","Temperature-Rearing_score")
# --------------- generate for all basins except Okanogan ---------------
Habitat_Quality_Pathway_Spring_Chinook = Generate_Habitat_Quality_Output_Table("Spring Chinook", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Steelhead = Generate_Habitat_Quality_Output_Table("Steelhead", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Bull_Trout = Generate_Habitat_Quality_Output_Table("Bull Trout", basins_to_include, habitat_quality_scores_colnames_for_sum )
# View(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
# View(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
# --------------- generate for Okanogan ---------------
colnames_HQ_output = colnames(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
colnames_HQ_habitat_attributes = colnames_HQ_output[7:19]  # habitat attributes to pull for impaired habitat attributes
# NOTE: just need to apply filters to Habitat_Quality_Scores_Okanogan - pull those directly
Habitat_Quality_Pathway_Steelhead_OKANOGAN = Generate_Habitat_Quality_Output_Table_Okanogan("Steelhead" , colnames_HQ_output, colnames_HQ_habitat_attributes)
# View(Habitat_Quality_Pathway_Steelhead_OKANOGAN[['Habitat_Quality_Pathway_Restoration']])
# View(Habitat_Quality_Pathway_Steelhead_OKANOGAN[['Habitat_Quality_Pathway_Protection']])
# Habitat_Quality_Pathway_Steelhead_EXTRA = Habitat_Quality_Pathway_Steelhead
# ---------------- Restoration: add Okanogan to Methow-Wenatchee-Okanogan HQ Output ------------
habitat_quality_scores_colnames_for_combo = colnames(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])[7:(ncol(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])-7)]
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']] = Combine_MetEntWen_and_Okanogan_Habitat_Quality_Output(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead_OKANOGAN [['Habitat_Quality_Pathway_Restoration']],
habitat_quality_scores_colnames_for_combo)
# ---------------- Protection: add Okanogan to Methow-Wenatchee-Okanogan HQ Output ------------
habitat_quality_scores_colnames_for_combo = colnames(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']])[7:(ncol(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']])-4)]
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']] = Combine_MetEntWen_and_Okanogan_Habitat_Quality_Output_Protection(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead_OKANOGAN[['Habitat_Quality_Pathway_Protection']],
habitat_quality_scores_colnames_for_combo)
# ------------------- Compare EDT and RTT Output ----------------------
source(paste(script_path, 'Compare_EDT_and_RTT_output_data.R', sep=""))  # for Methow-Wenatchee-Entiat AND Okanogan functions
# Use these to View the various outputs
# View(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
# View(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']])
# View(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']])
# View(Habitat_Quality_Pathway_Steelhead_OKANOGAN[['Habitat_Quality_Pathway_Restoration']])
# ---------------  Combine Habitat_Quality_Scores with all filters (for all basins) ------
source(paste(script_path, 'Generate_Habitat_Quality_Scores_ALL_FILTERS.R', sep=""))
habitat_quality_scores_colnames_output = c("BankStability_score" ,"ChannelStability_score", "Stability_Mean" , "CoarseSubstrate_score" ,"Cover-Wood_score", "Flow-SummerBaseFlow_score",
"FloodplainConnectivity_score", "Off-Channel/Side-Channels_score","PoolQuantity&Quality_score",
"Riparian-Disturbance_score", "Riparian-CanopyCover_score", "Riparian_Mean","Temperature-Rearing_score")
Habitat_Quality_Scores_ALL_Spring_Chinook = Generate_Habitat_Quality_Output_Table_WITH_FILTERS("Spring Chinook",basins_to_include, habitat_quality_scores_colnames_output)
Habitat_Quality_Scores_ALL_Steelhead = Generate_Habitat_Quality_Output_Table_WITH_FILTERS("Steelhead",basins_to_include, habitat_quality_scores_colnames_output)
if(exclude_bull_trout == "no"){
Habitat_Quality_Scores_ALL_Bull_Trout = Generate_Habitat_Quality_Output_Table_WITH_FILTERS("Bull Trout",basins_to_include, habitat_quality_scores_colnames_output)
}
# ------------ combine individual species into one -----------
write_to_xls_x = FALSE
Habitat_Quality_Scores_ALL_SPECIES = FUNCTION_combine_HQ_ALL_Filters_no_Bull_Trout(Habitat_Quality_Scores_ALL_Spring_Chinook,  Habitat_Quality_Scores_ALL_Steelhead ,write_to_xls_x )
# ---------------------------------------------------------------------------
#   LIMITING FACTORS PATHWAY: Apply Limiting Factor Pathway Filters (Restoration and Protection)
# ---------------------------------------------------------------------------
# NOTE: Protection output includes habitat attributes but does not filter based on habitat attributes
print("----------------------------------------- APPLY LIMITING FACTOR FILTERS FOR PRIORITIZATION --------------------------------------------")
# ------- Limiting Factor Pathway Filter for the Methow-Entiat-Wenatchee ---------------
source(paste(script_path, 'Limiting_Factor_Pathway_Filter.R', sep=""))
# ------- Limiting Factor Pathway Filter for the Okanogan ---------------
source( paste(script_path, 'Limiting_Factor_Pathway_Filter_OKANOGAN.R', sep="") )
# ---------------- Generate Limiting Factor Output for Each Species ----------------
Limiting_Factor_Pathway_Spring_Chinook = Generate_Limiting_Factor_Output_Table("Spring Chinook", basins_to_include)
Limiting_Factor_Pathway_Steelhead = Generate_Limiting_Factor_Output_Table("Steelhead", basins_to_include)
if(exclude_bull_trout == "no"){ Limiting_Factor_Pathway_Bull_Trout = Generate_Limiting_Factor_Output_Table("Bull Trout", basins_to_include) }
View(Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]])
# ---------------------------------------------------------------------------
#  import R Packages
# ---------------------------------------------------------------------------
library(tidyverse)
library(xlsx)
library(writexl)
library(readxl)
# ---------------------------------------------------------------------------
#  Script Criteria for output
# ---------------------------------------------------------------------------
read_MASTER_directly = TRUE # if TRUE - read MASTER from UCSRB servers, if FALSE - read from local
write_MASTER_locally = FALSE # if TRUE -  write tabs in MASTER from UCSRB servers, if FALSE - do not write
basins_to_include = c("Methow",  "Entiat","Wenatchee" , "Okanogan")  # basins to include in simulation
exclude_bull_trout = "no"  # if "yes" -> remove bull trout for WebMap applications
output_Habitat_Quality_and_Habitat_Attribute_Scores = "no"  # enter "yes" or "no" if you want the "flat table" Habitat Attribute output (doubles time to run script)
update_Okanogan_reach_names = "no"  # if "yes" - update Okanogan reach names (should not have to run again - since on 5.Apr.2021 Ryan updated names)
HQ_add_life_stage = "no"   # IF "yes" generate life stages for HQ pathway based on life stage presence in reaches, for combining into ONE Data frame across all pathways and scores
HQ_priority_life_stages = "yes"  # "yes" if use AU Life stages priority reach layer to generate life stages for habitat quality pathway
EDT_convert_Level3_Flow_to_Flow_Variability = "yes" # Level2_Level3_EDT_Crosswalk has "Flow Variability", Limiting_Factors_Okanogan_EDT and HabitatAttribute_Ratings_Level3
core_metric_missing_data_species = c("Steelhead", "Spring Chinook") # species to use for core metrics in missing data (based on data layer Attribute_LifeStage_Crosswalk)
# -----------------------------------------------------------------------------------------------------------------------------------------------
#   Directories of Input and Output data
# -----------------------------------------------------------------------------------------------------------------------------------------------
time1 <- proc.time()[3] # for timing the total time to run the tool
# --------------- directory of scripts (where all the R scripts are located) -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
master_path = 'Data/'
habitat_data_path = paste(master_path,"Habitat_Data/", sep="")
ranking_data_path = paste(master_path,"Ranking_Data/", sep="")
crosswalks_path = paste(master_path,"Crosswalks/", sep="")  # various crosswalks
criteria_and_scoring_path = paste(master_path,"Criteria_and_Scoring/", sep="") # Criteria and Scores for prioritization (Restoration and Protection)
Okanogan_EDT_path = paste(master_path,'Okanogan_EDT/', sep="")   # Data from Okanogan EDT results
reach_assessment_projects_path = paste(master_path,'Reach_Assessment_Projects/', sep="")  # data for projects from Reach Assessments
# -------------- MASTER path and file ----------
folder_x = "Y:/UCRTT/Prioritization/Step 2/Habitat Evaluation/"
master_file = "MASTER_Step2_REVIEWDRAFT_071321.xlsx"
MASTER_Data_path = paste(folder_x,master_file, sep="")   # Data from Okanogan EDT results
# ----------- directory for output (where results are saved) ---------
output_path = 'Output/'
# Old location of the reach attribute (NOT Raw) data:  'Y:/UCRTT/Prioritization/Tables for Tools/'
# -----------------------------------------------------------------------------------------------------------------------------------------------
#
#
#   - - - - - - - - - Read in Data and Criteria   - - - - - - - - -
#
#
# -----------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#     Read in Data
# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
#print("----------------------------------------- Update Okanogan Reach Names (if necessary) --------------------------------------------")
#if(update_Okanogan_reach_names == "yes"){
#  source(paste(script_path, 'FUNCTION_update_names_in_data_frames.R', sep=""))
#}
# ---------------------------------------------------------------------------
#      Criteria for Filters
# ---------------------------------------------------------------------------
print("----------------------------------------- ASSIGN CRITERIA --------------------------------------------")
source(paste(script_path, 'Criteria_Script.R', sep=""))
# ---------------------------------------------------------------------------
#   Prepare Okanogan EDT data
# ---------------------------------------------------------------------------
print("----------------------------------------- Prepare Okanogan EDT prep --------------------------------------------")
source(paste(script_path, 'Okanogan_EDT_data_input_prep.R', sep=""))
# -----------------------------------------------------------------------------------------------------------------------------------------------
#
#
#   - - - - - - - - -  Generate Habitat Attribute (Limiting Factor) Table and Habitat Quality Scores Table  - - - - - - - - -
#
#
# -----------------------------------------------------------------------------------------------------------------------------------------------
# NOTE: running Limiting Factor pathway first since we decided to generate all habitat attribute scores with the Habitat Attribute Scores
#        script, then for the HQ Pathway, pull from those scores
# ---------------------------------------------------------------------------
#   LIMITING FACTOR PATHWAY: Generate Habitat Attribute Table (used in Limiting Factor Pathway)
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITAT ATTRIBUTE SCORES (for Limtiting Factor Pathway) --------------------------------------------")
# some of HQ filters are used in Habitat Attribute generation
source( paste(script_path, 'FUNCTIONS_for_Habitat_Quality_Filters.R', sep="")  )
# script to generate habitat attribute scores
source(paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep="") )
# OUTPUT is Habitat_Attribute_Scores
# ---------------------------------------------------------------------------
#   HABITAT QUALITY PATHWAY: Generate Habitat Quality Restoration and Protection Score
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITAT QUALITY SCORES --------------------------------------------")
source( paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep="") )
# output for all scores is: Habitat_Quality_Scores
# View(Habitat_Quality_Pathway_Output[['Habitat_Quality_Pathway_Restoration']])
# View(Habitat_Quality_Pathway_Output[['Habitat_Quality_Pathway_Protection']])
# ---------------------------------------------------------------------------
#   OKANOGAN: Habitat Quality AND Limiting Factor Pathway
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE OKANOGAN HABITAT QUALITY AND LIMTING FACTOR SCORES --------------------------------------------")
# Okanogan: generate Habitat Attribute Scores for Habitat Quality (just Level 2) and Limiting Factor (Level 3 filter 1s and 3s to generate Level 2s)
# NOTE: Habitat_Quality_Scorse_Okanogan and Habiat_Attribute_Scores_Okanogan are generated by this script
source( paste(script_path, 'FUNCTIONS_Okanogan_EDT_Habitat_Attribute_Habitat_Quality_Scripts.R', sep="") )
# NOTE: these output should include all reaches in the Okanogan - no filters
# HQ Pathway: Habitat_Quality_Scores_Okanogan
# LF Pathway: Habitat_Attribute_Scores_Okanogan
# Individual Life stages for the Okanogan: Adult_Migration_LF_Okanogan, Fry_LF_Okanogan, Holding_and_Maturation_LF_Okanogan,
#                   Smolt_Outmigration_LF_Okanogan, Spawning_and_Incubation_LF_Okanogan, Summer_Rearing_LF_Okanogan, Winter_Rearing_LF_Okanogan
# -----------------------------------------------------------------------------------------------------------------------------------------------
#
#
#   - - - - - - - - -  Generate Priority Reaches and Habitat Attributes (HQ and LF Pathway) - - - - - - - - -
#
#
# -----------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#   HABITAT QUALITY PATHWAY: Apply Habitat Quality Pathway Filters
# ---------------------------------------------------------------------------
# NOTE: the function below runs HQ Pathway for Restoration and Protection
print("----------------------------------------- APPLY HABITAT QUALITY FILTERS FOR PRIORITIZATION --------------------------------------------")
# ------- Habitat Quality Pathway Filter for the Methow-Entiat-Wenatchee ---------------
source(paste(script_path, 'Habitat_Quality_Pathway_Filter.R', sep=""))  # for Methow-Wenatchee-Entiat AND Okanogan functions
# ------- Habitat Quality Pathway Filter for the Okanogan ---------------
source(paste(script_path, 'Habitat_Quality_Pathway_Filter_OKANOGAN.R', sep=""))  # for Methow-Wenatchee-Entiat AND Okanogan functions
# ----- set names of Habitat Quality Scores to sum ------
habitat_quality_scores_colnames_for_sum = c("Stability_Mean" , "CoarseSubstrate_score" ,"Cover-Wood_score", "Flow-SummerBaseFlow_score",
"FloodplainConnectivity_score", "Off-Channel/Side-Channels_score","PoolQuantity&Quality_score",
"Riparian_Mean","Temperature-Rearing_score")
# --------------- generate for all basins except Okanogan ---------------
Habitat_Quality_Pathway_Spring_Chinook = Generate_Habitat_Quality_Output_Table("Spring Chinook", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Steelhead = Generate_Habitat_Quality_Output_Table("Steelhead", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Bull_Trout = Generate_Habitat_Quality_Output_Table("Bull Trout", basins_to_include, habitat_quality_scores_colnames_for_sum )
# View(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
# View(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
# --------------- generate for Okanogan ---------------
colnames_HQ_output = colnames(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
colnames_HQ_habitat_attributes = colnames_HQ_output[7:19]  # habitat attributes to pull for impaired habitat attributes
# NOTE: just need to apply filters to Habitat_Quality_Scores_Okanogan - pull those directly
Habitat_Quality_Pathway_Steelhead_OKANOGAN = Generate_Habitat_Quality_Output_Table_Okanogan("Steelhead" , colnames_HQ_output, colnames_HQ_habitat_attributes)
# View(Habitat_Quality_Pathway_Steelhead_OKANOGAN[['Habitat_Quality_Pathway_Restoration']])
# View(Habitat_Quality_Pathway_Steelhead_OKANOGAN[['Habitat_Quality_Pathway_Protection']])
# Habitat_Quality_Pathway_Steelhead_EXTRA = Habitat_Quality_Pathway_Steelhead
# ---------------- Restoration: add Okanogan to Methow-Wenatchee-Okanogan HQ Output ------------
habitat_quality_scores_colnames_for_combo = colnames(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])[7:(ncol(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])-7)]
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']] = Combine_MetEntWen_and_Okanogan_Habitat_Quality_Output(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead_OKANOGAN [['Habitat_Quality_Pathway_Restoration']],
habitat_quality_scores_colnames_for_combo)
# ---------------- Protection: add Okanogan to Methow-Wenatchee-Okanogan HQ Output ------------
habitat_quality_scores_colnames_for_combo = colnames(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']])[7:(ncol(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']])-4)]
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']] = Combine_MetEntWen_and_Okanogan_Habitat_Quality_Output_Protection(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']],
Habitat_Quality_Pathway_Steelhead_OKANOGAN[['Habitat_Quality_Pathway_Protection']],
habitat_quality_scores_colnames_for_combo)
# ------------------- Compare EDT and RTT Output ----------------------
source(paste(script_path, 'Compare_EDT_and_RTT_output_data.R', sep=""))  # for Methow-Wenatchee-Entiat AND Okanogan functions
# Use these to View the various outputs
# View(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
# View(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']])
# View(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']])
# View(Habitat_Quality_Pathway_Steelhead_OKANOGAN[['Habitat_Quality_Pathway_Restoration']])
# ---------------  Combine Habitat_Quality_Scores with all filters (for all basins) ------
source(paste(script_path, 'Generate_Habitat_Quality_Scores_ALL_FILTERS.R', sep=""))
habitat_quality_scores_colnames_output = c("BankStability_score" ,"ChannelStability_score", "Stability_Mean" , "CoarseSubstrate_score" ,"Cover-Wood_score", "Flow-SummerBaseFlow_score",
"FloodplainConnectivity_score", "Off-Channel/Side-Channels_score","PoolQuantity&Quality_score",
"Riparian-Disturbance_score", "Riparian-CanopyCover_score", "Riparian_Mean","Temperature-Rearing_score")
Habitat_Quality_Scores_ALL_Spring_Chinook = Generate_Habitat_Quality_Output_Table_WITH_FILTERS("Spring Chinook",basins_to_include, habitat_quality_scores_colnames_output)
Habitat_Quality_Scores_ALL_Steelhead = Generate_Habitat_Quality_Output_Table_WITH_FILTERS("Steelhead",basins_to_include, habitat_quality_scores_colnames_output)
if(exclude_bull_trout == "no"){
Habitat_Quality_Scores_ALL_Bull_Trout = Generate_Habitat_Quality_Output_Table_WITH_FILTERS("Bull Trout",basins_to_include, habitat_quality_scores_colnames_output)
}
# ------------ combine individual species into one -----------
write_to_xls_x = FALSE
Habitat_Quality_Scores_ALL_SPECIES = FUNCTION_combine_HQ_ALL_Filters_no_Bull_Trout(Habitat_Quality_Scores_ALL_Spring_Chinook,  Habitat_Quality_Scores_ALL_Steelhead ,write_to_xls_x )
# ---------------------------------------------------------------------------
#   LIMITING FACTORS PATHWAY: Apply Limiting Factor Pathway Filters (Restoration and Protection)
# ---------------------------------------------------------------------------
# NOTE: Protection output includes habitat attributes but does not filter based on habitat attributes
print("----------------------------------------- APPLY LIMITING FACTOR FILTERS FOR PRIORITIZATION --------------------------------------------")
# ------- Limiting Factor Pathway Filter for the Methow-Entiat-Wenatchee ---------------
source(paste(script_path, 'Limiting_Factor_Pathway_Filter.R', sep=""))
# ------- Limiting Factor Pathway Filter for the Okanogan ---------------
source( paste(script_path, 'Limiting_Factor_Pathway_Filter_OKANOGAN.R', sep="") )
# ---------------- Generate Limiting Factor Output for Each Species ----------------
Limiting_Factor_Pathway_Spring_Chinook = Generate_Limiting_Factor_Output_Table("Spring Chinook", basins_to_include)
species = "Steelhead"
basins = c("Methow", "Entiat", "Wenatchee", "Okanogan")
View(Limiting_Factor_Pathway_Spring_Chinook[["Limiting_Factor_Pathway_Restoration"]])
if(species == "Spring Chinook"){
# ---------------- species reach ---------------
species_reach = 'Spring.Chinook.Reach'
# ---------------- species AU Rank RESTORATION ----------
AU_rank_name_restoration = 'SPCHNTier_Restoration'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection = 'SPCHNTier_Protection'
# --------------- Life stage Sum column name ----------
life_stage_sum_column = 'SPCHN Number of Life Stages'
# ---------------- life stage priority names ---------
life_stages_priorities_species_specific =  life_stages_priorities[['spring_chinook_life_stages']]
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Spring_Chinook_Limiting_Factors_RESTORATOIN" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
protection_output_name = paste(paste("Spring_Chinook_Limiting_Factors_PROTECTION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
}else if(species == "Steelhead"){
# ---------------- species reach ---------------
species_reach = 'Steelhead.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration = 'STLTier_Restoration'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection = 'STLTier_Protection'
# --------------- Life stage Sum column name ----------
life_stage_sum_column = 'SH Number of Life Stages'
# ---------------- life stage priority names ---------
life_stages_priorities_species_specific =  life_stages_priorities[['steelhead_life_stages']]
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Steelhead_Limiting_Factors_RESTORATOIN" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
protection_output_name = paste(paste("Steelhead_Limiting_Factors_PROTECTION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
}else if(species == "Bull Trout"){
# ---------------- species reach ---------------
species_reach = 'Bull.Trout.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration = 'BTTier_Restoration'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection = 'BTTier_Protection'
# --------------- Life stage Sum column name ----------
life_stage_sum_column = 'BT Num Life Stages'
# ---------------- life stage priority names ---------
life_stages_priorities_species_specific =  life_stages_priorities[['bull_trout_life_stages']]
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Bull_Trout_Limiting_Factors_RESTORATOIN" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
protection_output_name = paste(paste("Bull_Trout_Limiting_Factors_PROTECTION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
}else{
print('Incorrectly entered species name - re-type species name')
}
#  ---------------------------------------------------------------------------------
#           Establish Reach Information Data Frame Just for this Output
#  ---------------------------------------------------------------------------------
# -------- Reach Information data frame for this species -----------
Species_Reach_Information_data = Reach_Information_data
# ---------- AU Ranks data frame for this species ---------
Species_AU_Ranks_data = AU_Ranks_data
print(paste("Total Initial Reaches (LF Pathway): ", nrow(Species_Reach_Information_data), sep=""))
# -------------------- add additional column for this particular species reach presence ---------------
Species_Reach_Information_data$Species_Reaches = Species_Reach_Information_data[species_reach]
# ----------------------- filter out for only reaches with this species --------------
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
print(paste("Total reaches after species-reach filter: ", nrow(Species_Reach_Information_data), sep=""))
species
# -------------------- add additional column for this particular species reach presence ---------------
Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column"] = Life_Stage_Priorities_AU_and_Reach_data[life_stage_sum_column]
# ----------------------- filter out for Habitat_Quality_Scores reaches with Habitat Quality Score criteria --------------
Life_Stage_Priorities_AU_and_Reach_data_FILTERED = Life_Stage_Priorities_AU_and_Reach_data %>%
filter(Life_Stage_Sum_Column   >=   Sum_Life_Stage_Criteria)
# ------------------------ identify reaches that pass through the RESTORATION filter ----------
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter(ReachName   %in%   Life_Stage_Priorities_AU_and_Reach_data_FILTERED$`ReachName`)
print(paste("Total reaches after only having basins of interest: ", nrow(Species_Reach_Information_data), sep=""))
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data["Species_AU_Ranks"] = Species_AU_Ranks_data[AU_rank_name_restoration]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_restoration = Species_AU_Ranks_data %>%
filter(Species_AU_Ranks    %in%   AU_Rank)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Species_Reach_Information_data_restoration = Species_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_restoration$`Assessment Unit`)
print(paste("Restoration - AU rank filter: ", nrow(Species_Reach_Information_data_restoration), sep=""))
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data["Species_AU_Ranks"] = Species_AU_Ranks_data[AU_rank_name_protection]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_protection = Species_AU_Ranks_data %>%
filter(Species_AU_Ranks    %in%   AU_Rank)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Species_Reach_Information_data_protection = Species_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_protection$`Assessment Unit`)
print(paste("Protection - total after AU rank filter: ", nrow(Species_Reach_Information_data_protection), sep=""))
View(Species_Reach_Information_data_restoration)
Limiting_Factor_Pathway_Steelhead = Generate_Limiting_Factor_Output_Table("Steelhead", basins_to_include)
View(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']])
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']] = Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']][-which(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']]$Basin == "Okanogan"), ]
# ---------------- add EDT data --------------------
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']] = rbind( Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead_OKANOGAN[['Limiting_Factor_Pathway_Restoration']] )
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']] = rbind( Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead_OKANOGAN[['Limiting_Factor_Pathway_Protection']] )
if(exclude_bull_trout == "no"){ Limiting_Factor_Pathway_Bull_Trout = Generate_Limiting_Factor_Output_Table("Bull Trout", basins_to_include) }
# --------------- generate for Okanogan ---------------
Limiting_Factor_Pathway_Steelhead_OKANOGAN = Generate_Limiting_Factor_Output_Table_Okanogan("Steelhead", "Okanogan" )
Limiting_Factor_Pathway_Steelhead_OKANOGAN_no_level3 = Generate_Limiting_Factor_Output_Table_Okanogan_no_level3("Steelhead", "Okanogan")
# ------------------- combine "regular" and EDT data -------------------
# ---------- first remove Okanogan reaches ---------
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']] = Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']][-which(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']]$Basin == "Okanogan"), ]
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']] = Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']][-which(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']]$Basin == "Okanogan"), ]
# ---------------- add EDT data --------------------
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']] = rbind( Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead_OKANOGAN[['Limiting_Factor_Pathway_Restoration']] )
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']] = rbind( Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']],
Limiting_Factor_Pathway_Steelhead_OKANOGAN[['Limiting_Factor_Pathway_Protection']] )
View(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']] )
# NOTE: 1) fix action_categories_output so you can add it to any data frame
print("----------------------------------------- GENERATE ACTIONS CATEGORIES FOR HQ AND LF PATHWAY --------------------------------------------")
source(paste(script_path, 'FUNCTIONS_for_Generating_Action_Categories.R', sep=""))
# ------------------------------------------------------------------------------------
#              Generate Action Categories
# ------------------------------------------------------------------------------------
# -----------------  Habitat Quality Pathway  -----------------------
Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
if(exclude_bull_trout == "no"){
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']])
}
# View(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']][which(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']]$Basin == "Okanogan"),])
# --------------------  Limiting Factors Pathway  --------------------
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']])
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']])
if(exclude_bull_trout == "no"){
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']])
}
# View(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']][which(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']]$Basin == "Okanogan"),])
# ---------------------------------------------------------------------------
#     Summarize Habitat Attributes and Action Categories for each Reach within each Species and Score (Unacceptable, At Risk, etc.)
# ---------------------------------------------------------------------------
# NOTE: just for Restoration
print("----------------------------------------- COMBINE HQ AND LF OUTPUT --------------------------------------------")
# -------------- Generate Functions ---------------
source(paste(script_path, 'FUNCTIONS_for_Combining_Action_Tables.R', sep=""))
source(paste(script_path, 'FUNCTIONS_for_Combining_Reach_Habitat_Attribute_combos.R', sep=""))
# ---------------- Run Functions to summarize within a single pathway AND score category (Unacceptable, At Risk) -----------------------
Habitat_Quality_Restoration_Unacceptable = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH("one", "restoration")
Habitat_Quality_Restoration_At_Risk = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH("two and three", "restoration")
Habitat_Quality_Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH("one thru three", "restoration")
Limiting_Factor_Restoration_Unacceptable = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH("one", "restoration")
Limiting_Factor_Restoration_At_Risk = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH("two and three", "restoration")
Limiting_Factor_Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH("one thru three", "restoration")
View(Limiting_Factor_Restoration_Unacceptable_and_At_Risk)
