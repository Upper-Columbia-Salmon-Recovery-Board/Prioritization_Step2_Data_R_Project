# -------------------- pull if present -----------------
if(nrow(Habitat_Attribute_Scores_x)>0){
present_data_x = which(Habitat_Attribute_Scores_x$Habitat_Attribute_Score > 0)
Habitat_Attribute_Scores_x = Habitat_Attribute_Scores_x[ ,c("ReachName", "Assessment.Unit") ]
Habitat_Attribute_Scores_x$Data_Presence = "missing"
Habitat_Attribute_Scores_x$Data_Presence[present_data_x] = "present"
Habitat_Attribute_Scores_x = Habitat_Attribute_Scores_x[,c("ReachName", "Data_Presence")]
colnames(Habitat_Attribute_Scores_x) = c("ReachName",habitat_attribute_x )
# ----------------- merge ---------------
data_gap_df = merge(data_gap_df, Habitat_Attribute_Scores_x, by="ReachName", all.x=TRUE)
}else{
print("Data not in Habitat Attribute Scores: ")
print(habitat_attribute_x)
}
}
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      Loop through OKANOGAN to identify missing data
# -----------------------------------------------------------------------------------------------------------------------------------------------
for(habitat_attribute_x in missing_data_metrics){
#col_data_gap_df = which(colnames(data_gap_df) == habitat_attribute_x)
# ------------------- add to Habitat_Quality_Data_Gaps --------------
#
# ---------------- pull only rows with the habitat_attribute_x in Habitat_Attribute_Scores --------
Habitat_Attribute_Scores_x = Habitat_Attribute_Scores_Okanogan[which(Habitat_Attribute_Scores_Okanogan$Habitat_Attribute == habitat_attribute_x), ]
# -------------------- pull if present -----------------
if( nrow(Habitat_Attribute_Scores_x)>0 ){
for(rowx in 1:nrow(Habitat_Attribute_Scores_x)){
reach_x = Habitat_Attribute_Scores_x$ReachName[rowx]
row_data_gap_df = which(data_gap_df$ReachName == reach_x)
# -------------- if okanogan data is missing (NA) for this habitat attribute and reach -----------
if( is.na(Habitat_Attribute_Scores_x$Habitat_Attribute_Score[rowx]) ){
data_gap_df[row_data_gap_df,habitat_attribute_x] = "missing"
# ----------------- IF okanogan data is present for this habitat attribute and reach ---------
}else if(Habitat_Attribute_Scores_x$Habitat_Attribute_Score[rowx] > 0){
data_gap_df[row_data_gap_df,habitat_attribute_x] = "present"
# -------------- IF okanogan data is not present for this habitat attribute and reach -----
}else{data_gap_df[row_data_gap_df,habitat_attribute_x] = "missing" }
}
}
}
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      List habitat attributes that are missing
# -----------------------------------------------------------------------------------------------------------------------------------------------
colnames_habitat_attributes = colnames(data_gap_df)
all_missing_data = as.data.frame(data_gap_df[,c("ReachName")])
all_missing_data$missing_data_x = NA
for(row_x in 1:nrow(data_gap_df) ){
# ----------- identify which attributes are missing -----
missing_x = which(data_gap_df[row_x, ] == "missing")
missing_habitat_attribute_x = colnames_habitat_attributes[missing_x]
# ------------ add to other reaches -----------
row_cell_x = paste(missing_habitat_attribute_x, collapse=", ")
all_missing_data$missing_data_x[row_x] = row_cell_x
}
colnames(all_missing_data) = c("ReachName","Data_Gap")
# -------------- add column --------
Habitat_Quality_Data_Gaps = merge(Habitat_Quality_Data_Gaps,  all_missing_data, by="ReachName", all.x=TRUE)
# -----------------------------------------------------------------------------------------------------------------------------------------------
#     Add Data Source
# -----------------------------------------------------------------------------------------------------------------------------------------------
habitat_raw_data_x = habitat_raw_data[,c("ReachName","Data_Source")]
colnames(habitat_raw_data_x) = c("ReachName", "Primary_Data_Source")
Habitat_Quality_Data_Gaps = merge(Habitat_Quality_Data_Gaps, habitat_raw_data_x, by="ReachName", all.x=TRUE)
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      IF no data is missing - add "no data are missing"
# -----------------------------------------------------------------------------------------------------------------------------------------------
no_data_missing_x = which(Habitat_Quality_Data_Gaps$Data_Gap == "")
Habitat_Quality_Data_Gaps$Data_Gap[no_data_missing_x] = "no data are missing"
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      IF okanogan - add EDT
# -----------------------------------------------------------------------------------------------------------------------------------------------
Okanogan_Basin_x = which(Habitat_Quality_Data_Gaps$Basin == "Okanogan")
Habitat_Quality_Data_Gaps$Primary_Data_Source[Okanogan_Basin_x] = "Okanogan EDT"
# -----------------------------------------------------------------------------------------------------------------------------------------------
#     Remove the layers where no data are missing
# -----------------------------------------------------------------------------------------------------------------------------------------------
Habitat_Quality_Data_Gaps = Habitat_Quality_Data_Gaps[which(Habitat_Quality_Data_Gaps$Data_Gap != "no data are missing"),]
# -----------------------------------------------------------------------------------------------------------------------------------------------
#    Update Attribute Names
# -----------------------------------------------------------------------------------------------------------------------------------------------
# -------------------- Fines/Embeddedness ------------------
Habitat_Quality_Data_Gaps$Data_Gap  = gsub("%Fines/Embeddedness", "PRCNT Fines and Embeddedness", Habitat_Quality_Data_Gaps$Data_Gap )
Habitat_Quality_Data_Gaps$Data_Gap  = gsub("% Fines/Embeddedness", "PRCNT Fines and Embeddedness", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Pool Quantity and Quality ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("PoolQuantity&Quality", "Pool Quantity and Quality", Habitat_Quality_Data_Gaps$Data_Gap )
Habitat_Quality_Data_Gaps$Data_Gap = gsub("Pool Quantity & Quality", "Pool Quantity and Quality", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Entrainment and Stranding ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("Entrainment/Stranding", "Entrainment and Stranding", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Floodplain Connectivity ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("FloodplainConnectivity", "Off-Channel- Floodplain", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Off-Channel/Side-Channels------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("Off-Channel/Side-Channels", "Off-Channel- Side-Channels", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Floodplain Connectivity ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("FloodplainConnectivity", "Off-Channel- Floodplain", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Floodplain Connectivity ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("Off-Channel- Floodplain", "Floodplain Connectivity", Habitat_Quality_Data_Gaps$Data_Gap )
# -----------------------------------------------------------------------------------------------------------------------------------------------
#    Add whether a reach was a potential reach layer (yes/no)  potential_priority_reach_yes_no
# -----------------------------------------------------------------------------------------------------------------------------------------------
Output_ALL_species_and_reaches_SLIM = Output_ALL_species_and_reaches[,c("ReachName","Potential_Priority_Reach_all_species_restoration_or_protection", "Tier_1_all_species_restoration_or_protection")]
#colnames(Output_ALL_species_and_reaches_SLIM)[1] = "Reach Name"
Habitat_Quality_Data_Gaps2  = merge(Habitat_Quality_Data_Gaps, Output_ALL_species_and_reaches_SLIM, by="ReachName", all.x=TRUE)
colnames(Habitat_Quality_Data_Gaps2) = c("Reach Name", "Basin", "Assessment Unit", "Missing Data", "Primary Data Source", "Potential Priority Reach (yes or no)" , "Tier 1 Restoration or Protection (yes or no)")
# -----------------------------------------------------------------------------------------------------------------------------------------------
#    Add whether a reach was a potential reach layer (yes/no)  potential_priority_reach_yes_no
# -----------------------------------------------------------------------------------------------------------------------------------------------
Output_ALL_species_and_reaches_SLIM_SprChn_Stld = Output_ALL_species_and_reaches[,c("ReachName","Potential_Priority_Reach_all_species_restoration_or_protection", "Spring_Chinook.AU.Restoration.Rank", "Spring_Chinook.AU.Protection.Rank",
"Steelhead.AU.Restoration.Rank", "Steelhead.AU.Protection.Rank" )]
#colnames(Output_ALL_species_and_reaches_SLIM)[1] = "Reach Name"
Habitat_Quality_Data_Gaps_SprChn_Stld = merge(Habitat_Quality_Data_Gaps, Output_ALL_species_and_reaches_SLIM_SprChn_Stld, by="ReachName", all.x=TRUE)
colnames(Habitat_Quality_Data_Gaps_SprChn_Stld) = c("Reach Name", "Basin", "Assessment Unit", "Missing Data", "Primary Data Source", "Potential Priority Reach (yes or no)" ,
"Tier 1 Spring Chinook - Restoration", "Tier 1 Spring Chinook - Protection", "Tier 1 Steelhead - Restoration", "Tier 1 Steelhead - Protection")
tier1_x = which(Habitat_Quality_Data_Gaps_SprChn_Stld$`Tier 1 Spring Chinook - Restoration` == 1 |
Habitat_Quality_Data_Gaps_SprChn_Stld$`Tier 1 Spring Chinook - Protection` == 1 |
Habitat_Quality_Data_Gaps_SprChn_Stld$`Tier 1 Steelhead - Restoration` == 1 |
Habitat_Quality_Data_Gaps_SprChn_Stld$`Tier 1 Steelhead - Protection` == 1 )
length(tier1_x)
dim(Habitat_Quality_Data_Gaps_SprChn_Stld)
colnames(Habitat_Quality_Data_Gaps_SprChn_Stld)
colnames(Habitat_Quality_Data_Gaps_Coarse_Substrate)
# ---------------------- Pool Quality and Quantity ----------------
Habitat_Quality_Data_Gaps_Pool_True_False = grepl("Pool Quantity and Quality", Habitat_Quality_Data_Gaps_SprChn_Stld$`Missing Data`)
Habitat_Quality_Data_Gaps_Pool = Habitat_Quality_Data_Gaps_SprChn_Stld[Habitat_Quality_Data_Gaps_Pool_True_False, ]
Habitat_Quality_Data_Gaps_Pool = Habitat_Quality_Data_Gaps_Pool[columns_to_pull]
remove_col_x = "Missing Data"
columns_to_pull = colnames(Habitat_Quality_Data_Gaps)
columns_to_pull = columns_to_pull[-which(columns_to_pull==remove_col_x)]
Habitat_Quality_Data_Gaps_Pool = Habitat_Quality_Data_Gaps_Pool[columns_to_pull]
output_path_x =  paste(output_path,'Habitat_Quality_Data_Missing_Pool_Quant_and_Qual.xlsx', sep="")
write_xlsx(Habitat_Quality_Data_Gaps_Pool,output_path_x )
# --------------------- Coarse Substrate -----------------
Habitat_Quality_Data_Gaps_Coarse_Substrate_True_False = grepl("Coarse Substrate", Habitat_Quality_Data_Gaps_SprChn_Stld$`Missing Data`)
Habitat_Quality_Data_Gaps_Coarse_Substrate = Habitat_Quality_Data_Gaps_SprChn_Stld[Habitat_Quality_Data_Gaps_Coarse_Substrate_True_False, ]
Habitat_Quality_Data_Gaps_Coarse_Substrate = Habitat_Quality_Data_Gaps_Coarse_Substrate[columns_to_pull]
output_path_x =  paste(output_path,'Habitat_Quality_Data_Missing_Coarse_Substrate.xlsx', sep="")
write_xlsx(Habitat_Quality_Data_Gaps_Coarse_Substrate,output_path_x )
# -------------------- Cover- Wood ------------------
Habitat_Quality_Data_Gaps_Cover_Wood_True_False = grepl("Cover- Wood", Habitat_Quality_Data_Gaps_SprChn_Stld$`Missing Data`)
Habitat_Quality_Data_Gaps_Cover_Wood = Habitat_Quality_Data_Gaps_SprChn_Stld[Habitat_Quality_Data_Gaps_Cover_Wood_True_False, ]
Habitat_Quality_Data_Gaps_Cover_Wood = Habitat_Quality_Data_Gaps_Cover_Wood[columns_to_pull]
output_path_x =  paste(output_path,'Habitat_Quality_Data_Missing_Cover_Wood.xlsx', sep="")
write_xlsx(Habitat_Quality_Data_Gaps_Cover_Wood,output_path_x )
dim(Habitat_Quality_Data_Gaps_Pool)
dim(Habitat_Quality_Data_Gaps_SprChn_Stld)
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      Start the Data Frame
# -----------------------------------------------------------------------------------------------------------------------------------------------
Habitat_Quality_Data_Gaps = Habitat_Quality_Scores[, c("ReachName","Basin","Assessment.Unit")]
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      go through each habitat attribute and list whether missing or not
# -----------------------------------------------------------------------------------------------------------------------------------------------
# --------- NEW - pull core metrics AND HQ metrics -------------
HQ_metrics = c("Bank Stability",  "Channel Stability", "Coarse Substrate", "Cover- Wood", "Flow- Summer Base Flow" ,
"Floodplain Connectivity" , "Off-Channel/Side-Channels" ,"Pool Quantity & Quality" ,
"Riparian- Canopy Cover", "Riparian-Disturbance" , "Temperature- Rearing" )
# --------- pull core metrics for specific species ---------
rows_pull = c()
for(species_x in core_metric_missing_data_species){
x = which(Attribute_LifeStage_Crosswalk$Species == species_x)
rows_pull = c(rows_pull,x)
}
rows_pull = rows_pull[order(rows_pull)]
Attribute_LifeStage_Crosswalk_updated = Attribute_LifeStage_Crosswalk[rows_pull,]
# ------------ pull core metrics only ----------
Attribute_LifeStage_Crosswalk_updated = Attribute_LifeStage_Crosswalk_updated[which(Attribute_LifeStage_Crosswalk_updated$`Life Stage Core Metric?` == "x"), ]
Core_metrics = unique(Attribute_LifeStage_Crosswalk_updated$`Habitat Attribute`)
# ------------ combine HQ and Core metrics -------------
missing_data_metrics = c(HQ_metrics, Core_metrics)
missing_data_metrics = unique(missing_data_metrics)[order(unique(missing_data_metrics))]
# ------- OLD - just pulled HQ scores (June 25, 2021) --------
#habitat_attributes_for_missing_layer = c("BankStability_score",  "ChannelStability_score", "CoarseSubstrate_score", "Cover-Wood_score", "Flow-SummerBaseFlow_score" ,
#                                        "Off-Channel-Floodplain_score" , "Off-Channel-Side-Channels_score" ,"PoolQuantity&Quality_score" ,
#                                        "Riparian-CanopyCover_score", "Riparian-Disturbance_score" , "Temperature-Rearing_score" )
#habitat_attributes_for_missing_layer_COLUMN_NAMES = c("Bank Stability",  "Channel Stability", "Coarse Substrate", "Cover-Wood", "Flow-Summer Base Flow" ,
#                                                      "Off-Channel-Floodplain" , "Off-Channel-Side-Channels" ,"Pool Quantity & Quality" ,
#                                                      "Riparian-Canopy Cover", "Riparian-Disturbance" , "Temperature-Rearing" )
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      Loop through to identify missing data
# -----------------------------------------------------------------------------------------------------------------------------------------------
data_gap_df = as.data.frame( Habitat_Quality_Data_Gaps$ReachName )
colnames(data_gap_df) = c("ReachName")
for(habitat_attribute_x in missing_data_metrics){
# ------------------- add to Habitat_Quality_Data_Gaps --------------
#
# ---------------- pull only rows with the habitat_attribute_x in Habitat_Attribute_Scores --------
Habitat_Attribute_Scores_x = Habitat_Attribute_Scores[which(Habitat_Attribute_Scores$Habitat_Attribute == habitat_attribute_x), ]
# -------------------- pull if present -----------------
if(nrow(Habitat_Attribute_Scores_x)>0){
present_data_x = which(Habitat_Attribute_Scores_x$Habitat_Attribute_Score > 0)
Habitat_Attribute_Scores_x = Habitat_Attribute_Scores_x[ ,c("ReachName", "Assessment.Unit") ]
Habitat_Attribute_Scores_x$Data_Presence = "missing"
Habitat_Attribute_Scores_x$Data_Presence[present_data_x] = "present"
Habitat_Attribute_Scores_x = Habitat_Attribute_Scores_x[,c("ReachName", "Data_Presence")]
colnames(Habitat_Attribute_Scores_x) = c("ReachName",habitat_attribute_x )
# ----------------- merge ---------------
data_gap_df = merge(data_gap_df, Habitat_Attribute_Scores_x, by="ReachName", all.x=TRUE)
}else{
print("Data not in Habitat Attribute Scores: ")
print(habitat_attribute_x)
}
}
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      Loop through OKANOGAN to identify missing data
# -----------------------------------------------------------------------------------------------------------------------------------------------
for(habitat_attribute_x in missing_data_metrics){
#col_data_gap_df = which(colnames(data_gap_df) == habitat_attribute_x)
# ------------------- add to Habitat_Quality_Data_Gaps --------------
#
# ---------------- pull only rows with the habitat_attribute_x in Habitat_Attribute_Scores --------
Habitat_Attribute_Scores_x = Habitat_Attribute_Scores_Okanogan[which(Habitat_Attribute_Scores_Okanogan$Habitat_Attribute == habitat_attribute_x), ]
# -------------------- pull if present -----------------
if( nrow(Habitat_Attribute_Scores_x)>0 ){
for(rowx in 1:nrow(Habitat_Attribute_Scores_x)){
reach_x = Habitat_Attribute_Scores_x$ReachName[rowx]
row_data_gap_df = which(data_gap_df$ReachName == reach_x)
# -------------- if okanogan data is missing (NA) for this habitat attribute and reach -----------
if( is.na(Habitat_Attribute_Scores_x$Habitat_Attribute_Score[rowx]) ){
data_gap_df[row_data_gap_df,habitat_attribute_x] = "missing"
# ----------------- IF okanogan data is present for this habitat attribute and reach ---------
}else if(Habitat_Attribute_Scores_x$Habitat_Attribute_Score[rowx] > 0){
data_gap_df[row_data_gap_df,habitat_attribute_x] = "present"
# -------------- IF okanogan data is not present for this habitat attribute and reach -----
}else{data_gap_df[row_data_gap_df,habitat_attribute_x] = "missing" }
}
}
}
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      List habitat attributes that are missing
# -----------------------------------------------------------------------------------------------------------------------------------------------
colnames_habitat_attributes = colnames(data_gap_df)
all_missing_data = as.data.frame(data_gap_df[,c("ReachName")])
all_missing_data$missing_data_x = NA
for(row_x in 1:nrow(data_gap_df) ){
# ----------- identify which attributes are missing -----
missing_x = which(data_gap_df[row_x, ] == "missing")
missing_habitat_attribute_x = colnames_habitat_attributes[missing_x]
# ------------ add to other reaches -----------
row_cell_x = paste(missing_habitat_attribute_x, collapse=", ")
all_missing_data$missing_data_x[row_x] = row_cell_x
}
colnames(all_missing_data) = c("ReachName","Data_Gap")
# -------------- add column --------
Habitat_Quality_Data_Gaps = merge(Habitat_Quality_Data_Gaps,  all_missing_data, by="ReachName", all.x=TRUE)
# -----------------------------------------------------------------------------------------------------------------------------------------------
#     Add Data Source
# -----------------------------------------------------------------------------------------------------------------------------------------------
habitat_raw_data_x = habitat_raw_data[,c("ReachName","Data_Source")]
colnames(habitat_raw_data_x) = c("ReachName", "Primary_Data_Source")
Habitat_Quality_Data_Gaps = merge(Habitat_Quality_Data_Gaps, habitat_raw_data_x, by="ReachName", all.x=TRUE)
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      IF no data is missing - add "no data are missing"
# -----------------------------------------------------------------------------------------------------------------------------------------------
no_data_missing_x = which(Habitat_Quality_Data_Gaps$Data_Gap == "")
Habitat_Quality_Data_Gaps$Data_Gap[no_data_missing_x] = "no data are missing"
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      IF okanogan - add EDT
# -----------------------------------------------------------------------------------------------------------------------------------------------
Okanogan_Basin_x = which(Habitat_Quality_Data_Gaps$Basin == "Okanogan")
Habitat_Quality_Data_Gaps$Primary_Data_Source[Okanogan_Basin_x] = "Okanogan EDT"
# -----------------------------------------------------------------------------------------------------------------------------------------------
#     Remove the layers where no data are missing
# -----------------------------------------------------------------------------------------------------------------------------------------------
Habitat_Quality_Data_Gaps = Habitat_Quality_Data_Gaps[which(Habitat_Quality_Data_Gaps$Data_Gap != "no data are missing"),]
# -----------------------------------------------------------------------------------------------------------------------------------------------
#    Update Attribute Names
# -----------------------------------------------------------------------------------------------------------------------------------------------
# -------------------- Fines/Embeddedness ------------------
Habitat_Quality_Data_Gaps$Data_Gap  = gsub("%Fines/Embeddedness", "PRCNT Fines and Embeddedness", Habitat_Quality_Data_Gaps$Data_Gap )
Habitat_Quality_Data_Gaps$Data_Gap  = gsub("% Fines/Embeddedness", "PRCNT Fines and Embeddedness", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Pool Quantity and Quality ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("PoolQuantity&Quality", "Pool Quantity and Quality", Habitat_Quality_Data_Gaps$Data_Gap )
Habitat_Quality_Data_Gaps$Data_Gap = gsub("Pool Quantity & Quality", "Pool Quantity and Quality", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Entrainment and Stranding ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("Entrainment/Stranding", "Entrainment and Stranding", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Floodplain Connectivity ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("FloodplainConnectivity", "Off-Channel- Floodplain", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Off-Channel/Side-Channels------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("Off-Channel/Side-Channels", "Off-Channel- Side-Channels", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Floodplain Connectivity ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("FloodplainConnectivity", "Off-Channel- Floodplain", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Floodplain Connectivity ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("Off-Channel- Floodplain", "Floodplain Connectivity", Habitat_Quality_Data_Gaps$Data_Gap )
# -----------------------------------------------------------------------------------------------------------------------------------------------
#    Add whether a reach was a potential reach layer (yes/no)  potential_priority_reach_yes_no
# -----------------------------------------------------------------------------------------------------------------------------------------------
Output_ALL_species_and_reaches_SLIM = Output_ALL_species_and_reaches[,c("ReachName","Potential_Priority_Reach_all_species_restoration_or_protection", "Tier_1_all_species_restoration_or_protection")]
#colnames(Output_ALL_species_and_reaches_SLIM)[1] = "Reach Name"
Habitat_Quality_Data_Gaps2  = merge(Habitat_Quality_Data_Gaps, Output_ALL_species_and_reaches_SLIM, by="ReachName", all.x=TRUE)
colnames(Habitat_Quality_Data_Gaps2) = c("Reach Name", "Basin", "Assessment Unit", "Missing Data", "Primary Data Source", "Potential Priority Reach (yes or no)" , "Tier 1 Restoration or Protection (yes or no)")
# -----------------------------------------------------------------------------------------------------------------------------------------------
#    Add whether a reach was a potential reach layer (yes/no)  potential_priority_reach_yes_no
# -----------------------------------------------------------------------------------------------------------------------------------------------
Output_ALL_species_and_reaches_SLIM_SprChn_Stld = Output_ALL_species_and_reaches[,c("ReachName","Potential_Priority_Reach_all_species_restoration_or_protection", "Spring_Chinook.AU.Restoration.Rank", "Spring_Chinook.AU.Protection.Rank",
"Steelhead.AU.Restoration.Rank", "Steelhead.AU.Protection.Rank" )]
#colnames(Output_ALL_species_and_reaches_SLIM)[1] = "Reach Name"
Habitat_Quality_Data_Gaps_SprChn_Stld = merge(Habitat_Quality_Data_Gaps, Output_ALL_species_and_reaches_SLIM_SprChn_Stld, by="ReachName", all.x=TRUE)
colnames(Habitat_Quality_Data_Gaps_SprChn_Stld) = c("Reach Name", "Basin", "Assessment Unit", "Missing Data", "Primary Data Source", "Potential Priority Reach (yes or no)" ,
"Tier 1 Spring Chinook - Restoration", "Tier 1 Spring Chinook - Protection", "Tier 1 Steelhead - Restoration", "Tier 1 Steelhead - Protection")
# ---------------- only pull Tier 1 ------------------
tier1_x = which(Habitat_Quality_Data_Gaps_SprChn_Stld$`Tier 1 Spring Chinook - Restoration` == 1 |
Habitat_Quality_Data_Gaps_SprChn_Stld$`Tier 1 Spring Chinook - Protection` == 1 |
Habitat_Quality_Data_Gaps_SprChn_Stld$`Tier 1 Steelhead - Restoration` == 1 |
Habitat_Quality_Data_Gaps_SprChn_Stld$`Tier 1 Steelhead - Protection` == 1 )
Habitat_Quality_Data_Gaps_SprChn_Stld = Habitat_Quality_Data_Gaps_SprChn_Stld[tier1_x, ]
remove_col_x = "Missing Data"
columns_to_pull = colnames(Habitat_Quality_Data_Gaps)
columns_to_pull = columns_to_pull[-which(columns_to_pull==remove_col_x)]
# ---------
dim(Habitat_Quality_Data_Gaps_SprChn_Stld)
# ---------------------- Pool Quality and Quantity ----------------
Habitat_Quality_Data_Gaps_Pool_True_False = grepl("Pool Quantity and Quality", Habitat_Quality_Data_Gaps_SprChn_Stld$`Missing Data`)
length9Habitat_Quality_Data_Gaps_Pool_True_False
length(Habitat_Quality_Data_Gaps_Pool_True_False)
Habitat_Quality_Data_Gaps_Pool_True_False
Habitat_Quality_Data_Gaps_Pool = Habitat_Quality_Data_Gaps_SprChn_Stld[Habitat_Quality_Data_Gaps_Pool_True_False, ]
Habitat_Quality_Data_Gaps_Pool = Habitat_Quality_Data_Gaps_Pool[columns_to_pull]
dim(Habitat_Quality_Data_Gaps_Pool)
output_path_x =  paste(output_path,'Habitat_Quality_Data_Missing_Pool_Quant_and_Qual.xlsx', sep="")
write_xlsx(Habitat_Quality_Data_Gaps_Pool,output_path_x )
# --------------------- Coarse Substrate -----------------
Habitat_Quality_Data_Gaps_Coarse_Substrate_True_False = grepl("Coarse Substrate", Habitat_Quality_Data_Gaps_SprChn_Stld$`Missing Data`)
Habitat_Quality_Data_Gaps_Coarse_Substrate = Habitat_Quality_Data_Gaps_SprChn_Stld[Habitat_Quality_Data_Gaps_Coarse_Substrate_True_False, ]
Habitat_Quality_Data_Gaps_Coarse_Substrate = Habitat_Quality_Data_Gaps_Coarse_Substrate[columns_to_pull]
output_path_x =  paste(output_path,'Habitat_Quality_Data_Missing_Coarse_Substrate.xlsx', sep="")
write_xlsx(Habitat_Quality_Data_Gaps_Coarse_Substrate,output_path_x )
dim(Habitat_Quality_Data_Gaps_Coarse_Substrate)
columns_to_pull
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      Start the Data Frame
# -----------------------------------------------------------------------------------------------------------------------------------------------
Habitat_Quality_Data_Gaps = Habitat_Quality_Scores[, c("ReachName","Basin","Assessment.Unit")]
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      go through each habitat attribute and list whether missing or not
# -----------------------------------------------------------------------------------------------------------------------------------------------
# --------- NEW - pull core metrics AND HQ metrics -------------
HQ_metrics = c("Bank Stability",  "Channel Stability", "Coarse Substrate", "Cover- Wood", "Flow- Summer Base Flow" ,
"Floodplain Connectivity" , "Off-Channel/Side-Channels" ,"Pool Quantity & Quality" ,
"Riparian- Canopy Cover", "Riparian-Disturbance" , "Temperature- Rearing" )
# --------- pull core metrics for specific species ---------
rows_pull = c()
for(species_x in core_metric_missing_data_species){
x = which(Attribute_LifeStage_Crosswalk$Species == species_x)
rows_pull = c(rows_pull,x)
}
rows_pull = rows_pull[order(rows_pull)]
Attribute_LifeStage_Crosswalk_updated = Attribute_LifeStage_Crosswalk[rows_pull,]
# ------------ pull core metrics only ----------
Attribute_LifeStage_Crosswalk_updated = Attribute_LifeStage_Crosswalk_updated[which(Attribute_LifeStage_Crosswalk_updated$`Life Stage Core Metric?` == "x"), ]
Core_metrics = unique(Attribute_LifeStage_Crosswalk_updated$`Habitat Attribute`)
# ------------ combine HQ and Core metrics -------------
missing_data_metrics = c(HQ_metrics, Core_metrics)
missing_data_metrics = unique(missing_data_metrics)[order(unique(missing_data_metrics))]
# ------- OLD - just pulled HQ scores (June 25, 2021) --------
#habitat_attributes_for_missing_layer = c("BankStability_score",  "ChannelStability_score", "CoarseSubstrate_score", "Cover-Wood_score", "Flow-SummerBaseFlow_score" ,
#                                        "Off-Channel-Floodplain_score" , "Off-Channel-Side-Channels_score" ,"PoolQuantity&Quality_score" ,
#                                        "Riparian-CanopyCover_score", "Riparian-Disturbance_score" , "Temperature-Rearing_score" )
#habitat_attributes_for_missing_layer_COLUMN_NAMES = c("Bank Stability",  "Channel Stability", "Coarse Substrate", "Cover-Wood", "Flow-Summer Base Flow" ,
#                                                      "Off-Channel-Floodplain" , "Off-Channel-Side-Channels" ,"Pool Quantity & Quality" ,
#                                                      "Riparian-Canopy Cover", "Riparian-Disturbance" , "Temperature-Rearing" )
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      Loop through to identify missing data
# -----------------------------------------------------------------------------------------------------------------------------------------------
data_gap_df = as.data.frame( Habitat_Quality_Data_Gaps$ReachName )
colnames(data_gap_df) = c("ReachName")
for(habitat_attribute_x in missing_data_metrics){
# ------------------- add to Habitat_Quality_Data_Gaps --------------
#
# ---------------- pull only rows with the habitat_attribute_x in Habitat_Attribute_Scores --------
Habitat_Attribute_Scores_x = Habitat_Attribute_Scores[which(Habitat_Attribute_Scores$Habitat_Attribute == habitat_attribute_x), ]
# -------------------- pull if present -----------------
if(nrow(Habitat_Attribute_Scores_x)>0){
present_data_x = which(Habitat_Attribute_Scores_x$Habitat_Attribute_Score > 0)
Habitat_Attribute_Scores_x = Habitat_Attribute_Scores_x[ ,c("ReachName", "Assessment.Unit") ]
Habitat_Attribute_Scores_x$Data_Presence = "missing"
Habitat_Attribute_Scores_x$Data_Presence[present_data_x] = "present"
Habitat_Attribute_Scores_x = Habitat_Attribute_Scores_x[,c("ReachName", "Data_Presence")]
colnames(Habitat_Attribute_Scores_x) = c("ReachName",habitat_attribute_x )
# ----------------- merge ---------------
data_gap_df = merge(data_gap_df, Habitat_Attribute_Scores_x, by="ReachName", all.x=TRUE)
}else{
print("Data not in Habitat Attribute Scores: ")
print(habitat_attribute_x)
}
}
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      Loop through OKANOGAN to identify missing data
# -----------------------------------------------------------------------------------------------------------------------------------------------
for(habitat_attribute_x in missing_data_metrics){
#col_data_gap_df = which(colnames(data_gap_df) == habitat_attribute_x)
# ------------------- add to Habitat_Quality_Data_Gaps --------------
#
# ---------------- pull only rows with the habitat_attribute_x in Habitat_Attribute_Scores --------
Habitat_Attribute_Scores_x = Habitat_Attribute_Scores_Okanogan[which(Habitat_Attribute_Scores_Okanogan$Habitat_Attribute == habitat_attribute_x), ]
# -------------------- pull if present -----------------
if( nrow(Habitat_Attribute_Scores_x)>0 ){
for(rowx in 1:nrow(Habitat_Attribute_Scores_x)){
reach_x = Habitat_Attribute_Scores_x$ReachName[rowx]
row_data_gap_df = which(data_gap_df$ReachName == reach_x)
# -------------- if okanogan data is missing (NA) for this habitat attribute and reach -----------
if( is.na(Habitat_Attribute_Scores_x$Habitat_Attribute_Score[rowx]) ){
data_gap_df[row_data_gap_df,habitat_attribute_x] = "missing"
# ----------------- IF okanogan data is present for this habitat attribute and reach ---------
}else if(Habitat_Attribute_Scores_x$Habitat_Attribute_Score[rowx] > 0){
data_gap_df[row_data_gap_df,habitat_attribute_x] = "present"
# -------------- IF okanogan data is not present for this habitat attribute and reach -----
}else{data_gap_df[row_data_gap_df,habitat_attribute_x] = "missing" }
}
}
}
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      List habitat attributes that are missing
# -----------------------------------------------------------------------------------------------------------------------------------------------
colnames_habitat_attributes = colnames(data_gap_df)
all_missing_data = as.data.frame(data_gap_df[,c("ReachName")])
all_missing_data$missing_data_x = NA
for(row_x in 1:nrow(data_gap_df) ){
# ----------- identify which attributes are missing -----
missing_x = which(data_gap_df[row_x, ] == "missing")
missing_habitat_attribute_x = colnames_habitat_attributes[missing_x]
# ------------ add to other reaches -----------
row_cell_x = paste(missing_habitat_attribute_x, collapse=", ")
all_missing_data$missing_data_x[row_x] = row_cell_x
}
colnames(all_missing_data) = c("ReachName","Data_Gap")
# -------------- add column --------
Habitat_Quality_Data_Gaps = merge(Habitat_Quality_Data_Gaps,  all_missing_data, by="ReachName", all.x=TRUE)
# -----------------------------------------------------------------------------------------------------------------------------------------------
#     Add Data Source
# -----------------------------------------------------------------------------------------------------------------------------------------------
habitat_raw_data_x = habitat_raw_data[,c("ReachName","Data_Source")]
colnames(habitat_raw_data_x) = c("ReachName", "Primary_Data_Source")
Habitat_Quality_Data_Gaps = merge(Habitat_Quality_Data_Gaps, habitat_raw_data_x, by="ReachName", all.x=TRUE)
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      IF no data is missing - add "no data are missing"
# -----------------------------------------------------------------------------------------------------------------------------------------------
no_data_missing_x = which(Habitat_Quality_Data_Gaps$Data_Gap == "")
Habitat_Quality_Data_Gaps$Data_Gap[no_data_missing_x] = "no data are missing"
# -----------------------------------------------------------------------------------------------------------------------------------------------
#      IF okanogan - add EDT
# -----------------------------------------------------------------------------------------------------------------------------------------------
Okanogan_Basin_x = which(Habitat_Quality_Data_Gaps$Basin == "Okanogan")
Habitat_Quality_Data_Gaps$Primary_Data_Source[Okanogan_Basin_x] = "Okanogan EDT"
# -----------------------------------------------------------------------------------------------------------------------------------------------
#     Remove the layers where no data are missing
# -----------------------------------------------------------------------------------------------------------------------------------------------
Habitat_Quality_Data_Gaps = Habitat_Quality_Data_Gaps[which(Habitat_Quality_Data_Gaps$Data_Gap != "no data are missing"),]
# -----------------------------------------------------------------------------------------------------------------------------------------------
#    Update Attribute Names
# -----------------------------------------------------------------------------------------------------------------------------------------------
# -------------------- Fines/Embeddedness ------------------
Habitat_Quality_Data_Gaps$Data_Gap  = gsub("%Fines/Embeddedness", "PRCNT Fines and Embeddedness", Habitat_Quality_Data_Gaps$Data_Gap )
Habitat_Quality_Data_Gaps$Data_Gap  = gsub("% Fines/Embeddedness", "PRCNT Fines and Embeddedness", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Pool Quantity and Quality ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("PoolQuantity&Quality", "Pool Quantity and Quality", Habitat_Quality_Data_Gaps$Data_Gap )
Habitat_Quality_Data_Gaps$Data_Gap = gsub("Pool Quantity & Quality", "Pool Quantity and Quality", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Entrainment and Stranding ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("Entrainment/Stranding", "Entrainment and Stranding", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Floodplain Connectivity ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("FloodplainConnectivity", "Off-Channel- Floodplain", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Off-Channel/Side-Channels------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("Off-Channel/Side-Channels", "Off-Channel- Side-Channels", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Floodplain Connectivity ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("FloodplainConnectivity", "Off-Channel- Floodplain", Habitat_Quality_Data_Gaps$Data_Gap )
# -------------------- Floodplain Connectivity ------------------
Habitat_Quality_Data_Gaps$Data_Gap = gsub("Off-Channel- Floodplain", "Floodplain Connectivity", Habitat_Quality_Data_Gaps$Data_Gap )
# -----------------------------------------------------------------------------------------------------------------------------------------------
#    Add whether a reach was a potential reach layer (yes/no)  potential_priority_reach_yes_no
# -----------------------------------------------------------------------------------------------------------------------------------------------
Output_ALL_species_and_reaches_SLIM = Output_ALL_species_and_reaches[,c("ReachName","Potential_Priority_Reach_all_species_restoration_or_protection", "Tier_1_all_species_restoration_or_protection")]
#colnames(Output_ALL_species_and_reaches_SLIM)[1] = "Reach Name"
Habitat_Quality_Data_Gaps2  = merge(Habitat_Quality_Data_Gaps, Output_ALL_species_and_reaches_SLIM, by="ReachName", all.x=TRUE)
colnames(Habitat_Quality_Data_Gaps2) = c("Reach Name", "Basin", "Assessment Unit", "Missing Data", "Primary Data Source", "Potential Priority Reach (yes or no)" , "Tier 1 Restoration or Protection (yes or no)")
# -----------------------------------------------------------------------------------------------------------------------------------------------
#    Add whether a reach was a potential reach layer (yes/no)  potential_priority_reach_yes_no
# -----------------------------------------------------------------------------------------------------------------------------------------------
Output_ALL_species_and_reaches_SLIM_SprChn_Stld = Output_ALL_species_and_reaches[,c("ReachName","Potential_Priority_Reach_all_species_restoration_or_protection", "Spring_Chinook.AU.Restoration.Rank", "Spring_Chinook.AU.Protection.Rank",
"Steelhead.AU.Restoration.Rank", "Steelhead.AU.Protection.Rank" )]
#colnames(Output_ALL_species_and_reaches_SLIM)[1] = "Reach Name"
Habitat_Quality_Data_Gaps_SprChn_Stld = merge(Habitat_Quality_Data_Gaps, Output_ALL_species_and_reaches_SLIM_SprChn_Stld, by="ReachName", all.x=TRUE)
colnames(Habitat_Quality_Data_Gaps_SprChn_Stld) = c("Reach Name", "Basin", "Assessment Unit", "Missing Data", "Primary Data Source", "Potential Priority Reach (yes or no)" ,
"Tier 1 Spring Chinook - Restoration", "Tier 1 Spring Chinook - Protection", "Tier 1 Steelhead - Restoration", "Tier 1 Steelhead - Protection")
tier1_x = which(Habitat_Quality_Data_Gaps_SprChn_Stld$`Tier 1 Spring Chinook - Restoration` == 1 |
Habitat_Quality_Data_Gaps_SprChn_Stld$`Tier 1 Spring Chinook - Protection` == 1 |
Habitat_Quality_Data_Gaps_SprChn_Stld$`Tier 1 Steelhead - Restoration` == 1 |
Habitat_Quality_Data_Gaps_SprChn_Stld$`Tier 1 Steelhead - Protection` == 1 )
Habitat_Quality_Data_Gaps_SprChn_Stld = Habitat_Quality_Data_Gaps_SprChn_Stld[tier1_x, ]
remove_col_x = "Missing Data"
columns_to_pull = colnames(Habitat_Quality_Data_Gaps_SprChn_Stld)
columns_to_pull = columns_to_pull[-which(columns_to_pull==remove_col_x)]
columns_to_pull
# ---------------------- Pool Quality and Quantity ----------------
Habitat_Quality_Data_Gaps_Pool_True_False = grepl("Pool Quantity and Quality", Habitat_Quality_Data_Gaps_SprChn_Stld$`Missing Data`)
Habitat_Quality_Data_Gaps_Pool = Habitat_Quality_Data_Gaps_SprChn_Stld[Habitat_Quality_Data_Gaps_Pool_True_False, ]
Habitat_Quality_Data_Gaps_Pool = Habitat_Quality_Data_Gaps_Pool[columns_to_pull]
dim(Habitat_Quality_Data_Gaps_Pool)
output_path_x =  paste(output_path,'Habitat_Quality_Data_Missing_Pool_Quant_and_Qual.xlsx', sep="")
write_xlsx(Habitat_Quality_Data_Gaps_Pool,output_path_x )
# --------------------- Coarse Substrate -----------------
Habitat_Quality_Data_Gaps_Coarse_Substrate_True_False = grepl("Coarse Substrate", Habitat_Quality_Data_Gaps_SprChn_Stld$`Missing Data`)
Habitat_Quality_Data_Gaps_Coarse_Substrate = Habitat_Quality_Data_Gaps_SprChn_Stld[Habitat_Quality_Data_Gaps_Coarse_Substrate_True_False, ]
Habitat_Quality_Data_Gaps_Coarse_Substrate = Habitat_Quality_Data_Gaps_Coarse_Substrate[columns_to_pull]
output_path_x =  paste(output_path,'Habitat_Quality_Data_Missing_Coarse_Substrate.xlsx', sep="")
write_xlsx(Habitat_Quality_Data_Gaps_Coarse_Substrate,output_path_x )
# -------------------- Cover- Wood ------------------
Habitat_Quality_Data_Gaps_Cover_Wood_True_False = grepl("Cover- Wood", Habitat_Quality_Data_Gaps_SprChn_Stld$`Missing Data`)
Habitat_Quality_Data_Gaps_Cover_Wood = Habitat_Quality_Data_Gaps_SprChn_Stld[Habitat_Quality_Data_Gaps_Cover_Wood_True_False, ]
Habitat_Quality_Data_Gaps_Cover_Wood = Habitat_Quality_Data_Gaps_Cover_Wood[columns_to_pull]
output_path_x =  paste(output_path,'Habitat_Quality_Data_Missing_Cover_Wood.xlsx', sep="")
write_xlsx(Habitat_Quality_Data_Gaps_Cover_Wood,output_path_x )
dim(Habitat_Quality_Data_Gaps_Cover_Wood)
dim(Habitat_Quality_Data_Gaps_Coarse_Substrate)
dim(Habitat_Quality_Data_Gaps_Pool)
