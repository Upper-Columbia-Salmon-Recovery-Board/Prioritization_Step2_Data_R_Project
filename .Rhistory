#    combine metrics with data frame
# ---------------------------------------
Habitat_Attribute_Scores = rbind( Habitat_Attribute_Scores, habitat_attribute_x_data_frame )
print(paste(" NUMBER OF ROWS: ",dim(habitat_attribute_x_data_frame)[1]))
}
dim(Habitat_Attribute_Scores)
View(Habitat_Attribute_Scores)
View(habitat_raw_data)
Habitat_Attribute_Scores$Data_Sources[which(Habitat_Attribute_Scores$Habitat_Attribute == "Coarse Substrate")][1]
which(habitat_raw_data$ReachName == "Nason Creek Lower 11")
habitat_raw_data[444, 10:20]
habitat_raw_data[444, 20:30]
habitat_raw_data[444, 30:35]
habitat_raw_data[444, 34:40]
# ---------------------------------------------------------------------------
#  Script Criteria for output
# ---------------------------------------------------------------------------
basins_to_include = c("Methow",  "Entiat","Wenatchee" )  # basins to include in simulation
exclude_bull_trout = "yes"  # if "yes" -> remove bull trout for WebMap applications
output_Habitat_Quality_and_Habitat_Attribute_Scores = "no"  # enter "yes" or "no" if you want the "flat table" Habitat Attribute output (doubles time to run script)
update_Okanogan_reach_names = "no"  # if "yes" - update Okanogan reach names (should not have to run again - since on 5.Apr.2021 Ryan updated names)
time1 <- proc.time()[3] # for timing the total time to run the tool
# --------------- directory of scripts -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
master_path = 'Data/'
habitat_data_path = paste(master_path,"Habitat_Data/", sep="")
ranking_data_path = paste(master_path,"Ranking_Data/", sep="")
crosswalks_path = paste(master_path,"Crosswalks/", sep="")
criteria_and_scoring_path = paste(master_path,"Criteria_and_Scoring/", sep="")
Okanogan_EDT_path = paste(master_path,'Okanogan_EDT/', sep="")
reach_assessment_projects_path = paste(master_path,'Reach_Assessment_Projects/', sep="")
# ----------- directory for output ---------
output_path = 'Output/'
# ---------------------------------------------------------------------------
#     Read in Data
# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
print("----------------------------------------- Update Okanogan Reach Names (if necessary) --------------------------------------------")
if(update_Okanogan_reach_names == "yes"){
source(paste(script_path, 'FUNCTION_update_names_in_data_frames.R', sep=""))
}
# ---------------------------------------------------------------------------
#      Criteria for Filters
# ---------------------------------------------------------------------------
print("----------------------------------------- ASSIGN CRITERIA --------------------------------------------")
source(paste(script_path, 'Criteria_Script.R', sep=""))
print("----------------------------------------- Prepare Okanogan EDT prep --------------------------------------------")
source(paste(script_path, 'Okanogan_EDT_data_input_prep.R', sep=""))
# ---------------------------------------------------------------------------
#   LIMITING FACTOR PATHWAY: Generate Habitat Attribute Table (used in Limiting Factor Pathway)
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITAT ATTRIBUTE SCORES (for Limtiting Factor Pathway) --------------------------------------------")
# some of HQ filters are used in Habitat Attribute generation
source( paste(script_path, 'FUNCTIONS_for_Habitat_Quality_Filters.R', sep="")  )
# script to generate habitat attribute scores
source(paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep="") )
# script to add habitat attribute scores from EDT
source( paste(script_path, 'FUNCTIONS_Okanogan_EDT_Habitat_Attribute_Habitat_Quality_Scripts.R', sep="") )
print("----------------------------------------- GENERATE HABITAT QUALITY SCORES --------------------------------------------")
source( paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep="") )
# ---------------------------------------------------------------------------
#   HABITAT QUALITY PATHWAY: Apply Habitat Quality Pathway Filters
# ---------------------------------------------------------------------------
# NOTE: the function below runs HQ Pathway for Restoration and Protection
print("----------------------------------------- APPLY HABITAT QUALITY FILTERS FOR PRIORITIZATION --------------------------------------------")
source(paste(script_path, 'Habitat_Quality_Pathway_Filter.R', sep=""))  # for Methow-Wenatchee-Entiat AND Okanogan functions
# ----- set names of Habitat Quality Scores to sum ------
habitat_quality_scores_colnames_for_sum = c("Stability_Mean" , "CoarseSubstrate_score" ,"Cover-Wood_score", "Flow-SummerBaseFlow_score",
"Off-Channel-Floodplain_score", "Off-Channel-Side-Channels_score","PoolQuantity&Quality_score",
"Riparian_Mean","Temperature-Rearing_score")
# --------------- generate for all basins except Okanogan ---------------
Habitat_Quality_Pathway_Spring_Chinook = Generate_Habitat_Quality_Output_Table("Spring Chinook", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Steelhead = Generate_Habitat_Quality_Output_Table("Steelhead", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Bull_Trout = Generate_Habitat_Quality_Output_Table("Bull Trout", basins_to_include, habitat_quality_scores_colnames_for_sum )
# --------------- generate for Okanogan ---------------
Habitat_Quality_Pathway_Steelhead_OKANOGAN = Generate_Habitat_Quality_Output_Table_Okanogan("Steelhead" )
# ---------------- add Okanogan to Methow-Wenatchee-Okanogan HQ Output ------------
habitat_quality_scores_colnames_for_combo = colnames(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])[7:(ncol(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])-7)]
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']] = Combine_MetEntWen_and_Okanogan_Output(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead_OKANOGAN[['Habitat_Quality_Pathway_Restoration']],
habitat_quality_scores_colnames_for_combo)
# ---------------------------------------------------------------------------
#   LIMITING FACTORS PATHWAY: Apply Limiting Factor Pathway Filters (Restoration and Protection)
# ---------------------------------------------------------------------------
# NOTE: Protection output includes habitat attributes but does not filter based on habitat attributes
print("----------------------------------------- APPLY LIMITING FACTOR FILTERS FOR PRIORITIZATION --------------------------------------------")
source(paste(script_path, 'Limiting_Factor_Pathway_Filter.R', sep=""))
Limiting_Factor_Pathway_Spring_Chinook = Generate_Limiting_Factor_Output_Table("Spring Chinook", basins_to_include)
Limiting_Factor_Pathway_Steelhead = Generate_Limiting_Factor_Output_Table("Steelhead", basins_to_include)
Limiting_Factor_Pathway_Bull_Trout = Generate_Limiting_Factor_Output_Table("Bull Trout", basins_to_include)
dim(Limiting_Factor_Pathway_Spring_Chinook)
View(View(Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']]))
View(Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']])
View(Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']])
View(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
# ---------------------------------------------------------------------------
#   LIMITING FACTORS PATHWAY: Apply Limiting Factor Pathway Filters (Restoration and Protection)
# ---------------------------------------------------------------------------
# NOTE: Protection output includes habitat attributes but does not filter based on habitat attributes
print("----------------------------------------- APPLY LIMITING FACTOR FILTERS FOR PRIORITIZATION --------------------------------------------")
source(paste(script_path, 'Limiting_Factor_Pathway_Filter.R', sep=""))
Limiting_Factor_Pathway_Spring_Chinook = Generate_Limiting_Factor_Output_Table("Spring Chinook", basins_to_include)
Limiting_Factor_Pathway_Steelhead = Generate_Limiting_Factor_Output_Table("Steelhead", basins_to_include)
Limiting_Factor_Pathway_Bull_Trout = Generate_Limiting_Factor_Output_Table("Bull Trout", basins_to_include)
names(Limiting_Factor_Pathway_Spring_Chinook)
View(Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']])
# -----------------------------------------------------------------------------------------------------------------------------------------------
#
#
#   - - - - - - - - -  Generate Action Categories  - - - - - - - - -
#
#
# -----------------------------------------------------------------------------------------------------------------------------------------------
# NOTE: do not do this for Protection since no Actions generated for Protection
# NOTE: 1) fix action_categories_output so you can add it to any data frame
print("----------------------------------------- GENERATE ACTIONS CATEGORIES FOR HQ AND LF PATHWAY --------------------------------------------")
source(paste(script_path, 'FUNCTIONS_for_Generating_Action_Categories.R', sep=""))
# ------------------------------------------------------------------------------------
#              Generate Action Categories
# ------------------------------------------------------------------------------------
# -----------------  Habitat Quality Pathway  -----------------------
Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']])
# --------------------  Limiting Factors Pathway  --------------------
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']])
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']])
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']])
# ---------------------------------------------------------------------------
#     Summarize Habitat Attributes and Action Categories for each Reach within each Species and Score (Unacceptable, At Risk, etc.)
# ---------------------------------------------------------------------------
# NOTE: just for Restoration
print("----------------------------------------- COMBINE HQ AND LF OUTPUT --------------------------------------------")
# -------------- Generate Functions ---------------
source(paste(script_path, 'FUNCTIONS_for_Combining_Action_Tables.R', sep=""))
source(paste(script_path, 'FUNCTIONS_for_Combining_Reach_Habitat_Attribute_combos.R', sep=""))
# ---------------- Run Functions to summarize within a single pathway AND score category (Unacceptable, At Risk) -----------------------
Habitat_Quality_Restoration_Unacceptable = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH("one", "restoration")
Habitat_Quality_Restoration_At_Risk = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH("two and three", "restoration")
Habitat_Quality_Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH("one thru three", "restoration")
Limiting_Factor_Restoration_Unacceptable = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH("one", "restoration")
Limiting_Factor_Restoration_At_Risk = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH("two and three", "restoration")
Limiting_Factor_Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH("one thru three", "restoration")
# ---------------------------------------------------------------------------
#  Combine across pathways into Score categories (Unacceptable, At Risk, Both)
# ---------------------------------------------------------------------------
# ----------------------- combine across pathways -----------------------
columns_info = c( "ReachName","Basin","Assessment.Unit" )
columns_to_combine_text = c(  "Pathways" ,  "Impaired_Habitat_Attributes_All_Species" , "Impaired_Habitat_Attributes_SpringChinook", "Impaired_Habitat_Attributes_Steelhead","Impaired_Habitat_Attributes_BullTrout",
"Action_Categories_All_Species",   "Action_Categories_SpringChinook",  "Action_Categories_Steelhead",  "Action_Categories_BullTrout"    )
columns_to_combine_text_LF_only = c(   "Life_Stages", "Life_Stages_SpringChinook"   )
columns_to_combine_yes_no = c( "Spring_Chinook_Actions_Present_Yes_No","SprCh_STLD_BullTr_All_Present_Yes_No" )
columns_to_combine_count_unique = c( "Impaired_Habitat_Attributes_All_Species", "Impaired_Habitat_Attributes_SpringChinook", "Impaired_Habitat_Attributes_Steelhead", "Impaired_Habitat_Attributes_BullTrout",
"Action_Categories_All_Species",   "Action_Categories_SpringChinook","Action_Categories_Steelhead",  "Action_Categories_BullTrout" ) # the unique occurences of these are then counted and a number is produced
columns_to_combine_numeric = c("Number_of_Pathways"  )
columns_to_combine_numeric_LF_only = c("Number_of_Life_Stages", "Number_Life_Stages_SpringChinook"  )
Restoration_Unacceptable = FUNCTION_combine_across_pathways(Habitat_Quality_Restoration_Unacceptable, Limiting_Factor_Restoration_Unacceptable)
Restoration_At_Risk = FUNCTION_combine_across_pathways(Habitat_Quality_Restoration_At_Risk, Limiting_Factor_Restoration_At_Risk)
Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_across_pathways(Habitat_Quality_Restoration_Unacceptable_and_At_Risk, Limiting_Factor_Restoration_Unacceptable_and_At_Risk)
# ---------------------------------------------------------------------------
#  Combine into ONE Data frame across all pathways and scores
# ---------------------------------------------------------------------------
HQ_add_life_stage = "yes"   # IF generate life stages for HQ pathway based on life stage presence in reaches
columns_info = c( "ReachName","Basin","Assessment.Unit" ) # columns to automatically add to beginning (left side) of output
# Note - only include the Habitat_Quality_Restoration_Unacceptable_and_At_Risk
Restoration_Prioritization_Output = FUNCTION_combine_across_Unacceptable_and_AtRisk(Restoration_Unacceptable, Restoration_At_Risk, Restoration_Unacceptable_and_At_Risk, Habitat_Quality_Restoration_Unacceptable_and_At_Risk, columns_info, exclude_bull_trout, HQ_add_life_stage)
# ---------------------------------------------------------------------------
#  Add Barrier Prioritization Info
# ---------------------------------------------------------------------------
columns_info = c( "ReachName","Basin","Assessment.Unit" ) # columns to automatically add to beginning (left side) of output
Restoration_Prioritization_Output = FUNCTION_Add_Barrier_Data(Restoration_Prioritization_Output, Barriers_Pathways_Data, exclude_bull_trout)
# ---------------------------------------------------------------------------
#  Reduce for "Outward Facing" table in WebMap
# ---------------------------------------------------------------------------
colnames_outward_facing_WebMap = c("ReachName","Assessment.Unit","Species","Actions", "Life_Stages","Impaired_Habitat_Attributes_All_Species","Action_Categories_All_Species" )
colnames_reach_info = c("RM_Start", "RM_End")  # data that is in the reach geospatial layer to add to these data
colnames_outward_facing_WebMap_ORDER = c("ReachName","RM_Start", "RM_End","Assessment.Unit","Species", "Life_Stages","Impaired_Habitat_Attributes_All_Species","Actions","Action_Categories_All_Species" )
colnames_outward_facing_WebMap_UPDATED = c("Reach Name","River Mile - Start", "River Mile - End","Assessment Unit","Species","Priority Life Stages","Limiting Factor","Action Pathways","Action Categories" )
# ------- filter out for specific columns ----------
Restoration_Prioritization_Output_for_WebMap = Restoration_Prioritization_Output[,colnames_outward_facing_WebMap]
# ----------- add Reach information ------------
Restoration_Prioritization_Output_for_WebMap  =  FUNCTION_add_reach_information(Restoration_Prioritization_Output_for_WebMap,  colnames_reach_info)
# ------------ do MISC processing for output ---------
Restoration_Prioritization_Output_for_WebMap = FUNCTION_prepare_outward_facing_table( Restoration_Prioritization_Output_for_WebMap , colnames_outward_facing_WebMap_ORDER, colnames_outward_facing_WebMap_UPDATED, exclude_bull_trout)
# -----------------------------------------------------------------------------------------------------------------------------------------------
#
#
#   - - - - - - - - -  PROTECTION: Prep Output  - - - - - - - - -
columns_info = c( "ReachName","Basin","Assessment.Unit" ) # columns to automatically add to beginning (left side) of output
Reach_Habitat_Attribute_Life_Stage_Restoration_Output = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage(  Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info, exclude_bull_trout)
# ---------------------------------------------------------------------------
#  Reach-Habitat Attributes-Life Stage-Species per row
# ---------------------------------------------------------------------------
HQ_life_stages = "yes"  # "yes" if use AU Life stages reach layer to generate life stages for habitat quality pathway
Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage_Species( Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info, exclude_bull_trout, HQ_life_stages)
# ------------------ just to test/compare output --------------
# note these should be the same - except some of the HQ output is different (Stability, Riparian)
reach_test = "Twisp River Lower 01"
strsplit(Restoration_Prioritization_Output_for_WebMap[which(Restoration_Prioritization_Output_for_WebMap$`Reach Name` == reach_test),]$`Limiting Factor`, ",")
unique(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output$ReachName == reach_test),]$Habitat_Attribute)
strsplit(Restoration_Prioritization_Output_for_WebMap[which(Restoration_Prioritization_Output_for_WebMap$`Reach Name` == reach_test),]$`Species`, ",")
unique(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output$ReachName == reach_test),]$Species)
strsplit(Restoration_Prioritization_Output_for_WebMap[which(Restoration_Prioritization_Output_for_WebMap$`Reach Name` == reach_test),]$`Priority Life Stages`, ",")
unique(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output$ReachName == reach_test),]$Life_Stage)
Habitat_Attribute_Scores_columns_to_pull  = c("% Fines/Embeddedness", "Brook Trout", "Coarse Substrate" ,"Contaminants",
"Cover- Boulders", "Cover- Undercut Banks", "Cover- Wood", "Entrainment/Stranding", "Flow- Scour",
"Flow- Summer Base Flow", "Food- Food Web Resources", "Harassment", "Icing", "Off-Channel- Floodplain",
"Off-Channel- Side-Channels","Pool Quantity & Quality" , "Pools- Deep Pools", "Predators- Adults", "Predators- Juveniles",
"Superimposition", "Temperature- Adult Holding", "Temperature- Adult Spawning", "Temperature- Rearing")
Habitat_Quality_Scores_columns_to_pull = c("BankStability_score","ChannelStability_score","Stability_Mean","CoarseSubstrate_score","Cover-Wood_score","Flow-SummerBaseFlow_score",
"Off-Channel-Floodplain_score","Off-Channel-Side-Channels_score","PoolQuantity&Quality_score","Riparian-Disturbance_score",
"Riparian-CanopyCover_score","Riparian_Mean","Temperature-Rearing_score")
# ORDER: REI ratings -> core metrics -> then the rest of them
Order_of_Habitat_Attribute_Rating_Table_Columns = c("Coarse Substrate","% Fines/Embeddedness", "Cover- Wood","Pool Quantity & Quality", # <- REI Values
"Off-Channel- Floodplain", "Off-Channel- Side-Channels", "Cover- Undercut Banks", #  <- REI Values
"ChannelStability_score", "Stability_Mean", "Riparian-Disturbance_score",         # <- HQ scores based on REI Values
"Riparian-CanopyCover_score", "Riparian_Mean",                                   # <- HQ scores based on REI Values
"Contaminants","Entrainment/Stranding","Predators- Juveniles",                  # <- Spr Chn and STLDH core metrics
"Cover- Boulders", "Flow- Scour", "Flow- Summer Base Flow","Food- Food Web Resources",  # <- one species core metric
"Harassment", "Icing", "Superimposition", "Temperature- Adult Holding",               # <- one species core metric
"Temperature- Adult Spawning", "Temperature- Rearing",                              # <- one species core metric
"Brook Trout", "Pools- Deep Pools", "Predators- Adults")                           # <- not a core metric
# just runs script - output is Habitat_Attributes_Ratings_Table
source(paste(script_path, "FUNCTIONS_for_Habitat_Attribute_Rating_Table_for_WebMap.R", sep=""))
source(paste(script_path, "FUNCTIONS_for_Reach_Assessment_Projects_Processing.R", sep=""))
# -----------------------------------------------------------------
#       Restoration
# -----------------------------------------------------------------
output_path_x =  paste(output_path,'Reach_Actions_Restoration_Unacceptable_and_AtRisk.xlsx', sep="")
write_xlsx(Restoration_Prioritization_Output,output_path_x )
# ------------- Output for WebMap ------------------
# ------- change "Habitat_Attribute" name to "Limiting_Factor"
colnames(Reach_Habitat_Attribute_Life_Stage_Restoration_Output)[colnames(Reach_Habitat_Attribute_Life_Stage_Restoration_Output) == "Habitat_Attribute"] <- "Limiting_Factor"
output_path_x =  paste(output_path,'Reach_Habitat_Attribute_Life_Stage_Restoration_Output.xlsx', sep="")
write_xlsx(Reach_Habitat_Attribute_Life_Stage_Restoration_Output,output_path_x )
# ------------- Output for WebMap ------------------
colnames(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output)[colnames(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output) == "Habitat_Attribute"] <- "Limiting_Factor"
output_path_x =  paste(output_path,'Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output.xlsx', sep="")
write_xlsx(Reach_Habitat_Attribute_Life_Stage__Species_Restoration_Output,output_path_x )
# ----------- Outward Facing Table (pops up when reach is clicked on) -----------
output_path_x =  paste(output_path,'Restoration_Prioritization_Output_for_WebMap_Table.xlsx', sep="")
write_xlsx(Restoration_Prioritization_Output_for_WebMap,output_path_x )
# ----------- Habitat Attributes Table w/ Ratings (to put in WebMap) -----------
output_path_x =  paste(output_path,'Habitat_Attributes_Ratings_Table.xlsx', sep="")
write_xlsx(Habitat_Attributes_Ratings_Table,output_path_x )
# ------------ output Action Categories ----------------
output_path_x =  paste(output_path,'Action_Categories_and_Pathways_Restoration_Unacceptable.xlsx', sep="")
write_xlsx(Restoration_Unacceptable,output_path_x )
output_path_x =  paste(output_path,'Action_Categories_and_Pathways_Restoration_At_Risk.xlsx', sep="")
write_xlsx(Restoration_At_Risk,output_path_x )
output_path_x =  paste(output_path,'Action_Categories_and_Pathways_Restoration_Unacceptable_and_At_Risk.xlsx', sep="")
write_xlsx(Restoration_Unacceptable_and_At_Risk,output_path_x )
install.packages("latexpdf")
Restoration_Reach_Scoring
View(Restoration_Reach_Scoring)
dim(Confinement_Scores)
View(Confinement_Scores)
# ------------------------- Confinement criteria --------------------
Reach_Confinement_Criteria_Restoration_Reach_Rankings = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "Confinement" &
Restoration_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
Reach_Confinement_Criteria_Restoration_Reach_Rankings
# ------------------------- Confinement criteria --------------------
Reach_Confinement_Criteria_Restoration_Reach_Rankings = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "Confinement" &
Restoration_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
Reach_Confinement_Criteria_Restoration_Reach_Rankings
dim(Confinement_Scores_Restoration)
View(Confinement_Scores_Restoration)
confinement_scores
Confinement_Scores
install.packages(xlsx)
install.packages('xlsx')
install.packages(‘tidyverse’)
install.packages(“readxl”)
install.packages(install.packages("readxl")readxl")
install.packages("readxl")
dim(Habitat_Quality_Pathway_Steelhead_OKANOGAN)
# ---------------------------------------------------------------------------
#  import R Packages
# ---------------------------------------------------------------------------
library(tidyverse)
library(xlsx)
library(writexl)
library(readxl)
# ---------------------------------------------------------------------------
#  Script Criteria for output
# ---------------------------------------------------------------------------
basins_to_include = c("Methow",  "Entiat","Wenatchee" )  # basins to include in simulation
exclude_bull_trout = "yes"  # if "yes" -> remove bull trout for WebMap applications
output_Habitat_Quality_and_Habitat_Attribute_Scores = "no"  # enter "yes" or "no" if you want the "flat table" Habitat Attribute output (doubles time to run script)
update_Okanogan_reach_names = "no"  # if "yes" - update Okanogan reach names (should not have to run again - since on 5.Apr.2021 Ryan updated names)
time1 <- proc.time()[3] # for timing the total time to run the tool
# --------------- directory of scripts -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
master_path = 'Data/'
habitat_data_path = paste(master_path,"Habitat_Data/", sep="")
ranking_data_path = paste(master_path,"Ranking_Data/", sep="")
crosswalks_path = paste(master_path,"Crosswalks/", sep="")
criteria_and_scoring_path = paste(master_path,"Criteria_and_Scoring/", sep="")
Okanogan_EDT_path = paste(master_path,'Okanogan_EDT/', sep="")
reach_assessment_projects_path = paste(master_path,'Reach_Assessment_Projects/', sep="")
# ----------- directory for output ---------
output_path = 'Output/'
# ---------------------------------------------------------------------------
#     Read in Data
# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
print("----------------------------------------- Update Okanogan Reach Names (if necessary) --------------------------------------------")
if(update_Okanogan_reach_names == "yes"){
source(paste(script_path, 'FUNCTION_update_names_in_data_frames.R', sep=""))
}
# ---------------------------------------------------------------------------
#      Criteria for Filters
# ---------------------------------------------------------------------------
print("----------------------------------------- ASSIGN CRITERIA --------------------------------------------")
source(paste(script_path, 'Criteria_Script.R', sep=""))
# ---------------------------------------------------------------------------
#   LIMITING FACTOR PATHWAY: Generate Habitat Attribute Table (used in Limiting Factor Pathway)
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITAT ATTRIBUTE SCORES (for Limtiting Factor Pathway) --------------------------------------------")
# some of HQ filters are used in Habitat Attribute generation
source( paste(script_path, 'FUNCTIONS_for_Habitat_Quality_Filters.R', sep="")  )
# script to generate habitat attribute scores
source(paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep="") )
# script to add habitat attribute scores from EDT
source( paste(script_path, 'FUNCTIONS_Okanogan_EDT_Habitat_Attribute_Habitat_Quality_Scripts.R', sep="") )
print("----------------------------------------- Prepare Okanogan EDT prep --------------------------------------------")
source(paste(script_path, 'Okanogan_EDT_data_input_prep.R', sep=""))
# ---------------------------------------------------------------------------
#   LIMITING FACTOR PATHWAY: Generate Habitat Attribute Table (used in Limiting Factor Pathway)
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITAT ATTRIBUTE SCORES (for Limtiting Factor Pathway) --------------------------------------------")
# some of HQ filters are used in Habitat Attribute generation
source( paste(script_path, 'FUNCTIONS_for_Habitat_Quality_Filters.R', sep="")  )
# script to generate habitat attribute scores
source(paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep="") )
print("----------------------------------------- GENERATE HABITAT QUALITY SCORES --------------------------------------------")
source( paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep="") )
# ---------------------------------------------------------------------------
#   HABITAT QUALITY PATHWAY: Apply Habitat Quality Pathway Filters
# ---------------------------------------------------------------------------
# NOTE: the function below runs HQ Pathway for Restoration and Protection
print("----------------------------------------- APPLY HABITAT QUALITY FILTERS FOR PRIORITIZATION --------------------------------------------")
source(paste(script_path, 'Habitat_Quality_Pathway_Filter.R', sep=""))  # for Methow-Wenatchee-Entiat AND Okanogan functions
# ----- set names of Habitat Quality Scores to sum ------
habitat_quality_scores_colnames_for_sum = c("Stability_Mean" , "CoarseSubstrate_score" ,"Cover-Wood_score", "Flow-SummerBaseFlow_score",
"Off-Channel-Floodplain_score", "Off-Channel-Side-Channels_score","PoolQuantity&Quality_score",
"Riparian_Mean","Temperature-Rearing_score")
# --------------- generate for all basins except Okanogan ---------------
Habitat_Quality_Pathway_Spring_Chinook = Generate_Habitat_Quality_Output_Table("Spring Chinook", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Steelhead = Generate_Habitat_Quality_Output_Table("Steelhead", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Bull_Trout = Generate_Habitat_Quality_Output_Table("Bull Trout", basins_to_include, habitat_quality_scores_colnames_for_sum )
# --------------- generate for Okanogan ---------------
Habitat_Quality_Pathway_Steelhead_OKANOGAN = Generate_Habitat_Quality_Output_Table_Okanogan("Steelhead" )
dim(Habitat_Quality_Pathway_Steelhead_OKANOGAN)
dim(Habitat_Quality_Pathway_Steelhead_OKANOGAN)
names(Habitat_Quality_Pathway_Steelhead_OKANOGAN)
View(Habitat_Quality_Pathway_Steelhead_OKANOGAN[['Habitat_Quality_Pathway_Restoration']])
View(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
source(paste(script_path, 'Limiting_Factor_Pathway_Filter.R', sep=""))
Limiting_Factor_Pathway_Spring_Chinook = Generate_Limiting_Factor_Output_Table("Spring Chinook", basins_to_include)
Limiting_Factor_Pathway_Steelhead = Generate_Limiting_Factor_Output_Table("Steelhead", basins_to_include)
Limiting_Factor_Pathway_Bull_Trout = Generate_Limiting_Factor_Output_Table("Bull Trout", basins_to_include)
View(Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']])
View(Generate_Limiting_Factor_Output_Table)
View(Generate_Limiting_Factor_Output_Table)
source('~/GitHub/Prioritization_Step2_Data_R_Project/Scripts/Limiting_Factor_Pathway_Filter.R')
# ---------------------------------------------------------------------------
#  import R Packages
# ---------------------------------------------------------------------------
library(tidyverse)
# ---------------------------------------------------------------------------
#     Read in Data
# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
View(Reach_Information_data)
View(FUNCTION_update_names_in_data_frames.R)
View(FUNCTION_generate_habitat_attribute_score_from_Habitat_Data_Raw)
View(FUNCTION_generate_habitat_attribute_score_from_Habitat_Data_Raw_FACTOR)
View(FUNCTION_generate_habitat_attribute_score_from_Habitat_Data_Raw)
View(FUNCTION_generate_habitat_attribute_score_from_Habitat_Data_Raw)
View(FUNCTION_generate_habitat_attribute_score_from_Habitat_Data_Raw)
# ---------------------------------------------------------------------------
#  import R Packages
# ---------------------------------------------------------------------------
library(tidyverse)
library(xlsx)
library(writexl)
library(readxl)
# ---------------------------------------------------------------------------
#  Script Criteria for output
# ---------------------------------------------------------------------------
basins_to_include = c("Methow",  "Entiat","Wenatchee" )  # basins to include in simulation
exclude_bull_trout = "yes"  # if "yes" -> remove bull trout for WebMap applications
output_Habitat_Quality_and_Habitat_Attribute_Scores = "no"  # enter "yes" or "no" if you want the "flat table" Habitat Attribute output (doubles time to run script)
update_Okanogan_reach_names = "no"  # if "yes" - update Okanogan reach names (should not have to run again - since on 5.Apr.2021 Ryan updated names)
time1 <- proc.time()[3] # for timing the total time to run the tool
# --------------- directory of scripts -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
master_path = 'Data/'
habitat_data_path = paste(master_path,"Habitat_Data/", sep="")
ranking_data_path = paste(master_path,"Ranking_Data/", sep="")
crosswalks_path = paste(master_path,"Crosswalks/", sep="")
criteria_and_scoring_path = paste(master_path,"Criteria_and_Scoring/", sep="")
Okanogan_EDT_path = paste(master_path,'Okanogan_EDT/', sep="")
reach_assessment_projects_path = paste(master_path,'Reach_Assessment_Projects/', sep="")
# ----------- directory for output ---------
output_path = 'Output/'
# ---------------------------------------------------------------------------
#     Read in Data
# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
print("----------------------------------------- Update Okanogan Reach Names (if necessary) --------------------------------------------")
if(update_Okanogan_reach_names == "yes"){
source(paste(script_path, 'FUNCTION_update_names_in_data_frames.R', sep=""))
}
# ---------------------------------------------------------------------------
#      Criteria for Filters
# ---------------------------------------------------------------------------
print("----------------------------------------- ASSIGN CRITERIA --------------------------------------------")
source(paste(script_path, 'Criteria_Script.R', sep=""))
print("----------------------------------------- Prepare Okanogan EDT prep --------------------------------------------")
source(paste(script_path, 'Okanogan_EDT_data_input_prep.R', sep=""))
# ---------------------------------------------------------------------------
#   LIMITING FACTOR PATHWAY: Generate Habitat Attribute Table (used in Limiting Factor Pathway)
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITAT ATTRIBUTE SCORES (for Limtiting Factor Pathway) --------------------------------------------")
# some of HQ filters are used in Habitat Attribute generation
source( paste(script_path, 'FUNCTIONS_for_Habitat_Quality_Filters.R', sep="")  )
# script to generate habitat attribute scores
source(paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep="") )
# script to generate habitat attribute scores
source(paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep="") )
print("----------------------------------------- GENERATE HABITAT QUALITY SCORES --------------------------------------------")
source( paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep="") )
# ---------------------------------------------------------------------------
#   HABITAT QUALITY PATHWAY: Apply Habitat Quality Pathway Filters
# ---------------------------------------------------------------------------
# NOTE: the function below runs HQ Pathway for Restoration and Protection
print("----------------------------------------- APPLY HABITAT QUALITY FILTERS FOR PRIORITIZATION --------------------------------------------")
source(paste(script_path, 'Habitat_Quality_Pathway_Filter.R', sep=""))  # for Methow-Wenatchee-Entiat AND Okanogan functions
# ----- set names of Habitat Quality Scores to sum ------
habitat_quality_scores_colnames_for_sum = c("Stability_Mean" , "CoarseSubstrate_score" ,"Cover-Wood_score", "Flow-SummerBaseFlow_score",
"Off-Channel-Floodplain_score", "Off-Channel-Side-Channels_score","PoolQuantity&Quality_score",
"Riparian_Mean","Temperature-Rearing_score")
# --------------- generate for all basins except Okanogan ---------------
Habitat_Quality_Pathway_Spring_Chinook = Generate_Habitat_Quality_Output_Table("Spring Chinook", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Steelhead = Generate_Habitat_Quality_Output_Table("Steelhead", basins_to_include, habitat_quality_scores_colnames_for_sum )
Habitat_Quality_Pathway_Bull_Trout = Generate_Habitat_Quality_Output_Table("Bull Trout", basins_to_include, habitat_quality_scores_colnames_for_sum )
# --------------- generate for Okanogan ---------------
Habitat_Quality_Pathway_Steelhead_OKANOGAN = Generate_Habitat_Quality_Output_Table_Okanogan("Steelhead" )
# ---------------- add Okanogan to Methow-Wenatchee-Okanogan HQ Output ------------
habitat_quality_scores_colnames_for_combo = colnames(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])[7:(ncol(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])-7)]
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']] = Combine_MetEntWen_and_Okanogan_Output(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead_OKANOGAN[['Habitat_Quality_Pathway_Restoration']],
habitat_quality_scores_colnames_for_combo)
class(Habitat_Quality_Pathway_Spring_Chinook)
names(Habitat_Quality_Pathway_Spring_Chinook)
Habitat_Quality_Pathway_Spring_Chinook[["Habitat_Quality_Pathway_Restoration"]]
View(Habitat_Quality_Pathway_Spring_Chinook[["Habitat_Quality_Pathway_Restoration"]])
View(Combine_MetEntWen_and_Okanogan_Output)
View(Generate_Habitat_Quality_Output_Table_Okanogan)
View(Generate_Habitat_Quality_Output_Table_Okanogan)
test_x = TRUE
if(test_x){
species = "Steelhead"
}
if(species == "Steelhead"){
# ---------------- species reach ---------------
species_reach = 'Steelhead.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration = 'STLTier_Restoration'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection = 'STLTier_Protection'
# --------------- Life stage Sum column name ----------
life_stage_sum_column = 'SH_Life_Stage_Sum'
# ---------------- life stage priority names ---------
life_stages_priorities_species_specific =  life_stages_priorities[['steelhead_life_stages']]
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Steelhead_Limiting_Factors_RESTORATOIN" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
protection_output_name = paste(paste("Steelhead_Limiting_Factors_PROTECTION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
}else{
print('Incorrectly entered species name - re-type species name')
}
#  ---------------------------------------------------------------------------------
#           Establish Reach Information Data Frame Just for this Output
#  ---------------------------------------------------------------------------------
# -------- Reach Information data frame for this species -----------
Species_Reach_Information_data = Reach_Information_data[which(Reach_Information_data$Basin == "Okanogan"), ]
dim(AU_Ranks_Okanogan)
AU_Ranks_Okanogan
View(AU_Ranks_Okanogan)
