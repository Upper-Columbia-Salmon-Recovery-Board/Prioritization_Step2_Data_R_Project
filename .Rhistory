# ---------------- Limiting Factor Data frame ---------------
Limiting_Factor_Restoration_data_frame = Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']]
Limiting_Factor_Protection_data_frame = Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Protection']]
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Spring_Chinook_Reach_Scoring_RESTORATION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
protection_output_name = paste(paste("Spring_Chinook_Reach_Scoring_PROTECTION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
Output_ALL_Spring_Chinook_file = paste(paste("Spring_Chinook_Ranks_ALL_OUTPUT" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
# -------------------- STEELHEAD -------------------------------------------
# ---------------- species reach ---------------
species_reach_Steelhead = 'Steelhead.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration_Steelhead = 'STLTier_Restoration'
AU_rank_name_restoration_Steelhead_Okanogan  = 'AU Restoration Rank' # FOR Okanogan
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection_Steelhead = 'STLTier_Protection'
AU_rank_name_protection_Steelhead_Okanogan = 'AU Protection Rank'
# --------------- Life stage Sum column name ----------
life_stage_sum_column_Steelhead = 'SH Number of Life Stages'
# ---------------- Limiting Factor Data frame ---------------
Limiting_Factor_Restoration_data_frame = Limiting_Factor_Steelhead[['Limiting_Factor_Pathway_Restoration']]
Limiting_Factor_Protection_data_frame = Limiting_Factor_Steelhead[['Limiting_Factor_Pathway_Protection']]
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Steelhead_Reach_Scoring_RESTORATION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
protection_output_name = paste(paste("Steelhead_Reach_Scoring_PROTECTION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
Output_ALL_Steelhead_file = paste(paste("Steelhead_Ranks_ALL_OUTPUT" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
if(exclude_bull_trout == "no"){
# ---------------- species reach ---------------
species_reach_Bull_Trout = 'Bull.Trout.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration_Bull_Trout = 'BTTier_Restoration'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection_Bull_Trout = 'BTTier_Protection'
# --------------- Life stage Sum column name ----------
life_stage_sum_column_Bull_Trout = 'BT Num Life Stages'
# ---------------- Limiting Factor Data frame ---------------
Limiting_Factor_Restoration_data_frame = Limiting_Factor_Bull_Trout[['Limiting_Factor_Pathway_Restoration']]
Limiting_Factor_Protection_data_frame = Limiting_Factor_Bull_Trout[['Limiting_Factor_Pathway_Protection']]
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Bull_Trout_Reach_Scoring_RESTORATION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
protection_output_name = paste(paste("Bull_Trout_Reach_Scoring_PROTECTION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
Output_ALL_Bull_Trout_file = paste(paste("Bull_Trout_Ranks_ALL_OUTPUT" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
}
#  ---------------------------------------------------------------------------------
#           Establish Reach Information Data Frame Just for this Output
#  ---------------------------------------------------------------------------------
# -------- Reach Information data frame for this species -----------
Species_Reach_Information_data = Reach_Information_data
#  ---------------------------------------------------------------------------------
#            Filter out to only have Basins desired for this analysis
#  ---------------------------------------------------------------------------------
if(length(basins)==1){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter(Basin==basins[1])
}else if(length(basins)==2){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter((Basin==basins[1]) | (Basin==basins[2]) )
}else if(length(basins)==3){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter((Basin==basins[1]) | (Basin==basins[2]) | (Basin==basins[3]) )
}else if(length(basins)==4){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter((Basin==basins[1]) | (Basin==basins[2]) | (Basin==basins[3])  | (Basin==basins[4]) )
}
print(paste("Total reaches after only having basins of interest: ", nrow(Species_Reach_Information_data), sep=""))
# ---------- AU Ranks data frame for this species ---------
Species_AU_Ranks_data_Spring_Chinook = AU_Ranks_data
Species_AU_Ranks_data_Steelhead = AU_Ranks_data
Species_AU_Ranks_data_Steelhead_Okanogan = AU_Ranks_Okanogan
if(exclude_bull_trout == "no"){
Species_AU_Ranks_data_Bull_Trout = AU_Ranks_data
}
#  ---------------------------------------------------------------------------------
#            Filter out to only have Species-specific reaches
#  ---------------------------------------------------------------------------------
# -------------------- SPRING CHINOOK: add additional column for this particular species reach presence ---------------
Spring_Chinook_Reach_Information_data = Species_Reach_Information_data
Spring_Chinook_Reach_Information_data$Species_Reaches = Spring_Chinook_Reach_Information_data[species_reach_Spring_Chinook]
# ----------------------- filter out for only reaches with this species --------------
Spring_Chinook_Reach_Information_data = Spring_Chinook_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
print(paste("Total reaches after Spring Chinook species-reach filter: ", nrow(Spring_Chinook_Reach_Information_data), sep=""))
# -------------------- STEELHEAD: add additional column for this particular species reach presence ---------------
Steelhead_Reach_Information_data =  Species_Reach_Information_data
Steelhead_Reach_Information_data$Species_Reaches = Steelhead_Reach_Information_data[species_reach_Steelhead]
# ----------------------- filter out for only reaches with this species --------------
Steelhead_Reach_Information_data = Steelhead_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
print(paste("Total reaches after Steelhead species-reach filter: ", nrow(Steelhead_Reach_Information_data), sep=""))
if(exclude_bull_trout == "no"){
# -------------------- BULL TROUT: add additional column for this particular species reach presence ---------------
Bull_Trout_Reach_Information_data = Species_Reach_Information_data
Bull_Trout_Reach_Information_data$Species_Reaches = Bull_Trout_Reach_Information_data[species_reach_Bull_Trout]
# ----------------------- filter out for only reaches with this species --------------
Bull_Trout_Reach_Information_data = Bull_Trout_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
print(paste("Total reaches after Bull Trout species-reach filter: ", nrow(Bull_Trout_Reach_Information_data), sep=""))
}
# ---------------------- start data frame that outputs results for all reaches -------------
Output_Spring_Chinook_All = Reach_Information_data[,c(1:4)]
Output_Steelhead_All = Reach_Information_data[,c(1:3,5)]
Output_Bull_Trout_All = Reach_Information_data[,c(1:3,6)]
# ---------------------------------------------------------------------------------------------------------------
#
#     Priority Assessment Unit Filter
#
# ---------------------------------------------------------------------------------------------------------------
#  ---------------------------------------------------------------------------------
#            Filter out to select for AU rank - RESTORATION
#  ---------------------------------------------------------------------------------
# ------------------- establish AU Rank ------------------
AU_Rank_Restoration = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "AU_Ranking" &
Restoration_Reach_Scoring$Category_Stage == "filter"),"Category"]
# --------------------------- SPRING CHINOOK -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Spring_Chinook ["Species_AU_Ranks"] = Species_AU_Ranks_data_Spring_Chinook [AU_rank_name_restoration_Spring_Chinook]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Spring_Chinook_restoration = Species_AU_Ranks_data_Spring_Chinook  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Spring_Chinook_Reach_Information_data_restoration = Spring_Chinook_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Spring_Chinook_restoration$`Assessment Unit`)
print(paste("Spring Chinook Restoration - total AU rank filter: ", nrow(Spring_Chinook_Reach_Information_data_restoration), sep=""))
# --------------------------- STEELHEAD -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead ["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead [AU_rank_name_restoration_Steelhead]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_restoration = Species_AU_Ranks_data_Steelhead  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_restoration = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_restoration$`Assessment Unit`)
# ---------------- add Okanogan -------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead_Okanogan["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead_Okanogan[AU_rank_name_restoration_Steelhead_Okanogan]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_restoration_Okanogan = Species_AU_Ranks_data_Steelhead_Okanogan %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_restoration_Okanogan = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_restoration_Okanogan$`EDT AU`)
# ------------------- combine Wen-Ent-Methow and Okanogan ------------
Steelhead_Reach_Information_data_restoration = rbind(Steelhead_Reach_Information_data_restoration, Steelhead_Reach_Information_data_restoration_Okanogan)
print(paste("Steelhead Restoration - total AU rank filter: ", nrow(Steelhead_Reach_Information_data_restoration), sep=""))
# --------------------------- BULL TROUT -----------------
if(exclude_bull_trout == "no"){
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Bull_Trout ["Species_AU_Ranks"] = Species_AU_Ranks_data_Bull_Trout [AU_rank_name_restoration_Bull_Trout]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Bull_Trout_restoration = Species_AU_Ranks_data_Bull_Trout  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Bull_Trout_Reach_Information_data_restoration = Bull_Trout_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Bull_Trout_restoration$`Assessment Unit`)
print(paste("Bull Trout Restoration - total AU rank filter: ", nrow(Bull_Trout_Reach_Information_data_restoration), sep=""))
# ------------ add to data frame that includes all reaches -----------
AU_Rank_Data = Species_AU_Ranks_data_Bull_Trout[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data) = c("Assessment.Unit", "AU Restoration Rank")
Output_Bull_Trout_All = merge(Output_Bull_Trout_All, AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
}
# -------- add to data frame that includes all reaches -----
# ------------- Spring Chinook --------
AU_Rank_Data = Species_AU_Ranks_data_Spring_Chinook[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data) = c("Assessment.Unit", "AU Restoration Rank")
Output_Spring_Chinook_All = merge(Output_Spring_Chinook_All  ,AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
# ----------- Steelhead ----------
if(any(Species_AU_Ranks_data_Steelhead$Subbasin == "Okanogan")){
AU_Rank_Data = Species_AU_Ranks_data_Steelhead[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data) = c("Assessment.Unit", "AU Restoration Rank")
}else{
AU_Rank_Data = Species_AU_Ranks_data_Steelhead_Okanogan[,c("EDT AU","AU Restoration Rank")]
colnames(AU_Rank_Data)[1] = "Assessment.Unit"
AU_Rank_Data2 = Species_AU_Ranks_data_Steelhead [,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data2) = c("Assessment.Unit", colnames(AU_Rank_Data)[2])
AU_Rank_Data = rbind(AU_Rank_Data, AU_Rank_Data2)
}
Output_Steelhead_All = merge(Output_Steelhead_All  ,  AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
#  ---------------------------------------------------------------------------------
#            Filter out to select for AU rank - PROTECTION
#  ---------------------------------------------------------------------------------
# ------------------- establish AU Rank ------------------
AU_Rank_Protection = Protection_Reach_Scoring[which(Protection_Reach_Scoring$Indicator == "AU_Ranking"  &
Protection_Reach_Scoring$Category_Stage == "filter"),"Category"]
# --------------------------- SPRING CHINOOK -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Spring_Chinook ["Species_AU_Ranks"] = Species_AU_Ranks_data_Spring_Chinook [AU_rank_name_protection_Spring_Chinook]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Spring_Chinook_protection = Species_AU_Ranks_data_Spring_Chinook  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Protection)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Spring_Chinook_Reach_Information_data_protection = Spring_Chinook_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Spring_Chinook_protection$`Assessment Unit`)
print(paste("Spring Chinook Protection - total AU rank filter: ", nrow(Spring_Chinook_Reach_Information_data_protection), sep=""))
# --------------------------- STEELHEAD -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead ["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead [AU_rank_name_protection_Steelhead]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_protection = Species_AU_Ranks_data_Steelhead  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Protection)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_protection = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_protection$`Assessment Unit`)
# ---------------- add Okanogan -------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead_Okanogan["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead_Okanogan[AU_rank_name_protection_Steelhead_Okanogan]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_protection_Okanogan = Species_AU_Ranks_data_Steelhead_Okanogan %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Protection)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_protection_Okanogan = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_protection_Okanogan$`EDT AU`)
# ------------------- combine Wen-Ent-Methow and Okanogan ------------
Steelhead_Reach_Information_data_protection = rbind(Steelhead_Reach_Information_data_protection, Steelhead_Reach_Information_data_protection_Okanogan)
print(paste("Steelhead Protection - total AU rank filter: ", nrow(Steelhead_Reach_Information_data_protection), sep=""))
# --------------------------- BULL TROUT -----------------
if(exclude_bull_trout == "no"){
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Bull_Trout ["Species_AU_Ranks"] = Species_AU_Ranks_data_Bull_Trout [AU_rank_name_protection_Bull_Trout]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Bull_Trout_protection = Species_AU_Ranks_data_Bull_Trout  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Protection)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Bull_Trout_Reach_Information_data_protection = Bull_Trout_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Bull_Trout_protection$`Assessment Unit`)
# -------- add to output that includes all reaches -----
AU_Rank_Data = Species_AU_Ranks_data_Bull_Trout[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data) = c("Assessment.Unit", "AU Protection Rank")
Output_Bull_Trout_All = merge(Output_Bull_Trout_All  ,AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
print(paste("Bull Trout Protection - total AU rank filter: ", nrow(Bull_Trout_Reach_Information_data_protection), sep=""))
}
# -------- add to output that includes all reaches -----
# ------ Spring Chinook --------
AU_Rank_Data = Species_AU_Ranks_data_Spring_Chinook[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data) = c("Assessment.Unit", "AU Protection Rank")
Output_Spring_Chinook_All = merge(Output_Spring_Chinook_All  ,AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
# --------- Steelhead ----------
if(any(Species_AU_Ranks_data_Steelhead$Subbasin == "Okanogan")){
AU_Rank_Data = Species_AU_Ranks_data_Steelhead[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data) = c("Assessment.Unit", "AU Protection Rank")
}else{
AU_Rank_Data = Species_AU_Ranks_data_Steelhead_Okanogan[,c("EDT AU","AU Protection Rank")]
colnames(AU_Rank_Data)[1] = "Assessment.Unit"
AU_Rank_Data2 = Species_AU_Ranks_data_Steelhead [,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data2) = c("Assessment.Unit", colnames(AU_Rank_Data)[2])
AU_Rank_Data = rbind(AU_Rank_Data, AU_Rank_Data2)
}
Output_Steelhead_All = merge(Output_Steelhead_All  ,AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
dim(Bull_Trout_Reach_Information_data_restoration)
View(Bull_Trout_Reach_Information_data_restoration)
View(Bull_Trout_Reach_Information_data)
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Bull_Trout ["Species_AU_Ranks"] = Species_AU_Ranks_data_Bull_Trout [AU_rank_name_restoration_Bull_Trout]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Bull_Trout_restoration = Species_AU_Ranks_data_Bull_Trout  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
View(Species_AU_Ranks_data_Bull_Trout_restoration)
AU_Rank_Restoration
View(Restoration_Reach_Scoring)
dim(AU_Rank_Restoration)
AU_Rank_Restoration
dim(Restoration_Reach_Scoring)
Restoration_Reach_Scoring
View(Restoration_Reach_Scoring)
View(Generate_Restoration_or_Protection_Reach_Rankings_Table)
criteria_and_scoring_path
Reach_Scoring_Restoration_and_Protection_Scoring = read_excel( paste(criteria_and_scoring_path,'Criteria_Reach_Scoring_Restoration_and_Protection.xlsx', sep="") )
# ----------- update columns that are numeric to numeric ------------
cols.num <- c( 'Category_lower_limit',	'Category_upper_limit',	'Score')
Reach_Scoring_Restoration_and_Protection_Scoring[cols.num] <- sapply(Reach_Scoring_Restoration_and_Protection_Scoring[cols.num],as.numeric)
# --------------- divide up into Restoration and Protection -------------------------
Restoration_Reach_Scoring = Reach_Scoring_Restoration_and_Protection_Scoring %>%
filter(Pathway == 'Restoration')
Protection_Reach_Scoring = Reach_Scoring_Restoration_and_Protection_Scoring %>%
filter(Pathway == 'Protection')
View(Restoration_Reach_Scoring)
# ------------------- establish AU Rank ------------------
AU_Rank_Restoration = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "AU_Ranking" &
Restoration_Reach_Scoring$Category_Stage == "filter"),"Category"]
AU_Rank_Restoration
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Spring_Chinook_restoration = Species_AU_Ranks_data_Spring_Chinook  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
Reach_Scoring_Restoration_and_Protection_Scoring = read_excel( paste(criteria_and_scoring_path,'Criteria_Reach_Scoring_Restoration_and_Protection.xlsx', sep="") )
# ----------- update columns that are numeric to numeric ------------
cols.num <- c( 'Category_lower_limit',	'Category_upper_limit',	'Score')
Reach_Scoring_Restoration_and_Protection_Scoring[cols.num] <- sapply(Reach_Scoring_Restoration_and_Protection_Scoring[cols.num],as.numeric)
# --------------- divide up into Restoration and Protection -------------------------
Restoration_Reach_Scoring = Reach_Scoring_Restoration_and_Protection_Scoring %>%
filter(Pathway == 'Restoration')
Protection_Reach_Scoring = Reach_Scoring_Restoration_and_Protection_Scoring %>%
filter(Pathway == 'Protection')
View(Restoration_Reach_Scoring)
# ------------------- establish AU Rank ------------------
AU_Rank_Restoration = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "AU_Ranking" &
Restoration_Reach_Scoring$Category_Stage == "filter"),"Category"]
AU_Rank_Restoration
# --------------------------- SPRING CHINOOK -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Spring_Chinook ["Species_AU_Ranks"] = Species_AU_Ranks_data_Spring_Chinook [AU_rank_name_restoration_Spring_Chinook]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Spring_Chinook_restoration = Species_AU_Ranks_data_Spring_Chinook  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Spring_Chinook_Reach_Information_data_restoration = Spring_Chinook_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Spring_Chinook_restoration$`Assessment Unit`)
print(paste("Spring Chinook Restoration - total AU rank filter: ", nrow(Spring_Chinook_Reach_Information_data_restoration), sep=""))
# --------------------------- STEELHEAD -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead ["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead [AU_rank_name_restoration_Steelhead]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_restoration = Species_AU_Ranks_data_Steelhead  %>%
filter(Species_AU_Ranks    %in%   AU_Rank_Restoration)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_restoration = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_restoration$`Assessment Unit`)
View(Species_AU_Ranks_data_Steelhead_restoration)
# --------------------------- STEELHEAD -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead ["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead [AU_rank_name_restoration_Steelhead]
View(Species_AU_Ranks_data_Steelhead)
Species_AU_Ranks
colnames(Species_AU_Ranks_data_Steelhead)
# --------------------------- STEELHEAD -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead ["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead [AU_rank_name_restoration_Steelhead]
colnames(Species_AU_Ranks_data_Steelhead)
Reach_Scoring_Restoration_and_Protection_Scoring = read_excel( paste(criteria_and_scoring_path,'Criteria_Reach_Scoring_Restoration_and_Protection.xlsx', sep="") )
# ----------- update columns that are numeric to numeric ------------
cols.num <- c( 'Category_lower_limit',	'Category_upper_limit',	'Score')
Reach_Scoring_Restoration_and_Protection_Scoring[cols.num] <- sapply(Reach_Scoring_Restoration_and_Protection_Scoring[cols.num],as.numeric)
# --------------- divide up into Restoration and Protection -------------------------
Restoration_Reach_Scoring = Reach_Scoring_Restoration_and_Protection_Scoring %>%
filter(Pathway == 'Restoration')
Protection_Reach_Scoring = Reach_Scoring_Restoration_and_Protection_Scoring %>%
filter(Pathway == 'Protection')
# ------------------- establish AU Rank ------------------
AU_Rank_Restoration = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "AU_Ranking" &
Restoration_Reach_Scoring$Category_Stage == "filter"),"Category"]
AU_Rank_Restoration
AU_Rank_Restoration
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_restoration = Species_AU_Ranks_data_Steelhead[
which(Species_AU_Ranks_data_Steelhead["Species_AU_Ranks"] <= AU_Rank_Restoration), ]
which(Species_AU_Ranks_data_Steelhead["Species_AU_Ranks"] <= AU_Rank_Restoration)
AU_Rank_Restoration
class(AU_Rank_Restoration)
as.numeric(AU_Rank_Restoration)
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_restoration = Species_AU_Ranks_data_Steelhead[
which(Species_AU_Ranks_data_Steelhead["Species_AU_Ranks"] <= as.numeric(AU_Rank_Restoration) ), ]
source(paste(script_path, "Reach_Rankings_Restoration_and_Protection.R", sep=""))
# ------  run the function to generate restoration rankings -------
Reach_Rankings_and_all_species_Output = Generate_Restoration_or_Protection_Reach_Rankings_Table(basins_to_include )
Reach_Rankings_Output = Reach_Rankings_and_all_species_Output[["Reach_Rankings_Combined"]]
Output_ALL_species_and_reaches = Reach_Rankings_and_all_species_Output[["Output_ALL_species_and_reaches"]]
# ----------------- separate into Restoration and Protection ----------------
Reach_Rankings_Output_Restoration = Reach_Rankings_Output[['Reach_Rankings_Restoration']]
Reach_Rankings_Output_Protection = Reach_Rankings_Output[['Reach_Ranking_Protection']]
View(Reach_Rankings_Output_Restoration)
# print what reaches overlap between restoration and protection
intersect(Reach_Rankings_Output_Restoration$ReachName, Reach_Rankings_Output_Protection$ReachName)
setdiff(Reach_Rankings_Output_Restoration$ReachName, Restoration_Prioritization_Output$ReachName)
# ---------------------------------------------------------------------------
#  Reach-Habitat Attributes-Life Stage per row
# ---------------------------------------------------------------------------
columns_info = c( "ReachName","Basin","Assessment.Unit" ) # columns to automatically add to beginning (left side) of output
Reach_Habitat_Attribute_Life_Stage_Restoration_Output = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage(  Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info, exclude_bull_trout)
# ---------------------------------------------------------------------------
#  Reach-Habitat Attributes-Life Stage-Species per row
# ---------------------------------------------------------------------------
Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage_Species( Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], columns_info, exclude_bull_trout, HQ_priority_life_stages)
# ------------------ just to test/compare output --------------
# note these should be the same - except some of the HQ output is different (Stability, Riparian)
test_x = TRUE
if(test_x){
reach_test = "Chiwawa River Lower 01"
hab_ats_1 = unlist( strsplit(Restoration_Prioritization_Output_for_WebMap[which(Restoration_Prioritization_Output_for_WebMap$ReachName == reach_test),]$Impaired_Habitat_Attributes_All_Species, ",") )
hab_ats_2 = unique(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output$ReachName == reach_test),]$Habitat_Attribute)
setdiff(hab_ats_1, hab_ats_2)
setdiff(hab_ats_2, hab_ats_1)
unlist( strsplit(Restoration_Prioritization_Output_for_WebMap$Species[which(Restoration_Prioritization_Output_for_WebMap$ReachName == reach_test)], ",") )
unique(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output$ReachName == reach_test),]$Species)
unlist(strsplit(Restoration_Prioritization_Output_for_WebMap[which(Restoration_Prioritization_Output_for_WebMap$ReachName == reach_test),]$Life_Stages, ","))[order(unlist(strsplit(Restoration_Prioritization_Output_for_WebMap[which(Restoration_Prioritization_Output_for_WebMap$ReachName == reach_test),]$Life_Stages, ",")))]
unique(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output$ReachName == reach_test),]$Life_Stage)[order(unique(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output[which(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output$ReachName == reach_test),]$Life_Stage))]
}
HQ_data = Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']]
LF_data = Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']]
# HQ_data = Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']]
# LF_data = Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']]
# HQ_data = Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']]
# LF_data = Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']]
species_x = "Spring Chinook"
columns_info = c( "ReachName","Basin","Assessment.Unit" )
Reach_Habitat_Attribute_Life_Stage_Restoration_Output_Spring_Chinook = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage_SPECIES_ONLY( Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']], "Spring Chinook", c( "ReachName","Basin","Assessment.Unit" ))
Reach_Habitat_Attribute_Life_Stage_Restoration_Output_Steelhead = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage_SPECIES_ONLY( Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']], "Steelhead", c( "ReachName","Basin","Assessment.Unit" ))
if(exclude_bull_trout == "no"){
Reach_Habitat_Attribute_Life_Stage_Restoration_Output_Bull_Trout = FUNCTION_combine_by_Reach_AND_Habitat_Attribute_Life_Stage_SPECIES_ONLY( Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']],
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']], "Bull Trout", c( "ReachName","Basin","Assessment.Unit" ))
}
# ---------------------- Restoration ------------
Restoration_Prioritization_Output_for_WebMap = FUNCTION_Add_Reach_Rank_and_Misc_Updates_for_WebMap_Restoration(Restoration_Prioritization_Output_for_WebMap)
# -------------- Protection ---------------
Protection_Prioritization_Output_for_WebMap = FUNCTION_Add_Reach_Rank_and_Misc_Updates_for_WebMap_Protection(Protection_Prioritization_Output)
# ---------------------- Restoration ------------
Restoration_Prioritization_Output_Spring_Chinook = FUNCTION_Add_Reach_Rank_and_Misc_Updates_for_WebMap_Restoration_INDIV_SPECIES(Restoration_Prioritization_Output_Spring_Chinook)
Restoration_Prioritization_Output_Steelhead = FUNCTION_Add_Reach_Rank_and_Misc_Updates_for_WebMap_Restoration_INDIV_SPECIES(Restoration_Prioritization_Output_Steelhead)
Restoration_Prioritization_Output_Bull_Trout = FUNCTION_Add_Reach_Rank_and_Misc_Updates_for_WebMap_Restoration_INDIV_SPECIES(Restoration_Prioritization_Output_Bull_Trout)
# ---------------------- Protection ------------
Protection_Prioritization_Output_Spring_Chinook = FUNCTION_Add_Reach_Rank_and_Misc_Updates_for_WebMap_Protection_INDIV_SPECIES(Protection_Prioritization_Output_Spring_Chinook, "Spring Chinook")
Protection_Prioritization_Output_Steelhead = FUNCTION_Add_Reach_Rank_and_Misc_Updates_for_WebMap_Protection_INDIV_SPECIES(Protection_Prioritization_Output_Steelhead, "Steelhead")
Protection_Prioritization_Output_Bull_Trout = FUNCTION_Add_Reach_Rank_and_Misc_Updates_for_WebMap_Protection_INDIV_SPECIES(Protection_Prioritization_Output_Bull_Trout, "Bull Trout")
Habitat_Attribute_Scores_columns_to_pull  = c("Bank Stability","Channel Stability",  "Coarse Substrate",
"Cover- Wood", "Flow- Summer Base Flow",
"Floodplain Connectivity", "Off-Channel/Side-Channels","Pool Quantity & Quality", # <- REI Values
"Riparian- Canopy Cover"  ,    "Riparian-Disturbance" ,
"Temperature- Rearing")
Habitat_Quality_Scores_columns_to_pull = c("ReachName","Basin", "BankStability_score","ChannelStability_score","Stability_Mean","CoarseSubstrate_score",
"Cover-Wood_score","Flow-SummerBaseFlow_score",
"FloodplainConnectivity_score" ,"Off-Channel/Side-Channels_score","PoolQuantity&Quality_score","Riparian-Disturbance_score",
"Riparian-CanopyCover_score","Riparian_Mean","Temperature-Rearing_score", "HQ_Sum","HQ_Pct")
Habitat_qulaity_Scores_for_WebMap_column_names = c("Reach Name","Basin", "Bank Stability","Channel Stability", "Stability Mean", "Coarse Substrate",
"Cover- Wood", "Flow- Summer Base Flow",
"Floodplain Connectivity", "Off-Channel and Side-Channels","Pool Quantity and Quality", # <- REI Values
"Riparian- Canopy Cover"  ,    "Riparian-Disturbance" , "Riparian Mean",
"Temperature- Rearing", "Habitat Quality Scores Sum", "Habitat Quality Score Percent" )
Reach_Information_data_columns_to_pull = c("ReachName","Basin","Assessment.Unit","Reach_start_river_miles", "Reach_end_river_miles" ,"Spring.Chinook.Reach" ,"Steelhead.Reach","Bull.Trout.Reach")
#"ReviewComments", "Reach.Assessment.Data", "Level.2.Survey.Data", "Level.2.Data.Prior.to.2000", "Level.2.Survey.Data.Date",
#"Data.Gap","Length..miles.",  "Length..meters."   )
Reach_Information_data_columns_new_names = c("Reach Name","Basin","Assessment Unit","RM Start", "RM End","Spring Chinook Reach" ,"Steelhead Reach","Bull Trout Reach")
# ORDER: REI ratings -> core metrics -> then the rest of them
# Order_of_Habitat_Attribute_Rating_Table_Columns = c("Coarse Substrate","% Fines/Embeddedness", "Cover- Wood","Pool Quantity & Quality", # <- REI Values
# "Off-Channel- Floodplain", "Off-Channel- Side-Channels", "Cover- Undercut Banks", #  <- REI Values
# "ChannelStability_score", "Stability_Mean", "Riparian-Disturbance_score",         # <- HQ scores based on REI Values
# "Riparian-CanopyCover_score", "Riparian_Mean",                                   # <- HQ scores based on REI Values
# "Contaminants","Entrainment/Stranding","Predators- Juveniles",                  # <- Spr Chn and STLDH core metrics
#  "Cover- Boulders", "Flow- Scour", "Flow- Summer Base Flow","Food- Food Web Resources",  # <- one species core metric
#  "Harassment", "Icing", "Superimposition", "Temperature- Adult Holding",               # <- one species core metric
#  "Temperature- Adult Spawning", "Temperature- Rearing",                              # <- one species core metric
#  "Brook Trout", "Pools- Deep Pools", "Predators- Adults")                           # <- not a core metric
Order_of_Habitat_Attribute_Rating_Table_Columns = c("Bank Stability","Channel Stability",  "Coarse Substrate",
"Cover- Wood", "Flow- Summer Base Flow",
"Floodplain Connectivity", "Off-Channel/Side-Channels","Pool Quantity & Quality", # <- REI Values
"Riparian- Canopy Cover"  ,    "Riparian-Disturbance" ,
"Temperature- Rearing" )        # <- HQ scores based on REI Values
# just runs script - output is Habitat_Attributes_Ratings_Table
source(paste(script_path, "FUNCTIONS_for_Habitat_Attribute_Rating_Table_for_WebMap.R", sep=""))
#  generate missing data layer (HQ habitat attributes that are missing) for WebMap
# reaches_remove = c("Lake ")  not using
source(paste(script_path, "Generate_Habitat_Quality_Scores_Missing_Data_Layer.R", sep=""))
# ----------------- script to add Okanogan HQ scores for Webmap ---------------------
# Output is Habitat_Quality_Scores_for_WebMap - results saved to excel file below
source(paste(script_path, "Generate_Habitat_Quality_Scores_for_WebMap.R", sep=""))
# ------------------------------- Generate AU layer --------------------------
source(paste(script_path, "Generate_AU_level_information_for_WebMap_pop_up.R", sep=""))
# -----------------------------------------------------------------
#     Reach Rankings
# -----------------------------------------------------------------
output_path_x =  paste(output_path,'Restoration_Reach_Ranking_Scores_Output_tier1_and_2.xlsx', sep="")
write.xlsx(Reach_Rankings_Output_Restoration,output_path_x )
output_path_x =  paste(output_path,'Protection_Reach_Ranking_Scores_Output_tier1_and_2.xlsx', sep="")
write.xlsx(Reach_Rankings_Output_Protection,output_path_x )
colnames(Restoration_Prioritization_Output)
colnames(Habitat_Attributes_Ratings_Table)
colnames(Restoration_Unacceptable_and_At_Risk)
colnames(Reach_Information_data_for_WebMap)
colnames(Restoration_Prioritization_Output)
# Note Habitat Data gaps/missing data output is done in Generate_Habitat_Quality_Scores_Missing_Data_Layer.R
# -----------------------------------------------------------------
#       Restoration
# -----------------------------------------------------------------
output_path_x =  paste(output_path,'Reach_Actions_Restoration_Unacceptable_and_AtRisk_Tier1_2.xlsx', sep="")
write.xlsx(Restoration_Prioritization_Output,output_path_x )
colnames(Restoration_Prioritization_Output)
colnames(Reach_Rankings_Output_Restoration)
colnames(Restoration_Prioritization_Output_for_WebMap)
View(Restoration_Prioritization_Output_for_WebMap)
# ----------- Outward Facing Table (pops up when reach is clicked on AND in tab below) - RESTORATION -----------
#     ALSO for the excel
output_path_x =  paste(output_path,'Restoration_Prioritization_Output_for_WebMap_Table_Tier_1_2.xlsx', sep="")
write.xlsx(Restoration_Prioritization_Output_for_WebMap,output_path_x )
# ----------- Outward Facing Table (pops up when reach is clicked on AND in tab below) - PROTECTION -----------
output_path_x =  paste(output_path,'Protection_Prioritization_Output_for_WebMap_Table_Tier_1_2.xlsx', sep="")
write.xlsx(Protection_Prioritization_Output_for_WebMap,output_path_x )
