# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_restoration = Species_AU_Ranks_data %>%
filter(Species_AU_Ranks    %in%   AU_Rank)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Species_Reach_Information_data_restoration = Species_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_restoration$`Assessment Unit`)
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data["Species_AU_Ranks"] = Species_AU_Ranks_data[AU_rank_name_protection]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_protection = Species_AU_Ranks_data %>%
filter(Species_AU_Ranks    %in%   AU_Rank)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Species_Reach_Information_data_protection = Species_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_protection$`Assessment Unit`)
Reaches_Limiting_Factor_Pathway_FILTERED = Generate_Species_Output_Table(species)
View(Generate_Species_Output_Table)
species
# -------------------- pull habitat attributes/life stages JUST for this species ---------
Attribute_LifeStage_Crosswalk_Life_Stage = Attribute_LifeStage_Crosswalk %>%
filter(Species  %in% species  )
# -------------------------- get list of life stages --------------------
life_stages = unique(Attribute_LifeStage_Crosswalk_Life_Stage$'Life Stage')
Life_Stages_Habitat_Priorities_ALL= list()
Life_Stages_Habitat_Priorities_FILTERED = list()
Reaches_Limiting_Factor_Pathway_FILTERED = c()
# ---------------------------- generate the scores for all the life stages -----------------
for(life_stage_x in life_stages){
print(life_stage_x)
# ----------------------------------------------------------------
#     Generate and combine in list the raw life stage scores
# ----------------------------------------------------------------
# ---------------------------------- generate habitat attributes and scores for this life stage ------------------
Habitat_Attribute_Scores_for_individual_Life_Stage = Generate_individual_life_stage_score(species, life_stage_x)
# ----------------------- generate name for the data frame in the list ---------------
list_name_x = paste( gsub(" ", "", species), gsub(" ", "", life_stage_x), sep="_" )
# ------------------- add the data frame for this life stage to the list for the species ----------
if(is.null(names(Life_Stages_Habitat_Priorities_ALL))){
Life_Stages_Habitat_Priorities_ALL[list_name_x] = list(Habitat_Attribute_Scores_for_individual_Life_Stage)
}else{
Life_Stages_Habitat_Priorities_ALL[[list_name_x]] = Habitat_Attribute_Scores_for_individual_Life_Stage
}
# ----------------------------------------------------------------
#     Generate and combine in list of filtered life stages
# ----------------------------------------------------------------
# ---------------------- use life stage (reach-level) priority filter ----------
Habitat_Attribute_Scores_for_individual_Life_Stage_Filtered = Life_Stage_Priority_Filter_Function(life_stage, Habitat_Attribute_Scores_for_individual_Life_Stage, Life_Stage_Priority)
# --------------------- combine into list ---------------------
# ------------------- add the data frame for this life stage to the list for the species ----------
if(is.null(names(Life_Stages_Habitat_Priorities_FILTERED))){
Life_Stages_Habitat_Priorities_FILTERED[list_name_x] = list(Habitat_Attribute_Scores_for_individual_Life_Stage_Filtered)
}else{
Life_Stages_Habitat_Priorities_FILTERED[[list_name_x]] = Habitat_Attribute_Scores_for_individual_Life_Stage_Filtered
}
# ------------------- add species and life stage name -----------
Habitat_Attribute_Scores_for_individual_Life_Stage_Filtered$life_stage = life_stage_x
Habitat_Attribute_Scores_for_individual_Life_Stage_Filtered$species = species
# ------------------- add lists of individual habitat attribute scores of 1 or 3 --------------------
# ------------------ just include list of reaches and life stages----------------------
Reaches_Limiting_Factor_Pathway_FILTERED = rbind(Reaches_Limiting_Factor_Pathway_FILTERED,
as.data.frame(Habitat_Attribute_Scores_for_individual_Life_Stage_Filtered[,c('ReachName', "Basin","species", "life_stage", "LF_Sum", "LF_Pct" , "LF_Score_Restoration", "LF_Score_Protection","unacceptable_1_indiv_habitat_attributes", "unacceptable_and_at_risk_1_3_indiv_habitat_attributes") ])  )
}
View(Generate_Species_Output_Table)
# -------------------- pull habitat attributes/life stages JUST for this species ---------
Attribute_LifeStage_Crosswalk_Life_Stage = Attribute_LifeStage_Crosswalk %>%
filter(Species  %in% species  )
# -------------------------- get list of life stages --------------------
life_stages = unique(Attribute_LifeStage_Crosswalk_Life_Stage$'Life Stage')
Life_Stages_Habitat_Priorities_ALL= list()
Life_Stages_Habitat_Priorities_FILTERED = list()
Reaches_Limiting_Factor_Pathway_FILTERED = c()
life_stage_x
# ----------------------------------------------------------------
#     Generate and combine in list the raw life stage scores
# ----------------------------------------------------------------
# ---------------------------------- generate habitat attributes and scores for this life stage ------------------
Habitat_Attribute_Scores_for_individual_Life_Stage = Generate_individual_life_stage_score(species, life_stage_x)
# ----------------------- generate name for the data frame in the list ---------------
list_name_x = paste( gsub(" ", "", species), gsub(" ", "", life_stage_x), sep="_" )
# ------------------- add the data frame for this life stage to the list for the species ----------
if(is.null(names(Life_Stages_Habitat_Priorities_ALL))){
Life_Stages_Habitat_Priorities_ALL[list_name_x] = list(Habitat_Attribute_Scores_for_individual_Life_Stage)
}else{
Life_Stages_Habitat_Priorities_ALL[[list_name_x]] = Habitat_Attribute_Scores_for_individual_Life_Stage
}
# ----------------------------------------------------------------
#     Generate and combine in list of filtered life stages
# ----------------------------------------------------------------
# ---------------------- use life stage (reach-level) priority filter ----------
Habitat_Attribute_Scores_for_individual_Life_Stage_Filtered = Life_Stage_Priority_Filter_Function(life_stage, Habitat_Attribute_Scores_for_individual_Life_Stage, Life_Stage_Priority)
View(Life_Stage_Priority_Filter_Function)
life_stage
# ------------------ output data -------------------------
#Habitat_Quality_Scores = as.data.frame(Habitat_Quality_Scores)
#output_path_x =  paste(output_path,'Habitat_Quality_Scores.xlsx', sep="")
#write.xlsx(  Habitat_Quality_Scores,
#  output_path_x, col.names = TRUE,  row.names = FALSE, append = FALSE, showNA = TRUE, password = NULL)
life_stage = "Spawning and Incubation"
Habitat_Attribute_Scores_for_individual_Life_Stage
Life_Stage_Priority
# -------- ONE Life_Stage_Priority -----------
if(length(Life_Stage_Priority) == 1){
life_stages_priorities_species_specific_list = Life_Stage_Priorities_AU_and_Reach_data %>%
filter(Life_Stage_Priorities_AU_and_Reach_data[life_stages_priorities_species_specific[[life_stage]]] ==  Life_Stage_Priority)   #
# -------- TWO Life_Stage_Priority -----------
}else if(length(Life_Stage_Priority) == 2){
life_stages_priorities_species_specific_list = Life_Stage_Priorities_AU_and_Reach_data %>%
filter(Life_Stage_Priorities_AU_and_Reach_data[life_stages_priorities_species_specific[[life_stage]]] ==  Life_Stage_Priority[1]  |
Life_Stage_Priorities_AU_and_Reach_data[life_stages_priorities_species_specific[[life_stage]]] ==  Life_Stage_Priority[2] )   #
# -------- THREE Life_Stage_Priority -----------
}else if(length(Life_Stage_Priority) == 3){
life_stages_priorities_species_specific_list = Life_Stage_Priorities_AU_and_Reach_data %>%
filter(Life_Stage_Priorities_AU_and_Reach_data[life_stages_priorities_species_specific[[life_stage]]] ==  Life_Stage_Priority[1]  |
Life_Stage_Priorities_AU_and_Reach_data[life_stages_priorities_species_specific[[life_stage]]] ==  Life_Stage_Priority[2]  |
Life_Stage_Priorities_AU_and_Reach_data[life_stages_priorities_species_specific[[life_stage]]] ==  Life_Stage_Priority[3] )   #
}
# -------------------------------------------------------
#     Filter Reaches from Life stage analysis
# -------------------------------------------------------
Habitat_Attribute_Scores_for_individual_Life_Stage_Filtered = Habitat_Attribute_Scores_for_individual_Life_Stage %>%
filter(Habitat_Attribute_Scores_for_individual_Life_Stage$ReachName   %in%   life_stages_priorities_species_specific_list$ReachName)
#source(paste(script_path, 'Limiting_Factors_Filter.R', sep=""))
source(paste(script_path, 'Limiting_Factor_Pathway_Filter.R', sep=""))
Limiting_Factor_Pathway_Spring_Chinook = Generate_Limiting_Factor_Output_Table("Spring Chinook", basins_to_include)
Limiting_Factor_Pathway_Steelhead = Generate_Limiting_Factor_Output_Table("Steelhead", basins_to_include)
Limiting_Factor_Pathway_Bull_Trout = Generate_Limiting_Factor_Output_Table("Bull Trout", basins_to_include)
source(paste(script_path, 'FUNCTIONS_for_Generating_Action_Categories.R', sep=""))
traceback()
Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']]
habitat_attributes_x_column = Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']]$unacceptable_1_indiv_habitat_attributes
habitat_attributes_x_column = Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']]$unacceptable_1_indiv_habitat_attributes
data_frame_with_habitat_attributes = Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']]
data_frame_with_habitat_attributes = Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']]
source(paste(script_path, 'FUNCTIONS_for_Generating_Action_Categories.R', sep=""))
# ----------------------------------------
#    Habitat Quality Pathway
# ----------------------------------------
Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']])
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']])
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']])
# ----------------------------------------
#    Habitat Quality Pathway
# ----------------------------------------
Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']])
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']])
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']])
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']])
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']])
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']])
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']])
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']])
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']])
source(paste(script_path, 'FUNCTIONS_for_Combining_Action_Tables.R', sep=""))
source(paste(script_path, 'FUNCTIONS_for_Combining_Action_Tables.R', sep=""))
# ----------------------- combine within the two pathways -----------------------
Habitat_Quality_Restoration_Unacceptable = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH(1, "restoration")
Habitat_Quality_Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH(3, "restoration")
Habitat_Quality_Protection_Unacceptable = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH(1, "protection")
Habitat_Quality_Protection_Unacceptable_and_At_Risk = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH(3, "protection")
Limiting_Factor_Restoration_Unacceptable = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH(1, "restoration")
Limiting_Factor_Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH(3, "restoration")
Limiting_Factor_Protection_Unacceptable = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH(1, "protection")
Limiting_Factor_Protection_Unacceptable_and_At_Risk = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH(3, "protection")
Restoration_Unaccepable = FUNCTION_combine_across_pathways(Habitat_Quality_Restoration_Unacceptable, Limiting_Factor_Restoration_Unacceptable)
Restoration_Unaccepable_and_At_Risk = FUNCTION_combine_across_pathways(Habitat_Quality_Restoration_Unacceptable_and_At_Risk, Limiting_Factor_Restoration_Unacceptable_and_At_Risk)
# ------------------------- export data ----------------------
output_path_x =  paste(output_path,'Action_Categories_and_Pathways_Restoration_Unaccepable.xlsx', sep="")
write_xlsx(Restoration_Unaccepable,output_path_x )
output_path_x =  paste(output_path,'Action_Categories_and_Pathways_Restoration_Unaccepable_and_At_Risk.xlsx', sep="")
write_xlsx(Restoration_Unaccepable_and_At_Risk,output_path_x )
time1 <- proc.time()[3] # for timing the total time to run the tool
# ---------------------------------------------------------------------------
#
#      Directories of Input and Output data
#
# ---------------------------------------------------------------------------
# --------------- directory of scripts -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
data_path = 'Data/'
# ----------- directory for output ---------
output_path = 'Output/'
# Old location of the reach attribute (NOT Raw) data:  'Y:/UCRTT/Prioritization/Tables for Tools/'
# ---------------------------------------------------------------------------
#
#     Read in Data
#
# ---------------------------------------------------------------------------
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
# ---------------------------------------------------------------------------
#
#      Criteria for Filters
#
# ---------------------------------------------------------------------------
source(paste(script_path, 'Criteria_Script.R', sep=""))
# ---------------------------------------------------------------------------
#
#   Generate Habitat Quality and Habitat Attribute Scores Table
#
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#   Generate Habitat Quality Restoration and Protection Score
# ---------------------------------------------------------------------------
source(paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep=""))
# ---------------------------------------------------------------------------
#   Generate Habitat Attribute Table (used in Limiting Factor Pathway)
# ---------------------------------------------------------------------------
source(paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep=""))
# ONLY if you want to skip this step and read in data that was already generated
#Habitat_Attribute_Scores  = read_excel(  paste(output_path,'Habitat_Attribute_Scores.xlsx', sep="")  )
#cols.num = c("HabitatAttributeScore1" , "HabitatAttributeScore2","HabitatAttributeScore3" , "HabitatAttributeScore4", "Habitat_Attribute_Score")
#Habitat_Attribute_Scores [cols.num] <- sapply(Habitat_Attribute_Scores[cols.num],as.numeric)
# ---------------------------------------------------------------------------
#
#   Generate Priority Reaches and Habitat Attributes
#
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#   Apply Habitat Quality Pathway Filters
#     NOTE: the function below runs HQ Pathway for Restoration and Protectoin
# ---------------------------------------------------------------------------
source(paste(script_path, 'Habitat_Quality_Pathway_Filter.R', sep=""))
basins_to_include = c("Methow",  "Entiat","Wenatchee")
Habitat_Quality_Pathway_Spring_Chinook = Generate_Habitat_Quality_Output_Table("Spring Chinook", basins_to_include )
Habitat_Quality_Pathway_Steelhead = Generate_Habitat_Quality_Output_Table("Steelhead", basins_to_include )
Habitat_Quality_Pathway_Bull_Trout = Generate_Habitat_Quality_Output_Table("Bull Trout", basins_to_include )
#View(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
#View(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']])
# ---------------------------------------------------------------------------
#   Apply Limiting Factor Pathway Filters
#     NOTE: the function below runs HQ Pathway for Restoration and Protection
# ---------------------------------------------------------------------------
#source(paste(script_path, 'Limiting_Factors_Filter.R', sep=""))
source(paste(script_path, 'Limiting_Factor_Pathway_Filter.R', sep=""))
Limiting_Factor_Pathway_Spring_Chinook = Generate_Limiting_Factor_Output_Table("Spring Chinook", basins_to_include)
Limiting_Factor_Pathway_Steelhead = Generate_Limiting_Factor_Output_Table("Steelhead", basins_to_include)
Limiting_Factor_Pathway_Bull_Trout = Generate_Limiting_Factor_Output_Table("Bull Trout", basins_to_include)
#View(Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']])
#View(Limiting_Factor_Bull_Trout[['Limiting_Factor_Pathway_Protection']])
#unique(Limiting_Factor_Bull_Trout[['Limiting_Factor_Pathway_Restoration']]$unacceptable_and_at_risk_1_3_indiv_habitat_attributes)
# ---------------------------------------------------------------------------
#
#   Generate Action Categories
#
# ---------------------------------------------------------------------------
# NOTE: 1) fix action_categories_output so you can add it to any data frame,
#       2) generate outputs for meeting
source(paste(script_path, 'FUNCTIONS_for_Generating_Action_Categories.R', sep=""))
# ----------------------------------------
#    Habitat Quality Pathway
# ----------------------------------------
Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Protection']])
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']])
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Restoration']])
Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Bull_Trout[['Habitat_Quality_Pathway_Protection']])
# ----------------------------------------
#    Limiting Factors Pathway
# ----------------------------------------
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']])
Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Spring_Chinook[['Limiting_Factor_Pathway_Protection']])
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Restoration']])
Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Steelhead[['Limiting_Factor_Pathway_Protection']])
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Restoration']])
Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']]  =  FUNCTION_to_generate_Action_Categories(Limiting_Factor_Pathway_Bull_Trout[['Limiting_Factor_Pathway_Protection']])
# ---------------------------------------------------------------------------
#
#   Combine Action Categories Across Species and Pathways
#
# ---------------------------------------------------------------------------
source(paste(script_path, 'FUNCTIONS_for_Combining_Action_Tables.R', sep=""))
# ----------------------- combine within the two pathways -----------------------
Habitat_Quality_Restoration_Unacceptable = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH(1, "restoration")
Habitat_Quality_Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH(3, "restoration")
Habitat_Quality_Protection_Unacceptable = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH(1, "protection")
Habitat_Quality_Protection_Unacceptable_and_At_Risk = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH(3, "protection")
Limiting_Factor_Restoration_Unacceptable = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH(1, "restoration")
Limiting_Factor_Restoration_Unacceptable_and_At_Risk = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH(3, "restoration")
Limiting_Factor_Protection_Unacceptable = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH(1, "protection")
Limiting_Factor_Protection_Unacceptable_and_At_Risk = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH(3, "protection")
# ----------------------- combine across pathways -----------------------
Restoration_Unaccepable = FUNCTION_combine_across_pathways(Habitat_Quality_Restoration_Unacceptable, Limiting_Factor_Restoration_Unacceptable)
Restoration_Unaccepable_and_At_Risk = FUNCTION_combine_across_pathways(Habitat_Quality_Restoration_Unacceptable_and_At_Risk, Limiting_Factor_Restoration_Unacceptable_and_At_Risk)
# ------------------------- export data ----------------------
output_path_x =  paste(output_path,'Action_Categories_and_Pathways_Restoration_Unaccepable.xlsx', sep="")
write_xlsx(Restoration_Unaccepable,output_path_x )
output_path_x =  paste(output_path,'Action_Categories_and_Pathways_Restoration_Unaccepable_and_At_Risk.xlsx', sep="")
write_xlsx(Restoration_Unaccepable_and_At_Risk,output_path_x )
print(paste("Time to complete ENTIRE tool: ", paste(round((proc.time()[3] - time1)/60, 2), " minutes")    ))
library(sp)
library(raster)
library(rgdal)
library(mapview)
library(leafsync)
library(RColorBrewer)
# ---------------------- reaches data ------------
reaches_path = "C:/Users/Ryan/Documents/GitHub/Prioritization_Step2_Data_R_Project/Data/Reaches/Reaches.shp"
reaches <- sf::st_read(reaches_path) # this shapefile does not show up properly
reaches <- sf::st_transform(reaches, 4326)
# ------------------- combine with Habitat Quality Scores data -----------
Habitat_Quality_Scores_factors = Habitat_Quality_Scores
Habitat_Quality_Scores_factors$Spring.Chinook.Reach = as.factor( Habitat_Quality_Scores_factors$Spring.Chinook.Reach )
Habitat_Quality_Scores_factors$Steelhead.Reach = as.factor( Habitat_Quality_Scores_factors$Steelhead.Reach )
Habitat_Quality_Scores_factors$Bull.Trout.Reach = as.factor( Habitat_Quality_Scores_factors$Bull.Trout.Reach )
Habitat_Quality_Scores_factors$BankStability_score = as.factor( Habitat_Quality_Scores_factors$BankStability_score )
Habitat_Quality_Scores_factors$ChannelStability_score = as.factor( Habitat_Quality_Scores_factors$ChannelStability_score )
Habitat_Quality_Scores_factors$Stability_Mean = as.factor( Habitat_Quality_Scores_factors$Stability_Mean )
Habitat_Quality_Scores_factors$CoarseSubstrate_score = as.factor( Habitat_Quality_Scores_factors$CoarseSubstrate_score )
Habitat_Quality_Scores_factors$`Cover-Wood_score` = as.factor( Habitat_Quality_Scores_factors$`Cover-Wood_score` )
Habitat_Quality_Scores_factors$`Flow-SummerBaseFlow_score` = as.factor( Habitat_Quality_Scores_factors$`Flow-SummerBaseFlow_score` )
Habitat_Quality_Scores_factors$`Off-Channel-Floodplain_score` = as.factor( Habitat_Quality_Scores_factors$`Off-Channel-Floodplain_score` )
Habitat_Quality_Scores_factors$`Off-Channel-Side-Channels_score` = as.factor( Habitat_Quality_Scores_factors$`Off-Channel-Side-Channels_score` )
Habitat_Quality_Scores_factors$`PoolQuantity&Quality_score` = as.factor( Habitat_Quality_Scores_factors$`PoolQuantity&Quality_score` )
Habitat_Quality_Scores_factors$`Riparian-Disturbance_score` = as.factor( Habitat_Quality_Scores_factors$`Riparian-Disturbance_score` )
Habitat_Quality_Scores_factors$`Riparian-CanopyCover_score` = as.factor( Habitat_Quality_Scores_factors$`Riparian-CanopyCover_score` )
Habitat_Quality_Scores_factors$Riparian_Mean = as.factor( Habitat_Quality_Scores_factors$Riparian_Mean )
Habitat_Quality_Scores_factors$`Temperature-Rearing_score` = as.factor( Habitat_Quality_Scores_factors$`Temperature-Rearing_score` )
Habitat_Quality_Scores_factors$HQ_Score_Restoration = as.factor( Habitat_Quality_Scores_factors$HQ_Score_Restoration )
Habitat_Quality_Scores_factors$HQ_Score_Protection = as.factor( Habitat_Quality_Scores_factors$HQ_Score_Protection )
# -------- merge reach spatial data with habitat data --------------
reaches_data = merge(reaches, Habitat_Quality_Scores_factors, by = "ReachName")
# ------- remove columns we don't want ------
reaches_data = subset (reaches_data, select = -c(Assessment,RM_Start,RM_End, SpringChin, SteelheadR,BullTroutR,
Length_mi,Length_m,Basin.y))
# ---------------------- color palettes for display --------------
color_palette_x = c("red", "yellow","forestgreen")
color_palette_continuous = brewer.pal(9, 'YlGnBu')
color_palette_x_YES_NO = brewer.pal(3, 'BuPu')
color_palette_x_YES_NO = c("#6C0586", "#FBFF68")
# THIS prints all the attributes you can map
print(names(reaches_data))
# -------------------- Print a score or other factor variable --------------------
# ENTER the attribute to print here
attribute_1 = "Riparian-CanopyCover_score"
# --- simple version ---:
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
# --- version where you can turn 1, 3, 5 on and off ---:
mapview(reaches_data, zcol = attribute_1,   burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
# THIS prints all the attributes you can map
print(names(reaches_data))
attribute_1 = "Cover-Wood_score"
# --- version where you can turn 1, 3, 5 on and off ---:
mapview(reaches_data, zcol = attribute_1,   burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
# --------------- plot continuous variable -----
# ENTER the attribute to print here
attribute_1 = "HQ_Pct"
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"),
color= color_palette_continuous, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
# --- simple version ---:
attribute_1 = "HQ_Score_Restoration"
attribute_2 = "HQ_Score_Protection"
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap")) +
mapview(reaches_data, zcol = attribute_2, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x)
attribute_1 = "HQ_Score_Restoration"
# --------------- CHOOSE the four attributres to plot ----------
attribute_1 = "HQ_Score_Restoration"
attribute_2 = "HQ_Score_Protection"
attribute_3 = "Spring.Chinook.Reach"
attribute_4 = "Steelhead.Reach"
m1 <- mapview(reaches_data, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_data, zcol = attribute_2,  lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m3 <- mapview(reaches_data, zcol = attribute_3, burst = TRUE, color = color_palette_x_YES_NO, legend=TRUE,
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m4 <- mapview(reaches_data, zcol = attribute_4, burst = TRUE, color = color_palette_x_YES_NO,
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
# -------- orientation of map tiles ------
print( paste(attribute_1,attribute_2, sep="     "))
print( paste(attribute_3,attribute_4, sep="     "))
sync(m1, m2, m3, m4) # 4 panels synchronised
# --------------- CHOOSE the four attributres to plot ----------
attribute_1 = "CoarseSubstrate_score"
attribute_2 = "Cover-Wood_score"
attribute_3 = "PoolQuantity&Quality_score"
attribute_4 = "Off-Channel-Floodplain_score"
m1 <- mapview(reaches_data, zcol = attribute_1,  legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"),
popup = popupTable(reaches_b2, zcol = c("ReachName","Basin.x","Assessment.Unit")))
m2 <- mapview(reaches_data, zcol = attribute_2,   legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"),
popup = popupTable(reaches_b2, zcol = c("ReachName","Basin.x","Assessment.Unit")))
m3 <- mapview(reaches_data, zcol = attribute_3,  legend=TRUE,
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"),
popup = popupTable(reaches_b2, zcol = c("ReachName","Basin.x","Assessment.Unit")))
m4 <- mapview(reaches_data, zcol = attribute_4,
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"),
popup = popupTable(reaches_b2, zcol = c("ReachName","Basin.x","Assessment.Unit")))
library(leafsync)
library(RColorBrewer)
library(mapview)
# --------------- CHOOSE the four attributres to plot ----------
attribute_1 = "CoarseSubstrate_score"
attribute_2 = "Cover-Wood_score"
attribute_3 = "PoolQuantity&Quality_score"
attribute_4 = "Off-Channel-Floodplain_score"
m1 <- mapview(reaches_data, zcol = attribute_1,  legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"),
popup = popupTable(reaches_b2, zcol = c("ReachName","Basin.x","Assessment.Unit")))
library(leafpop)
m1 <- mapview(reaches_data, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_data, zcol = attribute_2,  lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m3 <- mapview(reaches_data, zcol = attribute_3, burst = TRUE, color = color_palette_x_YES_NO, legend=TRUE,
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m4 <- mapview(reaches_data, zcol = attribute_4, burst = TRUE, color = color_palette_x_YES_NO,
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
# -------- orientation of map tiles ------
print( paste(attribute_1,attribute_2, sep="     "))
print( paste(attribute_3,attribute_4, sep="     "))
sync(m1, m2, m3, m4) # 4 panels synchronised
# --------------- CHOOSE the four attributres to plot ----------
attribute_1 = "CoarseSubstrate_score"
attribute_2 = "Cover-Wood_score"
attribute_3 = "PoolQuantity&Quality_score"
attribute_4 = "Off-Channel-Floodplain_score"
m1 <- mapview(reaches_data, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_data, zcol = attribute_2,  lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m3 <- mapview(reaches_data, zcol = attribute_3, burst = TRUE,  legend=TRUE,
color = color_palette_x,  map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m4 <- mapview(reaches_data, zcol = attribute_4,  burst='STUSPS',
color = color_palette_x,  map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
sync(m1, m2, m3, l4) # 4 panels synchronised
m1 <- mapview(reaches_data, zcol = attribute_1,  legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"),
popup = popupTable(reaches_b2, zcol = c("ReachName","Basin.x","Assessment.Unit")))
m2 <- mapview(reaches_data, zcol = attribute_2,   legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"),
popup = popupTable(reaches_b2, zcol = c("ReachName","Basin.x","Assessment.Unit")))
m3 <- mapview(reaches_data, zcol = attribute_3,  legend=TRUE,
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"),
popup = popupTable(reaches_b2, zcol = c("ReachName","Basin.x","Assessment.Unit")))
m4 <- mapview(reaches_data, zcol = attribute_4,
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"),
popup = popupTable(reaches_b2, zcol = c("ReachName","Basin.x","Assessment.Unit")))
# -------- orientation of map tiles ------
print( paste(attribute_1,attribute_2, sep="     "))
print( paste(attribute_3,attribute_4, sep="     "))
sync(m1, m2, m3, m4) # 4 panels synchronised
# --------------- CHOOSE the four attributres to plot ----------
attribute_1 = "CoarseSubstrate_score"
attribute_2 = "Cover-Wood_score"
attribute_3 = "PoolQuantity&Quality_score"
attribute_4 = "Off-Channel-Floodplain_score"
m1 <- mapview(reaches_data, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_data, zcol = attribute_2,  lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m3 <- mapview(reaches_data, zcol = attribute_3, burst = TRUE,  legend=TRUE,
color = color_palette_x,  map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m4 <- mapview(reaches_data, zcol = attribute_4,  burst='STUSPS',
color = color_palette_x,  map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
sync(m1, m2, m3, m4) # 4 panels synchronised
dim(Habitat_Quality_Pathway_Spring_Chinook)
names(Habitat_Quality_Pathway_Spring_Chinook)
dim(Restoration_Unaccepable)
dim(Restoration_Unaccepable_and_At_Risk)
dim(Limiting_Factor_Restoration_Unacceptable)
head(Limiting_Factor_Restoration_Unacceptable)
colnames(Limiting_Factor_Restoration_Unacceptable)
dim(Habitat_Quality_Protection_Unacceptable)
Habitat_Quality_Protection_Unacceptable
Habitat_Quality_Protection_Unacceptable = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH(1, "protection")
Habitat_Quality_Protection_Unacceptable_and_At_Risk = FUNCTION_combine_Habitat_Quality_Action_Categories_PER_REACH(3, "protection")
Limiting_Factor_Protection_Unacceptable
Limiting_Factor_Protection_Unacceptable = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH(1, "protection")
Limiting_Factor_Protection_Unacceptable_and_At_Risk = FUNCTION_combine_Limiting_Factor_Action_Categories_PER_REACH(3, "protection")
Limiting_Factor_Protection_Unacceptable_and_At_Risk
dim(Limiting_Factor_Protection_Unacceptable_and_At_Risk)
head(Limiting_Factor_Protection_Unacceptable_and_At_Risk)
# ----------------------------------------
#    Habitat Quality Pathway
# ----------------------------------------
Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']]  =  FUNCTION_to_generate_Action_Categories(Habitat_Quality_Pathway_Spring_Chinook[['Habitat_Quality_Pathway_Restoration']])
time1 <- proc.time()[3] # for timing the total time to run the tool
# --------------- directory of scripts -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
data_path = 'Data/'
# ----------- directory for output ---------
output_path = 'Output/'
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
library(tidyverse)
library(xlsx)
library(writexl)
library(readxl)
time1 <- proc.time()[3] # for timing the total time to run the tool
# --------------- directory of scripts -----------
script_path = 'Scripts/'
# ----------- directory of data -------------------
data_path = 'Data/'
# ----------- directory for output ---------
output_path = 'Output/'
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
source(paste(script_path, 'Criteria_Script.R', sep=""))
source(paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep=""))
source(paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep=""))
source(paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep=""))
