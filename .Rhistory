DataGap,Length_mi,Length_m,Basin.y))
m1
m1
reaches_b2
m1 <- mapview(reaches_b2, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
# ENTER the attribute to print here
attribute_1 = "Riparian-CanopyCover_score"
mapview(reaches_b2, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
mapview(reaches_b2)
mapview(reaches_b)
# ---------------------- reaches data ------------
reaches_i = readOGR(dsn = "C:/Users/Ryan/Documents/GitHub/Prioritization_Step2_Data_R_Project/Data/Reaches")
# ---------------------- reaches data ------------
reaches_i = readOGR(dsn = "C:/Users/Ryan/Documents/GitHub/Prioritization_Step2_Data_R_Project/Data/Reaches")
reaches <- spTransform(reaches_i, CRS("+proj=longlat +datum=WGS84 +no_defs"))
reaches_b <- shapefile("Y:/Ryan/2_Habitat_Prioritization/Misc/Reaches_-_Updated_-_June_11/Reaches.shp") %>%
sf::st_transform('+proj=longlat +datum=WGS84')
# ---------------------- reaches data ------------
reaches_b = readOGR(dsn = "C:/Users/Ryan/Documents/GitHub/Prioritization_Step2_Data_R_Project/Data/Reaches/Reaches.shp")
reaches_b <- sf::st_transform(reaches_b, 4326)
reaches_b <- sf::st_read("Y:/Ryan/2_Habitat_Prioritization/Misc/Reaches_-_Updated_-_June_11/Reaches.shp") # this shapefile does not show up properly
# ---------------------- reaches data ------------
reaches_b = readOGR(dsn = "C:/Users/Ryan/Documents/GitHub/Prioritization_Step2_Data_R_Project/Data/Reaches/Reaches.shp")
# ---------------------- reaches data ------------
reaches_i = readOGR(dsn = "C:/Users/Ryan/Documents/GitHub/Prioritization_Step2_Data_R_Project/Data/Reaches/Reaches.shp")
reaches_path = "C:/Users/Ryan/Documents/GitHub/Prioritization_Step2_Data_R_Project/Data/Reaches/Reaches.shp"
reaches_b <- sf::st_read(reaches_path) # this shapefile does not show up properly
reaches_b <- sf::st_transform(reaches_b, 4326)
mapview(reaches_b)
# ---------------------- reaches data ------------
reaches_path = "C:/Users/Ryan/Documents/GitHub/Prioritization_Step2_Data_R_Project/Data/Reaches/Reaches.shp"
reaches <- sf::st_read(reaches_path) # this shapefile does not show up properly
reaches <- sf::st_transform(reaches, 4326)
# ------------------- combine with Habitat Quality Scores data -----------
reaches_data = merge(reaches, Habitat_Quality_Scores, by = "ReachName")
# ------- remove columns we don't want ------
reaches_data = subset (reaches_data, select = -c(Assessment,SpringChin, SteelheadR,BullTroutR,
ReviewComm,ReachAsses, Level2Data,Level2Da_1,Level2Date,
DataGap,Length_mi,Length_m,Basin.y))
names(reaches_data)
head(reaches_data)
names(reaches_data)[:]
names(reaches_data)[1:20]
names(reaches_data)[
]
# ------- remove columns we don't want ------
reaches_data = subset (reaches_data, select = -c(Assessment,RM_Start,RM_End, SpringChin, SteelheadR,BullTroutR,
Length_mi,Length_m,Basin.y))
# ---------------------- color palettes for display --------------
color_palette_x = c("red", "yellow","yellow","forestgreen")
color_palette_x_YES_NO = brewer.pal(3, 'BuPu')
color_palette_x_YES_NO = c("#6C0586", "#FBFF68")
mapview(reaches_data, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
attribute_1 = "HQ_Pct"
attribute_1 = "HQ_Pct"
mapview(reaches_data, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
mapview(reaches_data, zcol = attribute_1, lwd=5, legend = mapviewGetOption("legend"),
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
mapview(reaches_data, zcol = attribute_1, lwd=3, legend = mapviewGetOption("legend"),
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
mapview(reaches_data, zcol = attribute_1, lwd=3, legend = mapviewGetOption("legend"),
color= YlGnBu(9), map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
YlGnBu(9)
color_palette_continuous = brewer.pal(9, 'YlGnBu')
mapview(reaches_data, zcol = attribute_1, lwd=3, legend = mapviewGetOption("legend"),
color= color_palette_continuous, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
color_palette_continuous = brewer.pal(9, 'Spectral')
mapview(reaches_data, zcol = attribute_1, lwd=3, legend = mapviewGetOption("legend"),
color= color_palette_continuous, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
color_palette_continuous = brewer.pal(9, 'RdBu')
mapview(reaches_data, zcol = attribute_1, lwd=3, legend = mapviewGetOption("legend"),
color= color_palette_continuous, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"),
color= color_palette_continuous, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
color_palette_continuous = brewer.pal(9, 'YlGnBu')
attribute_1 = "HQ_Pct"
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"),
color= color_palette_continuous, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"),
color= color_palette_continuous, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery"))
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"),
color= color_palette_continuous)
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"),
color= color_palette_continuous, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
names(reaches_data)
attribute_1 = "CoarseSubstrate_score"
attribute_2 = "Cover-Wood_score"
attribute_3 = "PoolQuantity&Quality_score"
attribute_4 = "Off-Channel-Floodplain_score"
m1 <- mapview(reaches_b2, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_b2, zcol = attribute_2,  lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m3 <- mapview(reaches_b2, zcol = attribute_3, burst = TRUE, color = color_palette_x_YES_NO, legend=TRUE,
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m4 <- mapview(reaches_b2, zcol = attribute_4, burst = TRUE, color = color_palette_x_YES_NO,
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
# -------- orientation of map tiles ------
print( paste(attribute_1,attribute_2, sep="     "))
print( paste(attribute_3,attribute_4, sep="     "))
sync(m1, m2, m3, m4) # 4 panels synchronised
m1 <- mapview(reaches_b2, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_b2, zcol = attribute_2,  lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m3 <- mapview(reaches_b2, zcol = attribute_3, burst = TRUE, color = color_palette_x_YES_NO, legend=TRUE,
color = color_palette_x,  map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m4 <- mapview(reaches_b2, zcol = attribute_4, burst = TRUE, color = color_palette_x_YES_NO,
color = color_palette_x,  map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
sync(m1, m2, m3, m4) # 4 panels synchronised
# -------- orientation of map tiles ------
print( paste(attribute_1,attribute_2, sep="     "))
print( paste(attribute_3,attribute_4, sep="     "))
m1 <- mapview(reaches_b2, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_b2, zcol = attribute_2,  lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m1 <- mapview(reaches_b2, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_b2, zcol = attribute_2,  lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m3 <- mapview(reaches_b2, zcol = attribute_3, burst = TRUE,  legend=TRUE,
color = color_palette_x,  map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m4 <- mapview(reaches_b2, zcol = attribute_4, burst = TRUE,
color = color_palette_x,  map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
m1 <- mapview(reaches_b2, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_b2, zcol = attribute_2,  lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m3 <- mapview(reaches_b2, zcol = attribute_3, burst = TRUE,  legend=TRUE,
color = color_palette_x,  map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m4 <- mapview(reaches_b2, zcol = attribute_4, burst = TRUE,
color = color_palette_x,  map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
sync(m1, m2, m3, m4) # 4 panels synchronised
attribute_1 = "CoarseSubstrate_score"
attribute_2 = "Cover-Wood_score"
attribute_3 = "PoolQuantity&Quality_score"
attribute_4 = "Off-Channel-Floodplain_score"
# -------- orientation of map tiles ------
print( paste(attribute_1,attribute_2, sep="     "))
print( paste(attribute_3,attribute_4, sep="     "))
m4 <- mapview(reaches_b2, zcol = attribute_4,  burst='STUSPS',
color = color_palette_x,  map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
m4
mapview(reaches_data, zcol=attribute_4)
mapview(reaches_data, zcol=attribute_4, burst = "STUSPS")
mapview(states, zcol='water_km2', burst='STUSPS')
# ENTER the attribute to print here
attribute_1 = "Riparian-CanopyCover_score"
mapview(reaches_data, zcol = attribute_1,   burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
attribute_1 = "HQ_Pct"
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"),
color= color_palette_continuous, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
attribute_1 = "Riparian-CanopyCover_score"
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"),
color= color_palette_continuous, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_continuous, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
sessionInfo()
class(reaches_data$CoarseSubstrate_score)
reaches_data$Riparian-CanopyCover_score = as.factor(reaches_data$Riparian-CanopyCover_score)
reaches_data$'Riparian-CanopyCover_score' = as.factor(reaches_data$'Riparian-CanopyCover_score')
attribute_1 = "Riparian-CanopyCover_score"
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_continuous, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
color_palette_x
attribute_1 = "Riparian-CanopyCover_score"
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
# ---------------------- color palettes for display --------------
color_palette_x = c("red", "yellow","forestgreen")
attribute_1 = "Riparian-CanopyCover_score"
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
attribute_1 = "Riparian-CanopyCover_score"
mapview(reaches_data, zcol = attribute_1,   burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
# --- simple version ---:
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
# --- version where you can turn 1, 3, 5 on and off ---:
mapview(reaches_data, zcol = attribute_1,   burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
# --- simple version ---:
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
# --- version where you can turn 1, 3, 5 on and off ---:
mapview(reaches_data, zcol = attribute_1,   burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
names(reaches_data)
# ------------------- convert scores to factors -----------
factor_vars= c("Spring.Chinook.Reach", "Steelhead.Reach", "Bull.Trout.Reach", "BankStability_score" , "ChannelStability_score" ,
"Stability_Mean" ,  "CoarseSubstrate_score","Cover-Wood_score","Flow-SummerBaseFlow_score"  ,
"Off-Channel-Floodplain_score","Off-Channel-Side-Channels_score", "PoolQuantity&Quality_score" ,
"Riparian-Disturbance_score","Riparian-CanopyCover_score" ,"Riparian_Mean" ,
"Temperature-Rearing_score","HQ_Sum","HQ_Pct", "HQ_Score_Restoration", "HQ_Score_Protection")
unique(reaches_data$Riparian_Mean)
# ------------------- convert scores to factors -----------
factor_vars= c("Spring.Chinook.Reach", "Steelhead.Reach", "Bull.Trout.Reach", "BankStability_score" , "ChannelStability_score" ,
"Stability_Mean" ,  "CoarseSubstrate_score","Cover-Wood_score","Flow-SummerBaseFlow_score"  ,
"Off-Channel-Floodplain_score","Off-Channel-Side-Channels_score", "PoolQuantity&Quality_score" ,
"Riparian-Disturbance_score","Riparian-CanopyCover_score" ,"Riparian_Mean" ,
"Temperature-Rearing_score", "HQ_Score_Restoration", "HQ_Score_Protection")
for(factor_x in factor_vars){ reaches_data$factor_x = as.factor(reaches_data$factor_x) }
factor_x
reaches_data$factor_x
factor_x
reaches_data[,factor_x]
for(factor_x in factor_vars){ reaches_data[, factor_x] = as.factor(reaches_data[, factor_x]) }
factor_x
reaches_data[, factor_x]
reaches_data[, factor_x][1]
# ------------------- convert scores to factors -----------
factor_vars= c("Spring.Chinook.Reach", "Steelhead.Reach", "Bull.Trout.Reach", "BankStability_score" , "ChannelStability_score" ,
"Stability_Mean" ,  "CoarseSubstrate_score","Cover-Wood_score","Flow-SummerBaseFlow_score"  ,
"Off-Channel-Floodplain_score","Off-Channel-Side-Channels_score", "PoolQuantity&Quality_score" ,
"Riparian-Disturbance_score","Riparian-CanopyCover_score" ,"Riparian_Mean" ,
"Temperature-Rearing_score", "HQ_Score_Restoration", "HQ_Score_Protection")
for(factor_x in factor_vars){ Habitat_Quality_Scores_factors[, factor_x] = as.factor(Habitat_Quality_Scores_factors[, factor_x][1]) }
# ------------------- combine with Habitat Quality Scores data -----------
Habitat_Quality_Scores_factors = Habitat_Quality_Scores
# ------------------- convert scores to factors -----------
factor_vars= c("Spring.Chinook.Reach", "Steelhead.Reach", "Bull.Trout.Reach", "BankStability_score" , "ChannelStability_score" ,
"Stability_Mean" ,  "CoarseSubstrate_score","Cover-Wood_score","Flow-SummerBaseFlow_score"  ,
"Off-Channel-Floodplain_score","Off-Channel-Side-Channels_score", "PoolQuantity&Quality_score" ,
"Riparian-Disturbance_score","Riparian-CanopyCover_score" ,"Riparian_Mean" ,
"Temperature-Rearing_score", "HQ_Score_Restoration", "HQ_Score_Protection")
for(factor_x in factor_vars){ Habitat_Quality_Scores_factors[, factor_x] = as.factor(Habitat_Quality_Scores_factors[, factor_x][1]) }
reaches_data = merge(reaches, Habitat_Quality_Scores_factors, by = "ReachName")
# ------- remove columns we don't want ------
reaches_data = subset (reaches_data, select = -c(Assessment,RM_Start,RM_End, SpringChin, SteelheadR,BullTroutR,
Length_mi,Length_m,Basin.y))
names(reaches_data)
mapview(reaches_data, zcol = list(attribute_1, attribute_2), lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
mapview(list(reaches_data$attribute_1, reaches_data$attribute_2),  lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
# --- simple version ---:
attribute_1 = "Riparian-CanopyCover_score"
attribute_2 = "Cover-Wood_score"
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap")) +
mapview(reaches_data, zcol = attribute_2, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x)
attribute_1 = "HQ_Score_Restoration"
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
reaches_data$`Riparian-CanopyCover_score`
Habitat_Quality_Scores_factors$`Riparian-CanopyCover_score`
# ------------------- combine with Habitat Quality Scores data -----------
Habitat_Quality_Scores_factors = Habitat_Quality_Scores
# ------------------- convert scores to factors -----------
factor_vars= c("Spring.Chinook.Reach", "Steelhead.Reach", "Bull.Trout.Reach", "BankStability_score" , "ChannelStability_score" ,
"Stability_Mean" ,  "CoarseSubstrate_score","Cover-Wood_score","Flow-SummerBaseFlow_score"  ,
"Off-Channel-Floodplain_score","Off-Channel-Side-Channels_score", "PoolQuantity&Quality_score" ,
"Riparian-Disturbance_score","Riparian-CanopyCover_score" ,"Riparian_Mean" ,
"Temperature-Rearing_score", "HQ_Score_Restoration", "HQ_Score_Protection")
Habitat_Quality_Scores_factors$`Riparian-CanopyCover_score`
for(factor_x in factor_vars){ Habitat_Quality_Scores_factors[, factor_x] = as.factor(Habitat_Quality_Scores_factors[, factor_x]) }
Habitat_Quality_Scores_factors$`Riparian-CanopyCover_score`
unique(Habitat_Quality_Scores_factors$`Riparian-CanopyCover_score`)
# ------------------- combine with Habitat Quality Scores data -----------
Habitat_Quality_Scores_factors = Habitat_Quality_Scores
# ------------------- convert scores to factors -----------
factor_vars= c("Spring.Chinook.Reach", "Steelhead.Reach", "Bull.Trout.Reach", "BankStability_score" , "ChannelStability_score" ,
"Stability_Mean" ,  "CoarseSubstrate_score","Cover-Wood_score","Flow-SummerBaseFlow_score"  ,
"Off-Channel-Floodplain_score","Off-Channel-Side-Channels_score", "PoolQuantity&Quality_score" ,
"Riparian-Disturbance_score","Riparian-CanopyCover_score" ,"Riparian_Mean" ,
"Temperature-Rearing_score", "HQ_Score_Restoration", "HQ_Score_Protection")
class(Habitat_Quality_Scores_factors$`Riparian-CanopyCover_score`)
unique(Habitat_Quality_Scores_factors$`Riparian-CanopyCover_score`)
Habitat_Quality_Scores_factors$`Riparian-CanopyCover_score` = as.factor(Habitat_Quality_Scores_factors$`Riparian-CanopyCover_score`)
unique(Habitat_Quality_Scores_factors$`Riparian-CanopyCover_score`)
# ------------------- combine with Habitat Quality Scores data -----------
Habitat_Quality_Scores_factors = Habitat_Quality_Scores
# ------------------- convert scores to factors -----------
factor_vars= c("Spring.Chinook.Reach", "Steelhead.Reach", "Bull.Trout.Reach", "BankStability_score" , "ChannelStability_score" ,
"Stability_Mean" ,  "CoarseSubstrate_score","Cover-Wood_score","Flow-SummerBaseFlow_score"  ,
"Off-Channel-Floodplain_score","Off-Channel-Side-Channels_score", "PoolQuantity&Quality_score" ,
"Riparian-Disturbance_score","Riparian-CanopyCover_score" ,"Riparian_Mean" ,
"Temperature-Rearing_score", "HQ_Score_Restoration", "HQ_Score_Protection")
for(factor_x in factor_vars){
Habitat_Quality_Scores_factors$factor_x = as.factor( asHabitat_Quality_Scores_factors$factor_x) }
Habitat_Quality_Scores_factors$factor_x = as.factor( Habitat_Quality_Scores_factors$factor_x) }
# ------------------- combine with Habitat Quality Scores data -----------
Habitat_Quality_Scores_factors = Habitat_Quality_Scores
# ------------------- convert scores to factors -----------
factor_vars= c("Spring.Chinook.Reach", "Steelhead.Reach", "Bull.Trout.Reach", "BankStability_score" , "ChannelStability_score" ,
"Stability_Mean" ,  "CoarseSubstrate_score","Cover-Wood_score","Flow-SummerBaseFlow_score"  ,
"Off-Channel-Floodplain_score","Off-Channel-Side-Channels_score", "PoolQuantity&Quality_score" ,
"Riparian-Disturbance_score","Riparian-CanopyCover_score" ,"Riparian_Mean" ,
"Temperature-Rearing_score", "HQ_Score_Restoration", "HQ_Score_Protection")
for(factor_x in factor_vars){
Habitat_Quality_Scores_factors$factor_x = as.factor( Habitat_Quality_Scores_factors$factor_x) }
factor_x
# ------------------- combine with Habitat Quality Scores data -----------
Habitat_Quality_Scores_factors = Habitat_Quality_Scores
# ------------------- convert scores to factors -----------
factor_vars= c("Spring.Chinook.Reach", "Steelhead.Reach", "Bull.Trout.Reach", "BankStability_score" , "ChannelStability_score" ,
"Stability_Mean" ,  "CoarseSubstrate_score","Cover-Wood_score","Flow-SummerBaseFlow_score"  ,
"Off-Channel-Floodplain_score","Off-Channel-Side-Channels_score", "PoolQuantity&Quality_score" ,
"Riparian-Disturbance_score","Riparian-CanopyCover_score" ,"Riparian_Mean" ,
"Temperature-Rearing_score", "HQ_Score_Restoration", "HQ_Score_Protection")
Habitat_Quality_Scores_factors[1:20,factor_x
]
Habitat_Quality_Scores_factors[1:20,factor_x}
Habitat_Quality_Scores_factors[1:20,factor_x}
Habitat_Quality_Scores_factors[1:20,factor_x]
as.factor(Habitat_Quality_Scores_factors[1:20,factor_x])
# ------------------- combine with Habitat Quality Scores data -----------
Habitat_Quality_Scores_factors = Habitat_Quality_Scores
factor_vars= c( "BankStability_score" , "ChannelStability_score" ,
"Stability_Mean" ,  "CoarseSubstrate_score","Cover-Wood_score","Flow-SummerBaseFlow_score"  ,
"Off-Channel-Floodplain_score","Off-Channel-Side-Channels_score", "PoolQuantity&Quality_score" ,
"Riparian-Disturbance_score","Riparian-CanopyCover_score" ,"Riparian_Mean" ,
"Temperature-Rearing_score", "HQ_Score_Restoration", "HQ_Score_Protection")
for(factor_x in factor_vars){
Habitat_Quality_Scores_factors[,factor_x] = as.factor( Habitat_Quality_Scores_factors$factor_x) }
for(factor_x in factor_vars){
Habitat_Quality_Scores_factors[,factor_x] = as.factor( Habitat_Quality_Scores_factors[,factor_x]) }
factor_x
Habitat_Quality_Scores_factors[1:20,factor_x}
Habitat_Quality_Scores_factors[1:20,factor_x]
# ------------------- combine with Habitat Quality Scores data -----------
Habitat_Quality_Scores_factors = Habitat_Quality_Scores
Habitat_Quality_Scores_factors[1:20,factor_x]
Habitat_Quality_Scores_factors$HQ_Score_Protection = as.factor( Habitat_Quality_Scores_factors$HQ_Score_Protection )
Habitat_Quality_Scores_factors[1:20,factor_x]
Habitat_Quality_Scores_factors[1:20,"Steelhead.Reach"]
as.factor(Habitat_Quality_Scores_factors[1:20,"Steelhead.Reach"])
as.factor(Habitat_Quality_Scores_factors$Steelhead.Reach)
unique(Habitat_Quality_Scores$Stability_Mean)
factor_vars= c( "BankStability_score" , "ChannelStability_score" ,
"Stability_Mean" ,  "CoarseSubstrate_score","Cover-Wood_score","Flow-SummerBaseFlow_score"  ,
"Off-Channel-Floodplain_score","Off-Channel-Side-Channels_score", "PoolQuantity&Quality_score" ,
"Riparian-Disturbance_score","Riparian-CanopyCover_score" ,"Riparian_Mean" ,
"Temperature-Rearing_score", "HQ_Score_Restoration", "HQ_Score_Protection")
length(factor_vars)
Habitat_Quality_Scores_factors$Spring.Chinook.Reach = as.factor( Habitat_Quality_Scores_factors$Spring.Chinook.Reach )
# ------------------- combine with Habitat Quality Scores data -----------
Habitat_Quality_Scores_factors = Habitat_Quality_Scores
Habitat_Quality_Scores_factors$Spring.Chinook.Reach = as.factor( Habitat_Quality_Scores_factors$Spring.Chinook.Reach )
Habitat_Quality_Scores_factors$Steelhead.Reach = as.factor( Habitat_Quality_Scores_factors$Steelhead.Reach )
Habitat_Quality_Scores_factors$Bull.Trout.Reach = as.factor( Habitat_Quality_Scores_factors$Bull.Trout.Reach )
Habitat_Quality_Scores_factors$BankStability_score = as.factor( Habitat_Quality_Scores_factors$BankStability_score )
Habitat_Quality_Scores_factors$ChannelStability_score = as.factor( Habitat_Quality_Scores_factors$ChannelStability_score )
Habitat_Quality_Scores_factors$Stability_Mean = as.factor( Habitat_Quality_Scores_factors$Stability_Mean )
Habitat_Quality_Scores_factors$CoarseSubstrate_score = as.factor( Habitat_Quality_Scores_factors$CoarseSubstrate_score )
Habitat_Quality_Scores_factors$`Cover-Wood_score` = as.factor( Habitat_Quality_Scores_factors$`Cover-Wood_score` )
Habitat_Quality_Scores_factors$`Flow-SummerBaseFlow_score` = as.factor( Habitat_Quality_Scores_factors$`Flow-SummerBaseFlow_score` )
Habitat_Quality_Scores_factors$`Off-Channel-Floodplain_score` = as.factor( Habitat_Quality_Scores_factors$`Off-Channel-Floodplain_score` )
Habitat_Quality_Scores_factors$`Off-Channel-Side-Channels_score` = as.factor( Habitat_Quality_Scores_factors$`Off-Channel-Side-Channels_score` )
Habitat_Quality_Scores_factors$`PoolQuantity&Quality_score` = as.factor( Habitat_Quality_Scores_factors$`PoolQuantity&Quality_score` )
Habitat_Quality_Scores_factors$`Riparian-Disturbance_score` = as.factor( Habitat_Quality_Scores_factors$`Riparian-Disturbance_score` )
Habitat_Quality_Scores_factors$`Riparian-CanopyCover_score` = as.factor( Habitat_Quality_Scores_factors$`Riparian-CanopyCover_score` )
Habitat_Quality_Scores_factors$Riparian_Mean = as.factor( Habitat_Quality_Scores_factors$Riparian_Mean )
Habitat_Quality_Scores_factors$`Temperature-Rearing_score` = as.factor( Habitat_Quality_Scores_factors$`Temperature-Rearing_score` )
Habitat_Quality_Scores_factors$HQ_Score_Restoration = as.factor( Habitat_Quality_Scores_factors$HQ_Score_Restoration )
Habitat_Quality_Scores_factors$HQ_Score_Protection = as.factor( Habitat_Quality_Scores_factors$HQ_Score_Protection )
reaches_data = merge(reaches, Habitat_Quality_Scores_factors, by = "ReachName")
# ------- remove columns we don't want ------
reaches_data = subset (reaches_data, select = -c(Assessment,RM_Start,RM_End, SpringChin, SteelheadR,BullTroutR,
Length_mi,Length_m,Basin.y))
# ---------------------- color palettes for display --------------
color_palette_x = c("red", "yellow","forestgreen")
color_palette_continuous = brewer.pal(9, 'YlGnBu')
color_palette_x_YES_NO = brewer.pal(3, 'BuPu')
color_palette_x_YES_NO = c("#6C0586", "#FBFF68")
# -------------------- Print a score or other factor variable --------------------
# ENTER the attribute to print here
attribute_1 = "Riparian-CanopyCover_score"
# --- simple version ---:
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
# --- version where you can turn 1, 3, 5 on and off ---:
mapview(reaches_data, zcol = attribute_1,   burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
# --------------- plot continuous variable -----
# ENTER the attribute to print here
attribute_1 = "HQ_Pct"
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"),
color= color_palette_continuous, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap"))
colnames(reaches_data)
# --- simple version ---:
attribute_1 = "HQ_Score_Restoration"
attribute_2 = "HQ_Score_Protection"
mapview(reaches_data, zcol = attribute_1, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x, map.types = c("CartoDB.Positron","CartoDB.DarkMatter",  "Esri.WorldImagery", "OpenStreetMap")) +
mapview(reaches_data, zcol = attribute_2, lwd=4, legend = mapviewGetOption("legend"), na.color='grey',
color= color_palette_x)
attribute_1 = "HQ_Score_Restoration"
attribute_1 = "HQ_Score_Restoration"
attribute_2 = "HQ_Score_Protection"
attribute_3 = "Spring.Chinook.Reach"
attribute_4 = "Steelhead.Reach"
attribute_1 = "HQ_Score_Restoration"
attribute_2 = "HQ_Score_Protection"
attribute_3 = "Spring.Chinook.Reach"
attribute_4 = "Steelhead.Reach"
m1 <- mapview(reaches_b2, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_b2, zcol = attribute_2,  lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m3 <- mapview(reaches_b2, zcol = attribute_3, burst = TRUE, color = color_palette_x_YES_NO, legend=TRUE,
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m4 <- mapview(reaches_b2, zcol = attribute_4, burst = TRUE, color = color_palette_x_YES_NO,
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
# -------- orientation of map tiles ------
print( paste(attribute_1,attribute_2, sep="     "))
print( paste(attribute_3,attribute_4, sep="     "))
sync(m1, m2, m3, m4) # 4 panels synchronised
color_palette_x
m1 <- mapview(reaches_data, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_data, zcol = attribute_2,  lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m3 <- mapview(reaches_data, zcol = attribute_3, burst = TRUE, color = color_palette_x_YES_NO, legend=TRUE,
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m4 <- mapview(reaches_data, zcol = attribute_4, burst = TRUE, color = color_palette_x_YES_NO,
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
# -------- orientation of map tiles ------
print( paste(attribute_1,attribute_2, sep="     "))
print( paste(attribute_3,attribute_4, sep="     "))
sync(m1, m2, m3, m4) # 4 panels synchronised
attribute_1 = "CoarseSubstrate_score"
attribute_2 = "Cover-Wood_score"
attribute_3 = "PoolQuantity&Quality_score"
attribute_4 = "Off-Channel-Floodplain_score"
m1 <- mapview(reaches_data, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_data, zcol = attribute_2,  lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m3 <- mapview(reaches_data, zcol = attribute_3, burst = TRUE, color = color_palette_x_YES_NO, legend=TRUE,
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m4 <- mapview(reaches_data, zcol = attribute_4, burst = TRUE, color = color_palette_x_YES_NO,
map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
# -------- orientation of map tiles ------
print( paste(attribute_1,attribute_2, sep="     "))
print( paste(attribute_3,attribute_4, sep="     "))
sync(m1, m2, m3, m4) # 4 panels synchronised
m1 <- mapview(reaches_data, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_data, zcol = attribute_2,  lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m3 <- mapview(reaches_data, zcol = attribute_3, burst = TRUE, color = color_palette_x_YES_NO, legend=TRUE,
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m4 <- mapview(reaches_data, zcol = attribute_4, burst = TRUE, color = color_palette_x_YES_NO,
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
# -------- orientation of map tiles ------
print( paste(attribute_1,attribute_2, sep="     "))
print( paste(attribute_3,attribute_4, sep="     "))
sync(m1, m2, m3, m4) # 4 panels synchronised
attribute_1 = "CoarseSubstrate_score"
attribute_2 = "Cover-Wood_score"
attribute_3 = "PoolQuantity&Quality_score"
attribute_4 = "Off-Channel-Floodplain_score"
m1 <- mapview(reaches_data, zcol = attribute_1, lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_data, zcol = attribute_2,  lwd=5,  burst=TRUE,legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m3 <- mapview(reaches_data, zcol = attribute_3, burst = TRUE,  legend=TRUE,
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m4 <- mapview(reaches_data, zcol = attribute_4, burst = TRUE,
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
# -------- orientation of map tiles ------
print( paste(attribute_1,attribute_2, sep="     "))
print( paste(attribute_3,attribute_4, sep="     "))
sync(m1, m2, m3, m4) # 4 panels synchronised
attribute_1 = "CoarseSubstrate_score"
attribute_2 = "Cover-Wood_score"
attribute_3 = "PoolQuantity&Quality_score"
attribute_4 = "Off-Channel-Floodplain_score"
m1 <- mapview(reaches_data, zcol = attribute_1, lwd=5,  legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_data, zcol = attribute_2,  lwd=5,  legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m3 <- mapview(reaches_data, zcol = attribute_3,  legend=TRUE,
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m4 <- mapview(reaches_data, zcol = attribute_4,
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery")   )
# -------- orientation of map tiles ------
print( paste(attribute_1,attribute_2, sep="     "))
print( paste(attribute_3,attribute_4, sep="     "))
sync(m1, m2, m3, m4) # 4 panels synchronised
m1 <- mapview(reaches_data, zcol = attribute_1,  legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
m2 <- mapview(reaches_data, zcol = attribute_2,   legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"))
sync(m1, m2, m3, m4) # 4 panels synchronised
l4 = addStaticLabels(m1,
data = reaches_data,
label = reaches_data$ReachName,
labelOptions = lopt)
sync(m1, m2, m3, l4) # 4 panels synchronised
m1 <- mapview(reaches_data, zcol = attribute_1,  legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"),
popup = popupTable(reaches_b2, zcol = c("ReachName","Basin.x","Assessment.Unit")))
m2 <- mapview(reaches_data, zcol = attribute_2,   legend = mapviewGetOption("legend"),
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"),
popup = popupTable(reaches_b2, zcol = c("ReachName","Basin.x","Assessment.Unit")))
m3 <- mapview(reaches_data, zcol = attribute_3,  legend=TRUE,
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"),
popup = popupTable(reaches_b2, zcol = c("ReachName","Basin.x","Assessment.Unit")))
m4 <- mapview(reaches_data, zcol = attribute_4,
color = color_palette_x, map.types = c("CartoDB.DarkMatter", "CartoDB.Positron", "Esri.WorldImagery"),
popup = popupTable(reaches_b2, zcol = c("ReachName","Basin.x","Assessment.Unit")))
sync(m1, m2, m3, l4) # 4 panels synchronised
