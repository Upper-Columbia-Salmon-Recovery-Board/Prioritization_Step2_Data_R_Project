col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5),
pch = 16, cex = 2)
text(HQ_Okanogan_X$HQ_Score, HQ_Okanogan_X$HQ_Pct-0.01, labels=HQ_Okanogan_X$ReachName)
text(HQ_Okanogan_X$HQ_Score-0.02, HQ_Okanogan_X$HQ_Pct-0.01, labels=HQ_Okanogan_X$ReachName)
plot(HQ_Okanogan_X$HQ_Score,HQ_Okanogan_X$HQ_Pct,
ylab="HQ PRCNT - habitat metrics (new)", xlab="HQ PRCNT - EDT - % of Template in EDT",
col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5),
pch = 16, cex = 2)
text(HQ_Okanogan_X$HQ_Score+0.05, HQ_Okanogan_X$HQ_Pct-0.01, labels=HQ_Okanogan_X$ReachName)
text(HQ_Okanogan_X$HQ_Score+0.05, HQ_Okanogan_X$HQ_Pct-0.01, labels=HQ_Okanogan_X$ReachName, cex=1)
help(text)
text(HQ_Okanogan_X$HQ_Score+0.05, HQ_Okanogan_X$HQ_Pct-0.01, labels=HQ_Okanogan_X$ReachName, cex=0.4)
plot(HQ_Okanogan_X$HQ_Score,HQ_Okanogan_X$HQ_Pct,
ylab="HQ PRCNT - habitat metrics (new)", xlab="HQ PRCNT - EDT - % of Template in EDT",
col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5),
pch = 16, cex = 2)
text(HQ_Okanogan_X$HQ_Score+0.1, HQ_Okanogan_X$HQ_Pct-0.01, labels=HQ_Okanogan_X$ReachName, cex=0.6)
plot(HQ_Okanogan_X$HQ_Score,HQ_Okanogan_X$HQ_Pct,
ylab="HQ PRCNT - habitat metrics (new)", xlab="HQ PRCNT - EDT - % of Template in EDT",
col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5),
pch = 16, cex = 2)
text(HQ_Okanogan_X$HQ_Score+0.1, HQ_Okanogan_X$HQ_Pct-0.01, labels=HQ_Okanogan_X$ReachName, cex=0.6)
text(HQ_Okanogan_X$HQ_Score+0.03, HQ_Okanogan_X$HQ_Pct-0.01, labels=HQ_Okanogan_X$ReachName, cex=0.6)
plot(HQ_Okanogan_X$HQ_Score,HQ_Okanogan_X$HQ_Pct,
ylab="HQ PRCNT - habitat metrics (new)", xlab="HQ PRCNT - EDT - % of Template in EDT",
col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5),
pch = 16, cex = 2)
text(HQ_Okanogan_X$HQ_Score+0.03, HQ_Okanogan_X$HQ_Pct-0.01, labels=HQ_Okanogan_X$ReachName, cex=0.6)
runif(n=1, min=1, max=20)
runif(n=1, min=1, max=20)
runif(n=nrow(HQ_Okanogan_X), min=0, max=1)
runif(n=nrow(HQ_Okanogan_X), min=-0.015, max=0.015)
plot(HQ_Okanogan_X$HQ_Score,HQ_Okanogan_X$HQ_Pct,
ylab="HQ PRCNT - habitat metrics (new)", xlab="HQ PRCNT - EDT - % of Template in EDT",
col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5),
pch = 16, cex = 2)
text(HQ_Okanogan_X$HQ_Score+0.03, HQ_Okanogan_X$HQ_Pct-0.02 + runif(n=nrow(HQ_Okanogan_X), min=-0.015, max=0.015)
}
text(HQ_Okanogan_X$HQ_Score+0.03, HQ_Okanogan_X$HQ_Pct-0.02 + runif(n=nrow(HQ_Okanogan_X), min=-0.015, max=0.015))
plot(HQ_Okanogan_X$HQ_Score,HQ_Okanogan_X$HQ_Pct,
ylab="HQ PRCNT - habitat metrics (new)", xlab="HQ PRCNT - EDT - % of Template in EDT",
col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5),
pch = 16, cex = 2)
text(HQ_Okanogan_X$HQ_Score+0.03, HQ_Okanogan_X$HQ_Pct-0.01 + runif(n=nrow(HQ_Okanogan_X), min=-0.015, max=0.015), labels=HQ_Okanogan_X$ReachName, cex=0.6)
par(mar=c(4,4,1,1))
plot(HQ_Okanogan_X$HQ_Score,HQ_Okanogan_X$HQ_Pct,
ylab="HQ PRCNT - habitat metrics (new)", xlab="HQ PRCNT - EDT - % of Template in EDT",
col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5),
pch = 16, cex = 2)
grid(lwd=2)
par(new=T)
plot(HQ_Okanogan_X$HQ_Score,HQ_Okanogan_X$HQ_Pct,
ylab="HQ PRCNT - habitat metrics (new)", xlab="HQ PRCNT - EDT - % of Template in EDT",
col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5),
pch = 16, cex = 2)
text(HQ_Okanogan_X$HQ_Score+0.03, HQ_Okanogan_X$HQ_Pct-0.01 + runif(n=nrow(HQ_Okanogan_X), min=-0.015, max=0.015), labels=HQ_Okanogan_X$ReachName, cex=0.6)
countif(HQ_Okanogan_X$HQ_Pct>=0)
length(which(HQ_Okanogan_X$HQ_Pct>=0)
)
length(which(HQ_Okanogan_X$HQ_Pct>=0))
length(which(HQ_Okanogan_X$HQ_Score>=0))
# ---------------------------------------------------------------------------
#      Criteria for Filters
# ---------------------------------------------------------------------------
print("----------------------------------------- ASSIGN CRITERIA --------------------------------------------")
source(paste(script_path, 'Criteria_Script.R', sep=""))
print("----------------------------------------- Prepare Okanogan EDT prep --------------------------------------------")
source(paste(script_path, 'Okanogan_EDT_data_input_prep.R', sep=""))
source(paste(script_path, 'SubMain_Script_Generate_All_Reaches_and_Scores_and_Organize_Output.R', sep="")  )
# Note Habitat Data gaps/missing data output is done in Generate_Habitat_Quality_Scores_Missing_Data_Layer.R
# -----------------------------------------------------------------
#       Restoration
# -----------------------------------------------------------------
output_path_x =  paste(output_path,'Reach_Actions_Restoration_Unacceptable_and_AtRisk.xlsx', sep="")
write.xlsx(Restoration_Prioritization_Output,output_path_x )
# ------------- Output for WebMap ------------------
# ------- change "Habitat_Attribute" name to "Limiting_Factor"
colnames(Reach_Habitat_Attribute_Life_Stage_Restoration_Output)[colnames(Reach_Habitat_Attribute_Life_Stage_Restoration_Output) == "Habitat_Attribute"] <- "Limiting_Factor"
output_path_x =  paste(output_path,'Reach_Habitat_Attribute_Life_Stage_Restoration_Output.xlsx', sep="")
write.xlsx(Reach_Habitat_Attribute_Life_Stage_Restoration_Output,output_path_x )
# ------------- Output for WebMap ------------------
colnames(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output)[colnames(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output) == "Habitat_Attribute"] <- "Limiting_Factor"
output_path_x =  paste(output_path,'Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output.xlsx', sep="")
write.xlsx(Reach_Habitat_Attribute_Life_Stage_Species_Restoration_Output,output_path_x )
# ----------- Outward Facing Table (pops up when reach is clicked on AND in tab below) - RESTORATION -----------
#     ALSO for the excel
output_path_x =  paste(output_path,'Restoration_Prioritization_Output_for_WebMap_Table.xlsx', sep="")
write.xlsx(Restoration_Prioritization_Output_for_WebMap,output_path_x )
# ----------- Outward Facing Table (pops up when reach is clicked on AND in tab below) - PROTECTION -----------
output_path_x =  paste(output_path,'Protection_Prioritization_Output_for_WebMap_Table.xlsx', sep="")
write.xlsx(Protection_Prioritization_Output_for_WebMap,output_path_x )
dim(Restoration_Prioritization_Output_for_WebMap)
View(Restoration_Prioritization_Output_for_WebMap)
x = Reach Name	Basin	Assessment Unit	Priority Actions	Reach Rank	Priority Species	Priority Life Stages	Unacceptable Limiting Factors	At-Risk Limiting Factors	Action Categories
# ----------------- compare old and new Reach Ranks data -------
Restoration_Reaches_2023 = read_excel( "C:\Users\ryan\Downloads\MASTER_Step2_FINALDRFT_Feb2023_opens_to_Restoration.xlsx" , sheet="Restoration_Results")
# ----------------- compare old and new Reach Ranks data -------
Restoration_Reaches_2023 = read_excel( "C:/Users/ryan/Downloads/MASTER_Step2_FINALDRFT_Feb2023_opens_to_Restoration.xlsx" , sheet="Restoration_Results")
dim(Restoration_Reaches_2023)
dim(Restoration_Prioritization_Output_for_WebMap)
View(Restoration_Prioritization_Output_for_WebMap)
dim(Restoration_Prioritization_Output)
View(Restoration_Prioritization_Output)
dim(Reach_Rankings_Output_Restoration)
View(Reach_Rankings_Output_Restoration)
length(Reach_Rankings_Output_Restoration[which(Reach_Rankings_Output_Restoration$Basin == "Okanogan")])
length(which(Reach_Rankings_Output_Restoration$Basin == "Okanogan"))
length(which(Restoration_Reaches_2023$Basin == "Okanogan"))
# ----------------- compare and plot old/new Okanogan data ----------
Restoration_Reaches_2023_OK = Restoration_Reaches_2023[which(Restoration_Reaches_2023$Basin == "Okanogan"),]
Reach_Rankings_Output_Restoration_OK = Reach_Rankings_Output_Restoration[which(Reach_Rankings_Output_Restoration$Basin == "Okanogan"),]
dim(Restoration_Reaches_2023_OK)
dim(Reach_Rankings_Output_Restoration_OK)
plot(Reach_Rankings_Output_Restoration_OK$AU_level_Reach_Rank, Restoration_Reaches_2023_OK$`Reach Rank`)
Reach_Ranks_Merged = merge(Restoration_Reaches_2023_OK, Reach_Rankings_Output_Restoration_OK, by="ReachName")
Reach_Ranks_Merged = merge(Restoration_Reaches_2023_OK, Reach_Rankings_Output_Restoration_OK, by="ReachName")
colnames(Restoration_Reaches_2023_OK)
colnames(Reach_Rankings_Output_Restoration_OK)
Restoration_Reaches_2023$ReachName = Restoration_Reaches_2023$`Reach Name`
# ----------------- compare and plot old/new Okanogan data ----------
Restoration_Reaches_2023_OK = Restoration_Reaches_2023[which(Restoration_Reaches_2023$Basin == "Okanogan"),]
Reach_Rankings_Output_Restoration_OK = Reach_Rankings_Output_Restoration[which(Reach_Rankings_Output_Restoration$Basin == "Okanogan"),]
Reach_Ranks_Merged = merge(Restoration_Reaches_2023_OK, Reach_Rankings_Output_Restoration_OK, by="ReachName")
plot(Reach_Ranks_Merged$AU_level_Reach_Rank, Reach_Ranks_Merged$`Reach Rank`)
colnames(Restoration_Reaches_2023_OK)
plot( Reach_Ranks_Merged$`Reach Rank`, Reach_Ranks_Merged$AU_level_Reach_Rank, xlab="2023 Reach Rank (EDT HQ)", ylab="2024 Reach Rank (Prioritization HQ)")
plot( Reach_Ranks_Merged$`Reach Rank`, Reach_Ranks_Merged$AU_level_Reach_Rank, xlab="2023 Reach Rank (EDT HQ)", ylab="2024 Reach Rank (Prioritization HQ)",
col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5),
pch = 16, cex = 2)
plot( jitter(Reach_Ranks_Merged$`Reach Rank`), Reach_Ranks_Merged$AU_level_Reach_Rank, xlab="2023 Reach Rank (EDT HQ)", ylab="2024 Reach Rank (Prioritization HQ)",
col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5),
pch = 16, cex = 2)
plot( jitter(Reach_Ranks_Merged$`Reach Rank`), jitter(Reach_Ranks_Merged$AU_level_Reach_Rank), xlab="2023 Reach Rank (EDT HQ)", ylab="2024 Reach Rank (Prioritization HQ)",
col = rgb(red = 0, green = 0, blue = 1, alpha = 0.5),
pch = 16, cex = 2)
text(Reach_Ranks_Merged$`Reach Rank`+0.03, Reach_Ranks_Merged$AU_level_Reach_Rank-0.01 + runif(n=nrow(Reach_Ranks_Merged), min=-0.015, max=0.015), labels=Reach_Ranks_Merged$ReachName, cex=0.6)
View(Reach_Rankings_Output_Restoration_OK)
test_x = FALSE
if(test_x){
species = "Steelhead"
basins = "Okanogan"
}
species = "Steelhead"
basins = "Okanogan"
if(species == "Steelhead"){
# ---------------- species reach ---------------
species_reach = 'Steelhead.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration = 'AU Restoration Rank'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection = 'AU Protection Rank'
# --------------- Life stage Sum column name ----------
life_stage_sum_column = 'SH Number of Life Stages'
# ---------------- life stage priority names ---------
life_stages_priorities_species_specific =  life_stages_priorities[['steelhead_life_stages']]
# ----------------------- life stage presence in reach -------------
reach_life_stage_presence = steelhead_life_stages_presence
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Steelhead_Limiting_Factors_RESTORATOIN_Okanogan" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
protection_output_name = paste(paste("Steelhead_Limiting_Factors_PROTECTION_Okanogan" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
}else{
print('Incorrectly entered species name - re-type species name')
}
#  ---------------------------------------------------------------------------------
#           Establish Reach Information Data Frame Just for this Output
#  ---------------------------------------------------------------------------------
# -------- Reach Information data frame for this species -----------
Species_Reach_Information_data = Reach_Information_data[which(Reach_Information_data$Basin == "Okanogan"), ]
#  ---------------------------------------------------------------------------------
#           Create AU Ranks data frame
#  ---------------------------------------------------------------------------------
Species_AU_Ranks_data = AU_Ranks_Okanogan
print(paste("Total Initial Reaches (LF Pathway): ", nrow(Species_Reach_Information_data), sep=""))
dim(AU_Ranks_Okanogan)
View(AU_Ranks_Okanogan)
#  ---------------------------------------------------------------------------------
#           Create AU Ranks data frame
#  ---------------------------------------------------------------------------------
Species_AU_Ranks_data = AU_Ranks_Okanogan
print(paste("Total Initial Reaches (LF Pathway): ", nrow(Species_Reach_Information_data), sep=""))
# -------------------- add additional column for this particular species reach presence ---------------
Species_Reach_Information_data$Species_Reaches = Species_Reach_Information_data[species_reach]
# ----------------------- filter out for only reaches with this species --------------
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
print(paste("Total reaches after species-reach filter: ", nrow(Species_Reach_Information_data), sep=""))
# -------------------- add additional column for this particular species reach presence ---------------
Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column"] = Life_Stage_Priorities_AU_and_Reach_data[life_stage_sum_column]
# ----------------------- filter out for Habitat_Quality_Scores reaches with Habitat Quality Score criteria --------------
Life_Stage_Priorities_AU_and_Reach_data_FILTERED = Life_Stage_Priorities_AU_and_Reach_data %>%
filter(Life_Stage_Sum_Column   >=   Sum_Life_Stage_Criteria)
# ------------------------ identify reaches that pass through the RESTORATION filter ----------
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter(ReachName   %in%   Life_Stage_Priorities_AU_and_Reach_data_FILTERED$`ReachName`)
print(paste("Total reaches after only having basins of interest: ", nrow(Species_Reach_Information_data), sep=""))
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data["Species_AU_Ranks"] = Species_AU_Ranks_data[AU_rank_name_restoration]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_restoration = Species_AU_Ranks_data %>%
filter(Species_AU_Ranks    %in%   AU_Rank)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Species_Reach_Information_data_restoration = Species_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_restoration$`EDT AU`)
print(paste("Restoration - AU rank filter: ", nrow(Species_Reach_Information_data_restoration), sep=""))
dim(Species_Reach_Information_data_restoration)
View(Species_Reach_Information_data_restoration)
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data["Species_AU_Ranks"] = Species_AU_Ranks_data[AU_rank_name_protection]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_protection = Species_AU_Ranks_data %>%
filter(Species_AU_Ranks    %in%   AU_Rank)
# ------------------------ identify after AUs that pass this filter in reach-based table ----------
Species_Reach_Information_data_protection = Species_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_protection$`EDT AU`)
print(paste("Protection - total after AU rank filter: ", nrow(Species_Reach_Information_data_protection), sep=""))
# -------------- list life stages -------
life_stages_steelhead = c("Adult Migration" ,"Fry" ,"Holding and Maturation"  ,"Smolt Outmigration" , "Spawning and Incubation", "Summer Rearing" , "Winter Rearing")
# ------------ start table to combine all life stage output ---------
Limiting_Factor_Pathway_Output = c()
life_stages_steelhead
life_stage_x = "Adult Migration"
print(paste("Starting life stage: ",life_stage_x))
# ----------- pull life stage Table -----------
if(life_stage_x == "Adult Migration" ){
Limiting_Factor_Life_Stage_Table = Adult_Migration_LF_Okanogan
}else if(life_stage_x == "Fry" ){
Limiting_Factor_Life_Stage_Table = Fry_LF_Okanogan
}else if(life_stage_x == "Holding and Maturation" ){
Limiting_Factor_Life_Stage_Table = Holding_and_Maturation_LF_Okanogan
}else if(life_stage_x == "Smolt Outmigration" ){
Limiting_Factor_Life_Stage_Table = Smolt_Outmigration_LF_Okanogan
}else if(life_stage_x == "Spawning and Incubation" ){
Limiting_Factor_Life_Stage_Table = Spawning_and_Incubation_LF_Okanogan
}else if(life_stage_x == "Summer Rearing" ){
Limiting_Factor_Life_Stage_Table = Summer_Rearing_LF_Okanogan
}else if(life_stage_x == "Winter Rearing" ){
Limiting_Factor_Life_Stage_Table = Winter_Rearing_LF_Okanogan
}
dim(Adult_Migration_LF_Okanogan)
View(Adult_Migration_LF_Okanogan)
dim(Okanogan_Basic_Reach_Info_LF_initial_RTT_EDT_Level_3)
View(Okanogan_Basic_Reach_Info_LF_initial_RTT_EDT_Level_3)
dim(Okanogan_Basic_Reach_Info_LF_initial_RTT_EDT_Level_3)
View(Limiting_Factors_Okanogan_EDT_LIFE_STAGE_EDT_Level3)
species = "Steelhead"
if(species == "Spring Chinook"){
# ---------------- species reach ---------------
species_reach = 'Spring.Chinook.Reach'
# ---------------- species AU Rank RESTORATION ----------
AU_rank_name_restoration = 'SPCHNTier_Restoration'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection = 'SPCHNTier_Protection'
# --------------- Life stage Sum column name ----------
life_stage_sum_column = 'SPCHN Number of Life Stages'
# ---------------- life stage priority names ---------
life_stages_priorities_species_specific =  life_stages_priorities[['spring_chinook_life_stages']]
# ---------------- life stage presence ------------
life_stages_prescence_species_specific = life_stages_prescence[["spring_chinook_life_stages"]]
}else if(species == "Steelhead"){
# ---------------- species reach ---------------
species_reach = 'Steelhead.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration = 'STLTier_Restoration'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection = 'STLTier_Protection'
# --------------- Life stage Sum column name ----------
life_stage_sum_column = 'SH Number of Life Stages'
# ---------------- life stage priority names ---------
life_stages_priorities_species_specific =  life_stages_priorities[['steelhead_life_stages']]
# ---------------- life stage presence ------------
life_stages_prescence_species_specific = life_stages_prescence[["steelhead_life_stages"]]
}else if(species == "Bull Trout"){
# ---------------- species reach ---------------
species_reach = 'Bull.Trout.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration = 'BTTier_Restoration'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection = 'BTTier_Protection'
# --------------- Life stage Sum column name ----------
life_stage_sum_column = 'BT Num Life Stages'
# ---------------- life stage priority names ---------
life_stages_priorities_species_specific =  life_stages_priorities[['bull_trout_life_stages']]
# ---------------- life stage presence ------------
life_stages_prescence_species_specific = life_stages_prescence[["bull_trout_life_stages"]]
}else{
print('Incorrectly entered species name - re-type species name')
}
#  ---------------------------------------------------------------------------------
#           Establish Reach Information Data Frame Just for this Output
#  ---------------------------------------------------------------------------------
# -------- Reach Information data frame for this species -----------
Species_Reach_Information_data = Reach_Information_data
# ---------- AU Ranks data frame for this species ---------
Species_AU_Ranks_data = AU_Ranks_data
# -------------------- add additional column for this particular species reach presence ---------------
Species_Reach_Information_data = Species_Reach_Information_data[,c("ReachName","Basin","Assessment.Unit",species_reach)]
# -------------------- add additional column for this particular species reach presence ---------------
Life_Stage_Priorities_AU_and_Reach_data["Life_Stage_Sum_Column"] = Life_Stage_Priorities_AU_and_Reach_data[life_stage_sum_column]
Life_Stage_Priorities_AU_and_Reach_data_SPECIES = Life_Stage_Priorities_AU_and_Reach_data[,c("ReachName",life_stage_sum_column)]
# ----------------------- filter out for Habitat_Quality_Scores reaches with Habitat Quality Score criteria --------------
Species_Reach_Information_data = merge(Species_Reach_Information_data,Life_Stage_Priorities_AU_and_Reach_data_SPECIES, by="ReachName" )
#  ---------------------------------------------------------------------------------
#           Add HQ Pct (Protection filters )
#  ---------------------------------------------------------------------------------
HQ_output = Habitat_Quality_Scores[,c("ReachName", "HQ_Pct")]
Species_Reach_Information_data = merge(Species_Reach_Information_data , HQ_output, by="ReachName")
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data["Species_AU_Ranks"] = Species_AU_Ranks_data[AU_rank_name_restoration]
Species_AU_Ranks_data_SPECIES = Species_AU_Ranks_data[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(Species_AU_Ranks_data_SPECIES)[1] = "Assessment.Unit"
# ------------ include the Okanogan -------------
AU_Ranks_Okanogan_SPECIES = AU_Ranks_Okanogan[,c("EDT AU","AU Restoration Rank")]
colnames(AU_Ranks_Okanogan_SPECIES) = c("Assessment.Unit" , "Species_AU_Ranks")
# -------- combine and merge ---------
Species_AU_Ranks_data_SPECIES = rbind(Species_AU_Ranks_data_SPECIES, AU_Ranks_Okanogan_SPECIES)
colnames(Species_AU_Ranks_data_SPECIES)[2] = "AU_Restoration_Rank"
Species_Reach_Information_data = merge(Species_Reach_Information_data,Species_AU_Ranks_data_SPECIES, by="Assessment.Unit" )
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data["Species_AU_Ranks"] = Species_AU_Ranks_data[AU_rank_name_protection]
Species_AU_Ranks_data_SPECIES = Species_AU_Ranks_data[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(Species_AU_Ranks_data_SPECIES)[1] = "Assessment.Unit"
# ------------ include the Okanogan -------------
AU_Ranks_Okanogan_SPECIES = AU_Ranks_Okanogan[,c("EDT AU","AU Protection Rank")]
colnames(AU_Ranks_Okanogan_SPECIES) = c("Assessment.Unit" , "Species_AU_Ranks")
# -------- combine and merge ---------
Species_AU_Ranks_data_SPECIES = rbind(Species_AU_Ranks_data_SPECIES, AU_Ranks_Okanogan_SPECIES)
colnames(Species_AU_Ranks_data_SPECIES)[2] = "AU_Protection_Rank"
Species_Reach_Information_data = merge(Species_Reach_Information_data,Species_AU_Ranks_data_SPECIES, by="Assessment.Unit" )
# -------------------- pull habitat attributes/life stages JUST for this species ---------
Attribute_LifeStage_Crosswalk_Life_Stage = Attribute_LifeStage_Crosswalk %>%
filter(Species  %in% species  )
# -------------------------- get list of life stages --------------------
life_stages = unique(Attribute_LifeStage_Crosswalk_Life_Stage$'Life Stage')
Life_Stages_Habitat_Priorities_ALL= list()
# ---------------------------- generate the scores for all the life stages -----------------
print("...processing the following life stages")
for(life_stage_x in life_stages){
print(paste("     ....",life_stage_x, sep=""))
# --------------------------------------------------------------------
#     Prep the Okanogan Life Stage habitat attributes data
#  ------------------------------------------------------------------
# ----------------- Get Okanogan  raw life stage scores ------------------
Okanogan_Habitat_Attribute_Scores_for_individual_Life_Stage = Limiting_Factors_Okanogan_EDT[which(Limiting_Factors_Okanogan_EDT$`RTT Life Stage` == life_stage_x), ]
#  -------- Filter for only Level 3s with Level 2 Crosswalks (and therefore RTT habitat) --------------
Okanogan_Habitat_Attribute_Scores_for_individual_Life_Stage = Okanogan_Habitat_Attribute_Scores_for_individual_Life_Stage[which(!is.na( Okanogan_Habitat_Attribute_Scores_for_individual_Life_Stage$EDT_Attribute_Level_2 ) ),  ]
# ----------------------------------------------------------------
#    AU Life Stage Priority
# ----------------------------------------------------------------
Life_Stage_Priority_Value = Life_Stage_Priorities_AU_and_Reach_data[,c("ReachName",life_stages_priorities_species_specific[[life_stage_x]])]
colnames(Life_Stage_Priority_Value)[2] = "AU_Life_Stage_Priority"
Species_Reach_Information_data_Life_Stage = merge(Species_Reach_Information_data, Life_Stage_Priority_Value, by="ReachName")
# ----------------------------------------------------------------
#    Life Stage Presence
# ----------------------------------------------------------------
Life_Stage_Presence_Value = Life_Stage_Priorities_AU_and_Reach_data[,c("ReachName",life_stages_prescence_species_specific[[life_stage_x]])]
colnames(Life_Stage_Presence_Value)[2] = "Reach_Life_Stage_Presence"
Species_Reach_Information_data_Life_Stage = merge(Species_Reach_Information_data_Life_Stage, Life_Stage_Presence_Value, by="ReachName")
# ----------------------------------------------------------------
#     Generate and combine in list the raw life stage scores
# ----------------------------------------------------------------
# -----------------------------------
#     Pull scores for this life stage
# -----------------------------------    # ---------------------------------- generate habitat attributes and scores for this life stage for EVERY reach ------------------
Habitat_Attribute_Scores_for_individual_Life_Stage = Generate_individual_life_stage_score(species, life_stage_x)
# -------------------------- remove "Basin" since it is already in the Species_Reach_Information_data_Life_Stage data frame --------------
Habitat_Attribute_Scores_for_individual_Life_Stage <- Habitat_Attribute_Scores_for_individual_Life_Stage[ , ! names(Habitat_Attribute_Scores_for_individual_Life_Stage) %in% c("Basin")]
# -----------------------------------
#          Pull in the Okanogan data for this life stage
# -----------------------------------    # NOTE - this function is in "Limiting_Factor_Pathway_Filter_OKANOGAN.R"
Habitat_Attribute_Scores_for_individual_Life_Stage_Okanogan = EDT_generate_habitat_attributes_for_a_life_stage(Okanogan_Habitat_Attribute_Scores_for_individual_Life_Stage,  life_stage_x, colnames(Habitat_Attribute_Scores_for_individual_Life_Stage) )
# --------------------------------- combine original and okanogan -------------
# This column is for the Okanogan data
Habitat_Attribute_Scores_for_individual_Life_Stage$all_functional_condition_for_life_stage = NA
# ----- go through loup to replace each Okanogan row -----
for(reach_x in Habitat_Attribute_Scores_for_individual_Life_Stage_Okanogan$ReachName){
# ---- if one of two reaches that are in Canada or at the mouth of the Okanogan, skip -----
if(reach_x == "Okanogan 16-49" | reach_x == "Okanogan 16-50" | reach_x == "Okanogan 16-Wells Pool"){ next }
# -------------- new Okanogan row to add --------------
new_row = Habitat_Attribute_Scores_for_individual_Life_Stage_Okanogan[which(Habitat_Attribute_Scores_for_individual_Life_Stage_Okanogan$ReachName == reach_x), ]
# --------- old Okanogan row to remove ------
target_row = which( Habitat_Attribute_Scores_for_individual_Life_Stage$ReachName == reach_x )
# ----- if a slight difference in reach name (only example now is Salmon 16-10a vs Salmon 16-10)
if(length(target_row) == 0){
target_row = which( grepl(reach_x, Habitat_Attribute_Scores_for_individual_Life_Stage$ReachName, fixed = TRUE) )
}
if( nrow(new_row) == 0 | length(target_row) == 0){
print(reach_x)
print(nrow(new_row))
print(target_row)
print(dim(Habitat_Attribute_Scores_for_individual_Life_Stage))
}
# ---------- remove old Okanogan row ----
Habitat_Attribute_Scores_for_individual_Life_Stage = Habitat_Attribute_Scores_for_individual_Life_Stage[-target_row,]
# ---------------- add New Okanogan row ------
Habitat_Attribute_Scores_for_individual_Life_Stage = rbind(Habitat_Attribute_Scores_for_individual_Life_Stage, new_row)
}
# --------------- merge with other data ----------------
Species_Reach_Information_data_Life_Stage  = merge( Species_Reach_Information_data_Life_Stage ,Habitat_Attribute_Scores_for_individual_Life_Stage, by="ReachName")
# ------------------- add the data frame for this life stage to the list for the species ----------
# ------------- if first entry ----
if(is.null(names(Life_Stages_Habitat_Priorities_ALL))){
Life_Stages_Habitat_Priorities_ALL[life_stage_x] = list(Species_Reach_Information_data_Life_Stage)
# -------- if not the first entry ------------
}else{
Life_Stages_Habitat_Priorities_ALL[[life_stage_x]] = Species_Reach_Information_data_Life_Stage
}
}
# ---------------------------- generate the scores for all the life stages -----------------
print("...processing the following life stages")life_stage_x
life_stage_x
life_stages
life_stage_x = life_stages[5]
print(paste("     ....",life_stage_x, sep=""))
# ----------------- Get Okanogan  raw life stage scores ------------------
Okanogan_Habitat_Attribute_Scores_for_individual_Life_Stage = Limiting_Factors_Okanogan_EDT[which(Limiting_Factors_Okanogan_EDT$`RTT Life Stage` == life_stage_x), ]
#  -------- Filter for only Level 3s with Level 2 Crosswalks (and therefore RTT habitat) --------------
Okanogan_Habitat_Attribute_Scores_for_individual_Life_Stage = Okanogan_Habitat_Attribute_Scores_for_individual_Life_Stage[which(!is.na( Okanogan_Habitat_Attribute_Scores_for_individual_Life_Stage$EDT_Attribute_Level_2 ) ),  ]
# ----------------------------------------------------------------
#    AU Life Stage Priority
# ----------------------------------------------------------------
Life_Stage_Priority_Value = Life_Stage_Priorities_AU_and_Reach_data[,c("ReachName",life_stages_priorities_species_specific[[life_stage_x]])]
colnames(Life_Stage_Priority_Value)[2] = "AU_Life_Stage_Priority"
Species_Reach_Information_data_Life_Stage = merge(Species_Reach_Information_data, Life_Stage_Priority_Value, by="ReachName")
# ----------------------------------------------------------------
#    Life Stage Presence
# ----------------------------------------------------------------
Life_Stage_Presence_Value = Life_Stage_Priorities_AU_and_Reach_data[,c("ReachName",life_stages_prescence_species_specific[[life_stage_x]])]
colnames(Life_Stage_Presence_Value)[2] = "Reach_Life_Stage_Presence"
Species_Reach_Information_data_Life_Stage = merge(Species_Reach_Information_data_Life_Stage, Life_Stage_Presence_Value, by="ReachName")
# -----------------------------------
#     Pull scores for this life stage
# -----------------------------------    # ---------------------------------- generate habitat attributes and scores for this life stage for EVERY reach ------------------
Habitat_Attribute_Scores_for_individual_Life_Stage = Generate_individual_life_stage_score(species, life_stage_x)
species
life_stage_x
# ----------------- Get Okanogan  raw life stage scores ------------------
Okanogan_Habitat_Attribute_Scores_for_individual_Life_Stage = Limiting_Factors_Okanogan_EDT[which(Limiting_Factors_Okanogan_EDT$`RTT Life Stage` == life_stage_x), ]
#  -------- Filter for only Level 3s with Level 2 Crosswalks (and therefore RTT habitat) --------------
Okanogan_Habitat_Attribute_Scores_for_individual_Life_Stage = Okanogan_Habitat_Attribute_Scores_for_individual_Life_Stage[which(!is.na( Okanogan_Habitat_Attribute_Scores_for_individual_Life_Stage$EDT_Attribute_Level_2 ) ),  ]
# ----------------------------------------------------------------
#    AU Life Stage Priority
# ----------------------------------------------------------------
Life_Stage_Priority_Value = Life_Stage_Priorities_AU_and_Reach_data[,c("ReachName",life_stages_priorities_species_specific[[life_stage_x]])]
colnames(Life_Stage_Priority_Value)[2] = "AU_Life_Stage_Priority"
Species_Reach_Information_data_Life_Stage = merge(Species_Reach_Information_data, Life_Stage_Priority_Value, by="ReachName")
# ----------------------------------------------------------------
#    Life Stage Presence
# ----------------------------------------------------------------
Life_Stage_Presence_Value = Life_Stage_Priorities_AU_and_Reach_data[,c("ReachName",life_stages_prescence_species_specific[[life_stage_x]])]
colnames(Life_Stage_Presence_Value)[2] = "Reach_Life_Stage_Presence"
Species_Reach_Information_data_Life_Stage = merge(Species_Reach_Information_data_Life_Stage, Life_Stage_Presence_Value, by="ReachName")
# -----------------------------------
#     Pull scores for this life stage
# -----------------------------------    # ---------------------------------- generate habitat attributes and scores for this life stage for EVERY reach ------------------
Habitat_Attribute_Scores_for_individual_Life_Stage = Generate_individual_life_stage_score(species, life_stage_x)
traceback()
habitat_row
habitat_row = Habitat_Attribute_Scores_for_individual_Life_Stage[439,]
habitat_row
Habitat_Attribute_Scores_for_individual_Life_Stage$ReachName[22]
Habitat_Attribute_Scores_for_individual_Life_Stage$ReachName[100]
Habitat_Attribute_Scores_for_individual_Life_Stage$ReachName[200]
Habitat_Attribute_Scores_for_individual_Life_Stage$ReachName[500]
Habitat_Attribute_Scores_for_individual_Life_Stage$ReachName[520]
habitat_row = Habitat_Attribute_Scores_for_individual_Life_Stage[520,]
habitat_row
View(Habitat_Quality_Scores)
View(Habitat_Quality_Scores_Okanogan)
View(Habitat_Attribute_Scores_for_individual_Life_Stage)
life_stage
species
# -------------------- pull habitat attributes/life stages JUST for this species ---------
Attribute_LifeStage_Crosswalk_Life_Stage = Attribute_LifeStage_Crosswalk %>%
filter(Species  %in% species  )
# ------------------ pull habitat attributes JUST for this life stage -------------------
habitat_attributes_life_stage_list = Attribute_LifeStage_Crosswalk_Life_Stage %>%
filter(Attribute_LifeStage_Crosswalk_Life_Stage$'Life Stage'  %in%  life_stage  )
# ------------------ just pull core metrics -------------------
habitat_attributes_life_stage_list = habitat_attributes_life_stage_list[which(habitat_attributes_life_stage_list$`Life Stage Core Metric?` == "x"), ]
Habitat_Attribute_Scores_for_individual_Life_Stage = c()
Habitat_Attribute_Scores_for_individual_Life_Stage = c()
habitat_attribute_x
habitat_attributes_life_stage_list$'Habitat Attribute'
habitat_attribute_x = habitat_attributes_life_stage_list$'Habitat Attribute'[1]
habitat_attribute_x
# --------------------- generate Habitat Attribute scores for this life stage -------
Habitat_Attribute_Scores_Life_Stage = Habitat_Attribute_Scores %>%
filter(Habitat_Attribute %in% habitat_attribute_x)
# -----------------------pull only the habitat attribute score ---------
Habitat_Attribute_Score_x = Habitat_Attribute_Scores_Life_Stage$Habitat_Attribute_Score
# --------------- convert to a data frame and add column name-----------
Habitat_Attribute_Score_x = as.data.frame(Habitat_Attribute_Score_x)
colnames(Habitat_Attribute_Score_x) = habitat_attribute_x
dim(Habitat_Attribute_Scores)
View(Habitat_Attribute_Scores)
source(paste(script_path, 'Data_Sources_List_for_Habitat_Attributes.R', sep=""))
source(paste(script_path, 'FUNCTIONS_for_Habitat_Attribute_Filters.R', sep=""))
names(Habitat_Attributes_List)
habitat_attribute_x = names(Habitat_Attributes_List)[1]
print(paste("-----------------Habitat Attribute----------------------: ", habitat_attribute_x,sep="") )
# --------------------------------------------------------------------
#   Loop through each Data Source for this specific habitat attribute
# --------------------------------------------------------------------
data_sources_list =  Habitat_Attributes_List[habitat_attribute_x]
data_sources_list
dim(Habitat_Attributes_List)
class(Habitat_Attributes_List)
names(Habitat_Attributes_List)
