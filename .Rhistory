# ---------------------------------------------------------------------------
print("----------------------------------------- READ IN THE DATA --------------------------------------------")
source(paste(script_path, 'Read_in_data_Script.R', sep=""))
# ---------------------------------------------------------------------------
#      Criteria for Filters
# ---------------------------------------------------------------------------
print("----------------------------------------- ASSIGN CRITERIA --------------------------------------------")
source(paste(script_path, 'Criteria_Script.R', sep=""))
print("----------------------------------------- Prepare Okanogan EDT prep --------------------------------------------")
source(paste(script_path, 'Okanogan_EDT_data_input_prep.R', sep=""))
source(paste(script_path, 'SubMain_Script_Generate_All_Reaches_and_Scores_and_Organize_Output.R', sep="")  )
dim(Habitat_Quality_Scores)
View(Habitat_Quality_Scores)
colnames(Habitat_Quality_Scores)
# ---------------------------------------------------------------------------
#   LIMITING FACTOR PATHWAY: Generate Habitat Attribute Table (used in Limiting Factor Pathway)
# ---------------------------------------------------------------------------
print("----------------------------------------- GENERATE HABITAT ATTRIBUTE SCORES (for Limtiting Factor Pathway) --------------------------------------------")
# some of HQ filters are used in Habitat Attribute generation
source( paste(script_path, 'FUNCTIONS_for_Habitat_Quality_Filters.R', sep="")  )
# script to generate habitat attribute scores
source( paste(script_path, 'Habitat_Attribute_Scores_Generate_Script.R', sep="") )
print("----------------------------------------- GENERATE HABITAT QUALITY SCORES --------------------------------------------")
source( paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep="") )
traceback()
source(paste(script_path, 'Data_Sources_List_for_Habitat_Attributes.R', sep=""))
source(paste(script_path, 'FUNCTIONS_for_Habitat_Quality_Filters.R', sep=""))
source(paste(script_path, 'Data_Sources_List_for_Habitat_Attributes.R', sep=""))
source(paste(script_path, 'FUNCTIONS_for_Habitat_Quality_Filters.R', sep=""))
# --------------------- Establish Habitat_Quality_Scores data frame ---------------------------------
Habitat_Quality_Scores = as.tibble(Reach_Information_data[,c('ReachName','Basin', 'Assessment.Unit',
'Spring.Chinook.Reach','Steelhead.Reach','Bull.Trout.Reach')])
colnames(Habitat_Quality_Scores) = c('ReachName','Basin', 'Assessment.Unit',
'Spring.Chinook.Reach','Steelhead.Reach','Bull.Trout.Reach')
habitat_attribute_x = names(Habitat_Quality_Habitat_Attributes_List)[1] # just to print out
# --------------------- Establish data frame to establish data source ---------------------------------
Habitat_Quality_Scores_DATA_SOURCES = as.tibble(Reach_Information_data[,c('ReachName','Basin', 'Assessment.Unit')])
ptm <- proc.time()[3]
for( habitat_attribute_x in names(Habitat_Quality_Habitat_Attributes_List) ){
print(habitat_attribute_x)
# --------------------------------------------------------------------
#   Pull Habitat Attribute Score from Habitat Attributes
# --------------------------------------------------------------------
output_x = Habitat_Attribute_Scores[which(Habitat_Attribute_Scores$Habitat_Attribute == habitat_attribute_x),]
# --------------------------------------------------------------------
#   IF Score for Habitat Attribute is present in Habitat_Attribute_Scores
# --------------------------------------------------------------------
if( nrow(output_x) > 0 ){
# ------- pull score from Habitat Attribute data --------
output_x_add_to_HQ = output_x[  , c("ReachName", "Habitat_Attribute_Score")]
colnames(output_x_add_to_HQ) = c("ReachName","final_score")
# --------------------------------------------------------------------
#   IF NO Score for Habitat Attribute is present in Habitat_Attribute_Scores
# --------------------------------------------------------------------
}else{
print("--------- (for above and below attribute) No habitat attribute in Habitat_Attribute_Scores (calculate from HQ Pathway) --------")
print(habitat_attribute_x)
# --------------------------------------------------------------------
#   Loop through each Data Source for this specific habitat attribute
# --------------------------------------------------------------------
data_sources_list =  Habitat_Quality_Habitat_Attributes_List[habitat_attribute_x]
# --------------------------------------------------------------------
#   Only one data source for this habitat attribute
# --------------------------------------------------------------------
if( length(data_sources_list[[1]]) == 1){
output_x = FUNCTION_generate_habitat_attribute_score_from_Habitat_Data_Raw(habitat_attribute_x, data_sources_list[[1]][1], "HQ")
# NOTE: this function is in "FUNCTIONS_for_Habitat_Quality_Filters.R"
# --------------------------------------------------------------------
#  MULTIPLE data source for this habitat attribute (need to get optimum)
# --------------------------------------------------------------------
# NOTE this is only true for Temperature- Rearing AND	Flow- Summer Base Flow
}else{
# ------------ data frame to record habitat attributes --------
i = 0
for( location_x in 1:length(data_sources_list[[1]]) ){
# ------------------- skip reading PROFESSOINAL JUDGEMENT -------------
if(data_sources_list[[1]][location_x] == "PROFESSIONAL JUDGEMENT"){ next }else{
# ------------ Generate metric value  AND score (1,3,5) for each habitat attribute -------------------
i = i + 1 # to include reach name if first
# outputs both metric value and score
output_x = FUNCTION_generate_habitat_attribute_score_from_Habitat_Data_Raw(habitat_attribute_x,  data_sources_list[[1]][location_x],  "HQ" )
# -------- data frame for this specific reach and habitat attribute --------
if(i == 1){
habitat_attribute_x_data_frame = output_x[,c("ReachName","score")]
}else{
habitat_attribute_x_data_frame = cbind(habitat_attribute_x_data_frame, output_x$score)
}
}
}
# ------------ data frame to record habitat attributes --------
#habitat_attribute_x_data_frame = t(habitat_attribute_x_data_frame)
#habitat_attribute_x_data_frame = as_data_frame(habitat_attribute_x_data_frame)
# ---------- pull just the scores -------
habitat_attribute_x_data_frame_numeric = habitat_attribute_x_data_frame[,2:ncol(habitat_attribute_x_data_frame)]
# ------------------- get minimum score for each row ----------
habitat_attribute_x_data_frame_numeric= habitat_attribute_x_data_frame_numeric %>%
rowwise() %>%
mutate(minimum_score = min(c_across(), na.rm=T) )
# ------- convert minimum score to numeric ---------------
habitat_attribute_x_data_frame_numeric$minimum_score2 = as.numeric(habitat_attribute_x_data_frame_numeric$minimum_score)
# -------- adding NA column (for metric column, it needs to be NA to be multiple) ------
habitat_attribute_x_data_frame_numeric$na_column = NA
output_x =  cbind(habitat_attribute_x_data_frame$ReachName, habitat_attribute_x_data_frame_numeric[,c("na_column","minimum_score2")])
colnames(output_x) = c("ReachName", "metric_data", "final_score")
# ------ generate output to add to HQ Score data frames -------
output_x_add_to_HQ = output_x[,c("ReachName","final_score")]
}
}
# --------------------------------------------------------------------
#      Combine data with data frame
# --------------------------------------------------------------------
# ---------------------------- add new columns to summary data frame -----------
# --------- generate column name ---------
column_score = paste(gsub(" ", "", habitat_attribute_x, fixed = TRUE), "score", sep="_")
colnames(output_x_add_to_HQ)[2] = column_score
# ---------- add to HQ score ------------
Habitat_Quality_Scores = merge(Habitat_Quality_Scores, output_x_add_to_HQ, by="ReachName")
# --------------------------------------------------------------------
#      Add Riparian Mean score
# --------------------------------------------------------------------
if(habitat_attribute_x == 'Riparian-Disturbance'){
Habitat_Quality_Scores = Habitat_Quality_Scores%>%
rowwise() %>%
mutate(Riparian_Mean = mean( c_across(c('Riparian-Disturbance_score',
'Riparian-CanopyCover_score')),  na.rm=T)   )
}
# --------------------------------------------------------------------
#      Add Stability mean score
# --------------------------------------------------------------------
if(habitat_attribute_x == 'Channel Stability'){
Habitat_Quality_Scores = Habitat_Quality_Scores%>%
rowwise() %>%
mutate(Stability_Mean = mean(c_across(c('BankStability_score',
'ChannelStability_score')), na.rm=T) )
}
}
print(paste("Time to complete loop: ", paste(round((proc.time()[3] - ptm)/60, 2), " minutes")    ))
# -------------------- Calculate the HQ Sum ----------------------
Habitat_Quality_Scores = Habitat_Quality_Scores%>%
rowwise() %>%
mutate(HQ_Sum = sum(c_across( habitat_quality_scores_colnames_for_sum  ), na.rm=F) )
dim(Habitat_Quality_Scores)
habitat_quality_scores_colnames_for_sum
# ---------------------------------------------------------------------------
#
#      SCRIPT: List of Data Sources for each Habitat Attributes
#
#      R Project to generate Priority Action Categories Based on Habitat Quality
#          and Limiting Factor Analysis from Step 2 of RTT Prioritization Process
#
#          Author: Ryan Niemeyer, Upper Columbia Salmon Recovery Board
#          For more information, see https://www.ucsrb.org/prioritization/
#
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
#
#   Habitat Attributes (Limiting Factors) - List of Attributes and Data Sources
#
# ---------------------------------------------------------------------------
# ----------------------- list of habitat attribute names in habitat raw data data frame --------------
# a few data sources are in the Channel_Unit_Raw or CHAMP_data_per_reach data frames, see list below
# data frame: habitat_raw_data (each of these data sources is a column in habitat_raw_data)
# NOTE: order of the list is order data are pulled - so the first data source listed for each habitat attribute
#       is the first data source pulled for each reach
#
Habitat_Attributes_List = list(
'% Fines/Embeddedness' = c('Dominant_Substrate_CATEGORY_1', 'Clay_Silt_Sand_occular_prcnt_INDICATOR_7', 'D50_sieve_size_prcnt_finer_mm_INDICATOR_13', 'SubEstSandFines_CHAMP', 'EDT_Percent_finer_0.85_mm' , 'Average_PRCNT_Embeddedness_Cramer_2023', 'PRCNT_Fines_Cascade_Fisheries_2024'),
'Bank Stability' = c('Bank_Stability_CATEGORY_1' , 'UCSRB_BankStability', 'Channel_Migration_REI_Cascade_Fisheries_2024' ),
'Brook Trout' = c('PROFESSIONAL JUDGEMENT', 'Step1 results'),
'Channel Stability' = c('Vertical_Channel_Stability_CATEGORY_1', 'UCSRB_ChannelStability', 'Vertical_channel_stability_REI_Cascade_Fisheries_2024'),
'Coarse Substrate' = c('Dominant_Substrate_CATEGORY_1', 'GravelCobble_UCSRB_pct', 'GRVL_COBL_UCSRB_CHAMP', 'Cramer_Substrate_FIELD_REI', 'Average_PRCNT_Gravel_Cobble_Cramer_2023' , 'PRCNT_Gravel_Cobble_Cascade_Fisheries_2024' ),
'Contaminants' = c( 'Contaminants_303d (not pH bacteria or DO listings)'),
'Cover- Boulders'  = c( 'Boulder_UCSRB_pct',  'SubEstBldr_CHAMP'),
'Cover- Undercut Banks' = c('Bank_Stability_CATEGORY_1', 'Structure_CATEGORY_1', 'Undercut_Area_Pct_CHAMP' ),
'Cover- Wood' = c('Pieces_per_mile_CATEGORY_1', 'Pieces_per_mile_Medium_Large_INDICATOR_1', 'LWFreq_Bf_CHAMP', 'Cramer_Cover_Wood_FIELD_REI', 'Large_Wood_Per_Mile_Cramer_2023' , 'Large_wood_per_mile_Cascade_Fisheries_2024' ),
'Entrainment/Stranding' = c('PROFESSIONAL JUDGEMENT'),
'Flow- Scour' = c( 'PROFESSIONAL JUDGEMENT'),
'Flow- Summer Base Flow' = c( 'RAWatershed_Rating_Flow', 'Flow_305bList', 'PROSPER', 'PROFESSIONAL JUDGEMENT', 'ATLAS Flow'),
'Food- Food Web Resources' = c( 'PROFESSIONAL JUDGEMENT'),
'Harassment' = c('PROFESSIONAL JUDGEMENT' ),
'Icing' = c( 'PROFESSIONAL JUDGEMENT'),
'Floodplain Connectivity' = c( 'Floodplain_Connectivity_CATEGORY_1', 'Entrenchment_CATEGORY_2', 'Channel_Confinementor_or_Entrenchment_Ratio_INDICATOR_9', 'UCSRB_OffChannel_Floodplain', 'Floodplain_Connectivity_REI_Cascade_Fisheries_2024' ),   #  temporarily removed(12.Mar.2025):  'PRCNT_Reach_length_with_bank_armour_or_levee'    Old: "Off-Channel- Floodplain"
'Off-Channel/Side-Channels' = c('Connectivity_CATEGORY_1', 'Side_Channel_Habitat_Prcnt_INDICATOR_6', 'WetSC_Pct_Average', 'UCSRB_OffChannel_SideChannels', 'Off_Channel_Connectivity_REI_Rating_Cramer_2023', 'Off_Channel_habitat_REI_Cascade_Fisheries_2024', 'PRCNT_Area_Off_Channel_10_yr_floodplain_Aspect'  ),
'Pool Quantity & Quality' = c( 'Pools_CATEGORY_1', 'Pool_Habitat_Prcnt_INDICATOR_4', 'Pools_per_mile_INDICATOR_2', 'Cramer_Pools_FIELD_REI', 'Pools_per_mile_Cramer_2023','Pools_per_mile_Cascade_Fisheries_2024'),  #  'Channel_widths_per_pool_Cascade_Fisheries_2024'
'Pools- Deep Pools' = c('Pools_deeper_3_ft_prcnt_INDICATOR_3', 'Pools_deeper_3_ft_per_mile_INDICATOR_4', 'Pools_deeper_5_ft_per_mile_INDICATOR_5'  ),
'Predators- Adults' = c( 'PROFESSIONAL JUDGEMENT'),
'Predators- Juveniles' = c( 'PROFESSIONAL JUDGEMENT'),
'Riparian- Canopy Cover' = c('Canopy_Cover_CATEGORY_1', 'UCSRB_CanopyCoverPct', 'Aspect_Riparian_Tree_Shrub_Cover_PCNT'),  #  'Canopy_Cover_NORWEST' = RTT PWG decided not to use on 10.Mar.2025
'Riparian-Disturbance' = c('Disturbance_CATEGORY_1', 'UCSRB_RiparianDisturbancePct', 'Aspect_Riparian_Disturbance_PRCNT'),
'Superimposition' = list('PROFESSIONAL JUDGEMENT' ),
'Temperature- Adult Holding' = c( 'NORWEST_Temperature', '305bListings_Temperature', 'RAWatershed_Rating_Temp' ),
'Temperature- Adult Spawning' = c('NORWEST_Temperature', '305bListings_Temperature', 'RAWatershed_Rating_Temp' ),
'Temperature- Rearing'  = c('NORWEST_Temperature', '305bListings_Temperature', 'RAWatershed_Rating_Temp' )
)
# ----------------------- list of Level 2 habitat attribute names in Okanogan EDT Results --------------
Habitat_Attributes_List_OKANOGAN = list(
'% Fines/Embeddedness' = c('EDT_Level 2 Fine Sediment', 'EDT_Level 2 Embeddedness'),
'Bank Stability' = c('EDT_Level 2 Confinement: Artificial'),
'Brook Trout' = c('PROFESSIONAL JUDGEMENT', 'Step1 results'),
'Channel Stability' = c('EDT_Level 2 Confinement: Artificial'),
'Coarse Substrate' = c('EDT_UCSRBCoarseSub pct'),
'Contaminants' = c( 'Contaminants_303d (not pH bacteria or DO listings)', 'EDT Level 2 Metals in Sediments Functional Condition','EDT Level 2 Metals in Water Functional Condition','EDT Level 2 Miscellaneous Toxins Functional Condition'),
'Cover- Boulders'  = c( 'SubEstBldr_CHAMP'),
'Cover- Undercut Banks' = c( 'Undercut_Area_Pct_CHAMP' ),
'Cover- Wood' = c('EDT_Woody Debris' ),
'Entrainment/Stranding' = c('PROFESSIONAL JUDGEMENT'),
'Flow- Scour' = c( 'EDT_Level 2 Bed scour','EDT_Level 2 Flow: Inter-Annual Low Flow Variation'),
'Flow- Summer Base Flow' = c( 'EDT_Width','EDT_Level 2 Flow: Inter-Annual Low Flow Variation', 'PROSPER' , 'PROFESSIONAL JUDGEMENT','ATLAS Flow'),
'Food- Food Web Resources' = c('PROFESSIONAL JUDGEMENT',  'EDT_Level 2 Benthic Richness', 'EDT_Temperature: Food Effect'),
'Harassment' = c('PROFESSIONAL JUDGEMENT' ),
'Icing' = c( 'PROFESSIONAL JUDGEMENT'),
'Floodplain Connectivity' = c( 'EDT_Floodplain pct'),
'Off-Channel/Side-Channels' = c('EDT Level 2 Side Channel Functional Condition'  ),
'Pool Quantity & Quality' = c( 'EDT_Scour Pool pct'),
'Pools- Deep Pools' = c(  'PROFESSIONAL JUDGEMENT' ),
'Predators- Adults' = c( 'PROFESSIONAL JUDGEMENT'),
'Predators- Juveniles' = c( 'PROFESSIONAL JUDGEMENT', 'EDT_Level 2 Predation Risk'),
'Riparian- Canopy Cover' = c( 'UCSRB_CanopyCoverPct' ), #  'Canopy_Cover_NORWEST' = RTT PWG decided not to use on 10.Mar.2025
'Riparian-Disturbance' = c('UCSRB_RiparianDisturbancePct' ),
'Superimposition' = list('PROFESSIONAL JUDGEMENT' ),
'Temperature- Adult Holding' = c( 'NORWEST_Temperature', '305bListings_Temperature',  'EDT_Temperature: Daily Maximum' ),
'Temperature- Adult Spawning' = c('NORWEST_Temperature', '305bListings_Temperature',  'EDT_Temperature: Daily Maximum'),
'Temperature- Rearing'  = c('NORWEST_Temperature', '305bListings_Temperature',  'EDT_Temperature: Daily Maximum' )
)
# ---------hybrid EDT and empirical data ----------
Habitat_Attributes_List_OKANOGAN = list(
'% Fines/Embeddedness' = c('CCT_OBMEP_embeddedness', 'CCT_OBMEP_fines_and_sands'),
'Bank Stability' = c('EDT_Level 2 Confinement: Artificial'),
'Brook Trout' = c('PROFESSIONAL JUDGEMENT', 'Step1 results'),
'Channel Stability' = c('EDT_Level 2 Confinement: Artificial'),
'Coarse Substrate' = c('CCT_OBMEP_gravel_and_small_cobbles', 'Cramer_Substrate_MODELED_sand_silt_clay_PRCNT' , 'Cramer_Substrate_MODELED_REI' ),
'Contaminants' = c( 'Contaminants_303d (not pH bacteria or DO listings)', 'EDT Level 2 Metals in Sediments Functional Condition','EDT Level 2 Metals in Water Functional Condition','EDT Level 2 Miscellaneous Toxins Functional Condition'),
'Cover- Boulders'  = c(  'SubEstBldr_CHAMP'),
'Cover- Wood' = c('CCT_OBMEP_LWM_pieces_per_mile', 'Pieces_per_mile_Medium_Large_INDICATOR_1', 'LWFreq_Bf_Average CHAMP', 'Cramer_Cover_Wood_FIELD_REI', 'Cramer_Cover_Wood_MODELED_REI' ),
'Cover- Undercut Banks' = c( 'Undercut_Area_Pct_CHAMP' ),
'Entrainment/Stranding' = c('PROFESSIONAL JUDGEMENT'),
'Flow- Scour' = c( 'EDT_Level 2 Bed scour','EDT_Level 2 Flow: Inter-Annual Low Flow Variation'),
'Flow- Summer Base Flow' = c( 'EDT_Width','EDT_Level 2 Flow: Inter-Annual Low Flow Variation', 'PROSPER' ,'Flow_305bList', 'ATLAS Flow','PROFESSIONAL JUDGEMENT'),
'Food- Food Web Resources' = c('PROFESSIONAL JUDGEMENT',  'EDT_Level 2 Benthic Richness', 'EDT_Temperature: Food Effect'),
'Harassment' = c('PROFESSIONAL JUDGEMENT' ),
'Icing' = c( 'PROFESSIONAL JUDGEMENT'),
'Floodplain Connectivity' = c( 'EDT_Floodplain pct'), #  temporarily removed(12.Mar.2025):  'PRCNT_Reach_length_with_bank_armour_or_levee'
'Off-Channel/Side-Channels' = c('CCT_OBMEP_channel_type_side_channel_and_off_channel_PRCNT'  ),
'Pool Quantity & Quality' = c( 'CCT_OBMEP_pools_per_mile', 'Pool_Habitat_Prcnt_INDICATOR_4', 'Pools_per_mile_INDICATOR_2', 'Cramer_Pools_FIELD_REI', 'Cramer_Pools_MODELED_REI' ),
'Pools- Deep Pools' = c(  'PROFESSIONAL JUDGEMENT' ),
'Predators- Adults' = c( 'PROFESSIONAL JUDGEMENT'),
'Predators- Juveniles' = c( 'PROFESSIONAL JUDGEMENT', 'EDT_Level 2 Predation Risk'),
'Riparian- Canopy Cover' = c( 'UCSRB_CanopyCoverPct' ),  #  'Canopy_Cover_NORWEST' = RTT PWG decided not to use on 10.Mar.2025
'Riparian-Disturbance' = c('UCSRB_RiparianDisturbancePct' ),
'Superimposition' = list('PROFESSIONAL JUDGEMENT' ),
'Temperature- Adult Holding' = c( 'NORWEST_Temperature', '305bListings_Temperature',  'EDT_Temperature: Daily Maximum' ),
'Temperature- Adult Spawning' = c('NORWEST_Temperature', '305bListings_Temperature',  'EDT_Temperature: Daily Maximum'),
'Temperature- Rearing'  = c('NORWEST_Temperature', '305bListings_Temperature',  'EDT_Temperature: Daily Maximum' )
)
# ----------------------- list of Okanogan habitat attribute names in habitat raw data data frame --------------
if(Okanogan_direct_data_NOT_EDT){
Habitat_Attributes_List_OKANOGAN = list(
'% Fines/Embeddedness' = c('CCT_OBMEP_embeddedness', 'CCT_OBMEP_fines_and_sands'),
'Bank Stability' = c('EDT_Level 2 Confinement: Artificial'),
'Brook Trout' = c('PROFESSIONAL JUDGEMENT', 'Step1 results'),
'Channel Stability' = c('EDT_Level 2 Confinement: Artificial'),
'Coarse Substrate' = c('CCT_OBMEP_gravel_and_small_cobbles', 'Cramer_Substrate_MODELED_sand_silt_clay_PRCNT' , 'Cramer_Substrate_MODELED_REI' ),
'Contaminants' = c( 'Contaminants_303d (not pH bacteria or DO listings)', 'EDT Level 2 Metals in Sediments Functional Condition','EDT Level 2 Metals in Water Functional Condition','EDT Level 2 Miscellaneous Toxins Functional Condition'),
'Cover- Boulders'  = c(  'SubEstBldr_CHAMP'),
'Cover- Wood' = c('CCT_OBMEP_LWM_pieces_per_mile', 'Pieces_per_mile_Medium_Large_INDICATOR_1', 'LWFreq_Bf_Average CHAMP', 'Cramer_Cover_Wood_FIELD_REI', 'Cramer_Cover_Wood_MODELED_REI' ),
'Cover- Undercut Banks' = c( 'Undercut_Area_Pct_CHAMP' ),
'Entrainment/Stranding' = c('PROFESSIONAL JUDGEMENT'),
'Flow- Scour' = c( 'EDT_Level 2 Bed scour','EDT_Level 2 Flow: Inter-Annual Low Flow Variation'),
'Flow- Summer Base Flow' = c( 'EDT_Width','EDT_Level 2 Flow: Inter-Annual Low Flow Variation', 'PROSPER' ,'Flow_305bList', 'ATLAS Flow','PROFESSIONAL JUDGEMENT'),
'Food- Food Web Resources' = c('PROFESSIONAL JUDGEMENT',  'EDT_Level 2 Benthic Richness', 'EDT_Temperature: Food Effect'),
'Harassment' = c('PROFESSIONAL JUDGEMENT' ),
'Icing' = c( 'PROFESSIONAL JUDGEMENT'),
'Floodplain Connectivity' = c( 'EDT_Floodplain pct'),   #  temporarily removed(12.Mar.2025):  'PRCNT_Reach_length_with_bank_armour_or_levee'
'Off-Channel/Side-Channels' = c('CCT_OBMEP_channel_type_side_channel_and_off_channel_PRCNT'  ),
'Pool Quantity & Quality' = c( 'CCT_OBMEP_pools_per_mile', 'Pool_Habitat_Prcnt_INDICATOR_4', 'Pools_per_mile_INDICATOR_2', 'Cramer_Pools_FIELD_REI', 'Cramer_Pools_MODELED_REI' ),
'Pools- Deep Pools' = c(  'PROFESSIONAL JUDGEMENT' ),
'Predators- Adults' = c( 'PROFESSIONAL JUDGEMENT'),
'Predators- Juveniles' = c( 'PROFESSIONAL JUDGEMENT', 'EDT_Level 2 Predation Risk'),
'Riparian- Canopy Cover' = c( 'UCSRB_CanopyCoverPct' ),  #  'Canopy_Cover_NORWEST' = RTT PWG decided not to use on 10.Mar.2025
'Riparian-Disturbance' = c('UCSRB_RiparianDisturbancePct' ),
'Superimposition' = list('PROFESSIONAL JUDGEMENT' ),
'Temperature- Adult Holding' = c( 'NORWEST_Temperature', '305bListings_Temperature',  'EDT_Temperature: Daily Maximum' ),
'Temperature- Adult Spawning' = c('NORWEST_Temperature', '305bListings_Temperature',  'EDT_Temperature: Daily Maximum'),
'Temperature- Rearing'  = c('NORWEST_Temperature', '305bListings_Temperature',  'EDT_Temperature: Daily Maximum' )
)
}
# ---------------------------------- IF Using Cramer Modeled data ----------------
# Cramer did not do surveys OR modeled output in Okanogan
if(Cramer_Remote_Sensing_yes_no){
# -------------------- Coarse Substrate ---------------
# ---------- Methow, Entiat, Wenatchee ------
Habitat_Attributes_List = Habitat_Attributes_List[-which( names(Habitat_Attributes_List)  == "Coarse Substrate")]
Habitat_Attributes_List2 = list( 'Coarse Substrate' = c('Dominant_Substrate_CATEGORY_1', 'GravelCobble_UCSRB_pct', 'GRVL_COBL_UCSRB_CHAMP', 'Cramer_Substrate_FIELD_REI' ,'Cramer_Substrate_MODELED_REI', 'Average_PRCNT_Gravel_Cobble_Cramer_2023','PRCNT_Gravel_Cobble_Cascade_Fisheries_2024') )
Habitat_Attributes_List=  append(Habitat_Attributes_List, Habitat_Attributes_List2 )
# ------------------ Cover- Wood -------------------------
# ---------- Methow, Entiat, Wenatchee ------
Habitat_Attributes_List = Habitat_Attributes_List[-which( names(Habitat_Attributes_List)  == "Cover- Wood")]
Habitat_Attributes_List2 = list( 'Cover- Wood' =  c('Pieces_per_mile_CATEGORY_1', 'Pieces_per_mile_Medium_Large_INDICATOR_1', 'LWFreq_Bf_CHAMP', 'Cramer_Cover_Wood_FIELD_REI', 'Cramer_Cover_Wood_MODELED_REI','Large_Wood_Per_Mile_Cramer_2023','Large_wood_per_mile_Cascade_Fisheries_2024'))   #
Habitat_Attributes_List=  append(Habitat_Attributes_List, Habitat_Attributes_List2 )
# ------------------ Pool Quantity & Quality -------------------------
# ---------- Methow, Entiat, Wenatchee ------
Habitat_Attributes_List = Habitat_Attributes_List[-which( names(Habitat_Attributes_List)  == "Pool Quantity & Quality")]
Habitat_Attributes_List2 = list( 'Pool Quantity & Quality' = c('Pools_CATEGORY_1', 'Pool_Habitat_Prcnt_INDICATOR_4', 'Pools_per_mile_INDICATOR_2','Cramer_Pools_MODELED_pools_per_mile', 'Cramer_Pools_FIELD_REI', 'Cramer_Pools_MODELED_REI','Pools_per_mile_Cramer_2023','Pools_per_mile_Cascade_Fisheries_2024') ) #, 'Channel_widths_per_pool_Cascade_Fisheries_2024'
Habitat_Attributes_List=  append(Habitat_Attributes_List, Habitat_Attributes_List2 )
}
# ---------------------------------- Read in crosswalk between EDT names and names in HabitatAttribute_Ratings_Level2_updated ----------------
Level2_Data_Sources_Name_Crosswalk = read_excel( paste(Okanogan_EDT_path,'Level2_Data_Sources_Name_Crosswalk.xlsx', sep="") )
# ------------- habitat attribute AND habitat attribute number/location of data FROM Channel Unit Data -------
#    Data listed here should pull data from Channel_Unit_Raw data frame (not habitat_raw_data)
# data frame: Channel_Unit_Raw
# the number is the location in the list of data sources (so 2 means it is the second data pulled for that habitat attribute)
Channel_Unit_Raw_data_use = list('Off-Channel/Side-Channels' = 2,
'Pool Quantity & Quality'  = 2)
Channel_Unit_Raw_data_sources = list('Off-Channel/Side-Channels' = 'Side_Channel_Habitat_Prcnt_INDICATOR_6',
'Pool Quantity & Quality'  = 'Pool_Habitat_Prcnt_INDICATOR_4')
# ------------- habitat attribute AND habitat attribute number/location of data FROM CHAMP data table -------
#    Data listed here should pull data from Channel_Unit_Raw data frame (not habitat_raw_data)
# data frame: CHAMP_data_per_reach
# the number is the location in the list of data sources (so 3 means it is the third data pulled for that habitat attribute)
CHAMP_data_per_reach_data_use = list('Off-Channel/Side-Channels' = 3,
'Coarse Substrate' = 4)
CHAMP_data_per_reach_data_sources = list('Off-Channel/Side-Channels' = 'WetSC_Pct_Average',
'Coarse Substrate' = 'SubEstSandFines_Average' )  # TRIEd: 'GRVL_COBL_UCSRB_CHAMP'
#------------------------- column names of Habitat_Quality_Scores - HQ scores output (generated scores for pathway) -------
habitat_quality_scores_colnames_for_sum = c("CoarseSubstrate_score" ,"Cover-Wood_score", "Flow-SummerBaseFlow_score",
"FloodplainConnectivity_score", "Off-Channel/Side-Channels_score","PoolQuantity&Quality_score",
"Riparian_Mean","Temperature-Rearing_score")
habitat_quality_scores_colnames_ALL = c("BankStability_score", "ChannelStability_score",'Stability_Mean','CoarseSubstrate_score','Cover-Wood_score',
'Flow-SummerBaseFlow_score', 'FloodplainConnectivity_score',
'Off-Channel/Side-Channels_score','PoolQuantity&Quality_score',"Riparian-Disturbance_score" , "Riparian-CanopyCover_score" ,
'Riparian_Mean', 'Temperature-Rearing_score')
# ---------------------------------------------------------------------------
#
#   Habitat Quality - List of Attributes and Data Sources
#
# ---------------------------------------------------------------------------
# ----------------------- list of habitat attribute names in habitat raw data data frame --------------
# NOTE: as of March 2021 - R Code pulls habitat attribute (limiting factor) scores for this HQ pathway, unless
#               a particular attribute is not present in the habitat attribute scores
# a few data sources are in the Channel_Unit_Raw or CHAMP_data_per_reach data frames, see list below
# data frame: habitat_raw_data (each of these data sources is a column in habitat_raw_data)
# NOTE: order of the list is order data are pulled - so the first data source listed for each habitat attribute
#       is the first data source pulled for each reach
#
Habitat_Quality_Habitat_Attributes_List = list(
#  RTT - 12.Mar.2025 approved to not include for HQ score     'Bank Stability' = c('Bank_Stability_CATEGORY_1', 'UCSRB_BankStability'),
#  RTT - 12.Mar.2025 approved to not include for HQ score  'Channel Stability' = c('Vertical_Channel_Stability_CATEGORY_1', 'UCSRB_ChannelStability'),
'Coarse Substrate' = c('Dominant_Substrate_CATEGORY_1', 'GravelCobble_UCSRB_pct', 'GRVL_COBL_UCSRB_CHAMP'),
'Cover- Wood' = c('Pieces_per_mile_CATEGORY_1', 'Pieces_per_mile_Medium_Large_INDICATOR_1', 'LWFreq_Bf_CHAMP' ),
'Flow- Summer Base Flow' = c( 'RAWatershed_Rating_Flow', 'Flow_305bList', 'PROSPER', 'PROFESSIONAL JUDGEMENT', 'ATLAS Flow'),
'Floodplain Connectivity' = c( 'Floodplain_Connectivity_CATEGORY_1', 'Entrenchment_CATEGORY_2', 'Channel_Confinementor_or_Entrenchment_Ratio_INDICATOR_9', 'UCSRB_OffChannel_Floodplain' ),   # Data Sources listes first HabAtr as Floodplain_Connectivity_CATEGORY_1
'Off-Channel/Side-Channels' = c('Connectivity_CATEGORY_1', 'Side_Channel_Habitat_Prcnt_INDICATOR_6', 'WetSC_Pct_Average', 'UCSRB_OffChannel_SideChannels'  ),
'Pool Quantity & Quality' = c( 'Pools_CATEGORY_1', 'Pool_Habitat_Prcnt_INDICATOR_4', 'Pools_per_mile_INDICATOR_2'),
'Riparian- Canopy Cover' = c( 'UCSRB_CanopyCoverPct' ),  #  'Canopy_Cover_NORWEST' = RTT PWG decided not to use on 10.Mar.2025
'Riparian-Disturbance' = c('Disturbance_CATEGORY_1' , 'UCSRB_RiparianDisturbancePct' ),
'Temperature- Rearing'  = c('NORWEST_Temperature', '305bListings_Temperature', 'RAWatershed_Rating_Temp' )
)
# ----------------------- Habitat Attributes to default to REI if those data are available ------
REI_Default_List = c(
'Bank Stability',
'Channel Stability',
'Coarse Substrate' ,
'Cover- Wood' ,
'Floodplain Connectivity',
'Off-Channel/Side-Channels' ,
'Pool Quantity & Quality',
'Riparian-Disturbance'
)
print("----------------------------------------- GENERATE HABITAT QUALITY SCORES --------------------------------------------")
source( paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep="") )
colnames(Habitat_Quality_Scores)
View(Habitat_Quality_Scores)
print("----------------------------------------- GENERATE OKANOGAN HABITAT QUALITY AND LIMTING FACTOR SCORES --------------------------------------------")
# Okanogan: generate Habitat Attribute Scores for Habitat Quality (just Level 2) and Limiting Factor (Level 3 filter 1s and 3s to generate Level 2s)
# NOTE: Habitat_Quality_Scorse_Okanogan and Habiat_Attribute_Scores_Okanogan are generated by this script
source( paste(script_path, 'FUNCTIONS_Okanogan_EDT_Habitat_Attribute_Habitat_Quality_Scripts.R', sep="") )
# ------------------ output Habitat Quality Scores ----------------
output_path_x = paste(output_path,'Habitat_Quality_Scores.xlsx', sep="")
write.xlsx(Habitat_Quality_Scores, output_path_x)
dim(habitat_quality_scores_colnames_for_sum)
length(habitat_quality_scores_colnames_for_sum)
habitat_quality_scores_colnames_for_sum
habitat_quality_scores_colnames_for_sum_X
print("----------------------------------------- GENERATE HABITAT QUALITY SCORES --------------------------------------------")
source( paste(script_path, 'Habitat_Quality_Scores_Generate_Script.R', sep="") )
# ------------------ output Habitat Quality Scores ----------------
output_path_x = paste(output_path,'Habitat_Quality_Scores.xlsx', sep="")
write.xlsx(Habitat_Quality_Scores, output_path_x)
426 - 286
dim(Habitat_Quality_Scores)
colnames(Habitat_Quality_Scores)
length(which( is.na(Habitat_Quality_Scores$HQ_Sum ) ) )
View(Habitat_Quality_Scores)
names(Reach_Rankings_and_all_species_Output)
dim(Output_ALL_species_and_reaches)
colnames(Output_ALL_species_and_reaches)
View(Output_ALL_species_and_reaches)
View(Reach_Rankings_Output)
View(Reach_Rankings_Output_Restoration)
dim(Habitat_Quality_Pathway_Restoration)
dim(Habitat_Quality_Pathway_Restoration)
View(Habitat_Quality_Pathway_Restoration)
View(Habitat_Quality_Pathway_Restoration_Spring_Chinook)
dim(Habitat_Quality_Pathway_Restoration_Spring_Chinook)
#  to test
test_x = TRUE
if(test_x){
basins = c( "Wenatchee", "Methow", "Entiat", "Okanogan")
}
# -------------------- SPRING CHINOOK ---------------------------
# ---------------- species reach ---------------
species_reach_Spring_Chinook = 'Spring.Chinook.Reach'
# ---------------- species AU Rank RESTORATION ----------
AU_rank_name_restoration_Spring_Chinook = 'SPCHNTier_Restoration'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection_Spring_Chinook = 'SPCHNTier_Protection'
# --------------- Life stage Sum column name ----------
life_stage_sum_column_Spring_Chinook = 'SPCHN Number of Life Stages'
# ---------------- Limiting Factor Data frame ---------------
Limiting_Factor_Restoration_data_frame = Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']]
Limiting_Factor_Protection_data_frame = Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Protection']]
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Spring_Chinook_Reach_Scoring_RESTORATION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
protection_output_name = paste(paste("Spring_Chinook_Reach_Scoring_PROTECTION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
Output_ALL_Spring_Chinook_file = paste(paste("Spring_Chinook_Ranks_ALL_OUTPUT" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
# -------------------- STEELHEAD -------------------------------------------
# ---------------- species reach ---------------
species_reach_Steelhead = 'Steelhead.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration_Steelhead = 'STLTier_Restoration'
AU_rank_name_restoration_Steelhead_Okanogan  = 'AU Restoration Rank' # FOR Okanogan
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection_Steelhead = 'STLTier_Protection'
AU_rank_name_protection_Steelhead_Okanogan = 'AU Protection Rank'
# --------------- Life stage Sum column name ----------
life_stage_sum_column_Steelhead = 'SH Number of Life Stages'
# ---------------- Limiting Factor Data frame ---------------
Limiting_Factor_Restoration_data_frame = Limiting_Factor_Steelhead[['Limiting_Factor_Pathway_Restoration']]
Limiting_Factor_Protection_data_frame = Limiting_Factor_Steelhead[['Limiting_Factor_Pathway_Protection']]
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Steelhead_Reach_Scoring_RESTORATION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
protection_output_name = paste(paste("Steelhead_Reach_Scoring_PROTECTION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
Output_ALL_Steelhead_file = paste(paste("Steelhead_Ranks_ALL_OUTPUT" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
if(exclude_bull_trout == "no"){
# ---------------- species reach ---------------
species_reach_Bull_Trout = 'Bull.Trout.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration_Bull_Trout = 'BTTier_Restoration'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection_Bull_Trout = 'BTTier_Protection'
# --------------- Life stage Sum column name ----------
life_stage_sum_column_Bull_Trout = 'BT Num Life Stages'
# ---------------- Limiting Factor Data frame ---------------
Limiting_Factor_Restoration_data_frame = Limiting_Factor_Bull_Trout[['Limiting_Factor_Pathway_Restoration']]
Limiting_Factor_Protection_data_frame = Limiting_Factor_Bull_Trout[['Limiting_Factor_Pathway_Protection']]
# ------------------- output names ----------------------
restoration_output_name = paste(paste("Bull_Trout_Reach_Scoring_RESTORATION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
protection_output_name = paste(paste("Bull_Trout_Reach_Scoring_PROTECTION" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
Output_ALL_Bull_Trout_file = paste(paste("Bull_Trout_Ranks_ALL_OUTPUT" ,
paste(basins_to_include, collapse = "_"), sep="_"),
".xlsx", sep="")
}
#  ---------------------------------------------------------------------------------
#           Establish Reach Information Data Frame Just for this Output
#  ---------------------------------------------------------------------------------
# -------- Reach Information data frame for this species -----------
Species_Reach_Information_data = Reach_Information_data
if(length(basins)==1){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter(Basin==basins[1])
}else if(length(basins)==2){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter((Basin==basins[1]) | (Basin==basins[2]) )
}else if(length(basins)==3){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter((Basin==basins[1]) | (Basin==basins[2]) | (Basin==basins[3]) )
}else if(length(basins)==4){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter((Basin==basins[1]) | (Basin==basins[2]) | (Basin==basins[3])  | (Basin==basins[4]) )
}
print(paste("Total reaches after only having basins of interest: ", nrow(Species_Reach_Information_data), sep=""))
# ---------- AU Ranks data frame for this species ---------
Species_AU_Ranks_data_Spring_Chinook = AU_Ranks_data
Species_AU_Ranks_data_Steelhead = AU_Ranks_data
Species_AU_Ranks_data_Steelhead_Okanogan = AU_Ranks_Okanogan
dim(Species_AU_Ranks_data_Steelhead)
View(Species_AU_Ranks_data_Steelhead)
dim(AU_Rank_Restoration)
View(AU_Ranks_data)
View(AU_Ranks_data)
dim(AU_Ranks_data)
hist(Habitat_Quality_Scores$HQ_Pct)
hist(Habitat_Quality_Scores$HQ_Pct)
hist(Habitat_Quality_Scores$HQ_Pct*100)
hist(Habitat_Quality_Scores$HQ_Pct*100, xlab="Habitat Quality Score (%)")
hist(Habitat_Quality_Scores$HQ_Pct*100, xlab="Habitat Quality Score (%)", main="Habitat Quality Score Histogram (PERCENT)")
