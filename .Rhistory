output_life_stages_x = FUNCTION_pull_High_Priority_Life_Stages_for_a_reach(reach_x, "Bull Trout")
reach_in_LF_output = any(Limiting_Factor_Pathway_Bull_Trout[["Limiting_Factor_Pathway_Restoration"]]$ReachName == reach_x)
# --------------- IF there is a reach in the LF Pathway output -------------
if(reach_in_LF_output){
rows_x = which(Limiting_Factor_Pathway_Bull_Trout[["Limiting_Factor_Pathway_Restoration"]]$ReachName == reach_x)
#output_life_stages_x = c()
output_limiting_factor_x = c()
for(x in rows_x){
#output_life_stages_x = c(output_life_stages_x, Limiting_Factor_Pathway_Bull_Trout[["Limiting_Factor_Pathway_Restoration"]][x,c("life_stage")])
output_limiting_factor_x = c(output_limiting_factor_x, Limiting_Factor_Pathway_Bull_Trout[["Limiting_Factor_Pathway_Restoration"]][x,c("unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes")])
}
# ------------- IF reach is not in the LF pathway -----
}else{
#output_life_stages_x = "No Priority Life Stages with Limiting Factors"
output_limiting_factor_x = "No Priority Life Stages with Limiting Factors"
}
output_life_stages_x = paste(output_life_stages_x, collapse = ",")
output_limiting_factor_x = paste(output_limiting_factor_x, collapse = ",")
Output_LF_x = t(as.data.frame(c(reach_x,output_life_stages_x, output_limiting_factor_x )))
colnames(Output_LF_x) = c("ReachName", "Priority_Life_Stages","Limiting_Factors_for_Priority_Life_Stages")
Output_LF_all = rbind(Output_LF_all, Output_LF_x )
}
# ------------- combine -------------
Output_Bull_Trout_All = merge(  Output_Bull_Trout_All  ,  Output_LF_all, by = "ReachName", all.x= TRUE )
# ------------- verify which reach passes HQ pathway or LF Pathway for RESTORATION -------------
HQ_or_LF_RESTORATION_filter_pass = c()
for(reach_x in Output_Bull_Trout_All$ReachName[which(Output_Bull_Trout_All$Basin != "Okanogan")]){
# -------------- pull row with reach --------
x = which(Output_Bull_Trout_All$ReachName == reach_x)
# --------------- if HQ score is NA, set to 100 (so it won't pass through the filter), otherwise, pull the HQ_Pct)
if(is.na(Output_Bull_Trout_All$HQ_Pct[x])){
HQ_Pct_x = 100
}else{
HQ_Pct_x = Output_Bull_Trout_All$HQ_Pct[x]
}
if(HQ_Pct_x< HQ_Score_Restoration_Reach_Scores$Category_upper_limit |
Output_Bull_Trout_All$Limiting_Factors_for_Priority_Life_Stages[x] != "No Priority Life Stages with Limiting Factors"){
output_x = t(as.data.frame(c(reach_x, "yes")))
}else{
output_x = t(as.data.frame(c(reach_x, "no")))
}
HQ_or_LF_RESTORATION_filter_pass = rbind(HQ_or_LF_RESTORATION_filter_pass, output_x)
}
colnames(HQ_or_LF_RESTORATION_filter_pass) = c("ReachName","HQ_or_LF_restoration_filter_pass_yes_no")
# ------------- combine -------------
Output_Bull_Trout_All = merge(Output_Bull_Trout_All  ,HQ_or_LF_RESTORATION_filter_pass, by = "ReachName", all.x= TRUE )
}
#  ---------------------------------------------------------------------------------
#       Protection - pull reaches with Limiting Factor for a High Priority Life Stage
#  ---------------------------------------------------------------------------------
traceback()
# --------------- new HQ Restoration and Protection names ------
HQ_Restoration_new = paste("HQ_Score_Restoration",substring(HQ_Pct_new ,7,nchar(HQ_Pct_new )), sep="" )
HQ_Protection_new = paste("HQ_Score_Protection",substring(HQ_Pct_new ,7,nchar(HQ_Pct_new )), sep="" )
#----------------update Habitat Quality Scores -----------------
Habitat_Quality_Scores_for_sensitivity_NEW = Habitat_Quality_Scores_for_sensitivity[,c("ReachName","Basin","Assessment.Unit" ,HQ_Pct_new )]
colnames(Habitat_Quality_Scores_for_sensitivity_NEW)[4] = "HQ_Pct"
# ------------------------------------------------------------------------------
#       Establish species-specific variable names
# ------------------------------------------------------------------------------
# -------------------- SPRING CHINOOK ---------------------------
# ---------------- species reach ---------------
species_reach_Spring_Chinook = 'Spring.Chinook.Reach'
# ---------------- species AU Rank RESTORATION ----------
AU_rank_name_restoration_Spring_Chinook = 'SPCHNTier_Restoration'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection_Spring_Chinook = 'SPCHNTier_Protection'
# --------------- Life stage Sum column name ----------
life_stage_sum_column_Spring_Chinook = 'SPCHN Number of Life Stages'
# ---------------- Limiting Factor Data frame ---------------
Limiting_Factor_Restoration_data_frame = Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Restoration']]
Limiting_Factor_Protection_data_frame = Limiting_Factor_Spring_Chinook[['Limiting_Factor_Pathway_Protection']]
# -------------------- STEELHEAD -------------------------------------------
# ---------------- species reach ---------------
species_reach_Steelhead = 'Steelhead.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration_Steelhead = 'STLTier_Restoration'
AU_rank_name_restoration_Steelhead_Okanogan  = 'AU Restoration Rank' # FOR Okanogan
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection_Steelhead = 'STLTier_Protection'
AU_rank_name_protection_Steelhead_Okanogan = 'AU Protection Rank'
# --------------- Life stage Sum column name ----------
life_stage_sum_column_Steelhead = 'SH Number of Life Stages'
# ---------------- Limiting Factor Data frame ---------------
Limiting_Factor_Restoration_data_frame = Limiting_Factor_Steelhead[['Limiting_Factor_Pathway_Restoration']]
Limiting_Factor_Protection_data_frame = Limiting_Factor_Steelhead[['Limiting_Factor_Pathway_Protection']]
if(exclude_bull_trout == "no"){
# ---------------- species reach ---------------
species_reach_Bull_Trout = 'Bull.Trout.Reach'
# ---------------- species AU Rank ----------
AU_rank_name_restoration_Bull_Trout = 'BTTier_Restoration'
# ---------------- species AU Rank PROTECTION ----------
AU_rank_name_protection_Bull_Trout = 'BTTier_Protection'
# --------------- Life stage Sum column name ----------
life_stage_sum_column_Bull_Trout = 'BT Num Life Stages'
# ---------------- Limiting Factor Data frame ---------------
Limiting_Factor_Restoration_data_frame = Limiting_Factor_Bull_Trout[['Limiting_Factor_Pathway_Restoration']]
Limiting_Factor_Protection_data_frame = Limiting_Factor_Bull_Trout[['Limiting_Factor_Pathway_Protection']]
}
#  ---------------------------------------------------------------------------------
#           Establish Reach Information Data Frame Just for this Output
#  ---------------------------------------------------------------------------------
# -------- Reach Information data frame for this species -----------
Species_Reach_Information_data = Reach_Information_data
#  ---------------------------------------------------------------------------------
#            Filter out to only have Basins desired for this analysis
#  ---------------------------------------------------------------------------------
if(length(basins)==1){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter(Basin==basins[1])
}else if(length(basins)==2){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter((Basin==basins[1]) | (Basin==basins[2]) )
}else if(length(basins)==3){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter((Basin==basins[1]) | (Basin==basins[2]) | (Basin==basins[3]) )
}else if(length(basins)==4){
Species_Reach_Information_data = Species_Reach_Information_data %>%
filter((Basin==basins[1]) | (Basin==basins[2]) | (Basin==basins[3])  | (Basin==basins[4]) )
}
print(paste("Total reaches after only having basins of interest: ", nrow(Species_Reach_Information_data), sep=""))
# ---------- AU Ranks data frame for this species ---------
Species_AU_Ranks_data_Spring_Chinook = AU_Ranks_data
Species_AU_Ranks_data_Steelhead = AU_Ranks_data
Species_AU_Ranks_data_Steelhead_Okanogan = AU_Ranks_Okanogan
if(exclude_bull_trout == "no"){
Species_AU_Ranks_data_Bull_Trout = AU_Ranks_data
}
#  ---------------------------------------------------------------------------------
#            Filter out to only have Species-specific reaches
#  ---------------------------------------------------------------------------------
# -------------------- SPRING CHINOOK: add additional column for this particular species reach presence ---------------
Spring_Chinook_Reach_Information_data = Species_Reach_Information_data
Spring_Chinook_Reach_Information_data$Species_Reaches = Spring_Chinook_Reach_Information_data[species_reach_Spring_Chinook]
# ----------------------- filter out for only reaches with this species --------------
Spring_Chinook_Reach_Information_data = Spring_Chinook_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
print(paste("Total reaches after Spring Chinook species-reach filter: ", nrow(Spring_Chinook_Reach_Information_data), sep=""))
# -------------------- STEELHEAD: add additional column for this particular species reach presence ---------------
Steelhead_Reach_Information_data =  Species_Reach_Information_data
Steelhead_Reach_Information_data$Species_Reaches = Steelhead_Reach_Information_data[species_reach_Steelhead]
# ----------------------- filter out for only reaches with this species --------------
Steelhead_Reach_Information_data = Steelhead_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
print(paste("Total reaches after Steelhead species-reach filter: ", nrow(Steelhead_Reach_Information_data), sep=""))
if(exclude_bull_trout == "no"){
# -------------------- BULL TROUT: add additional column for this particular species reach presence ---------------
Bull_Trout_Reach_Information_data = Species_Reach_Information_data
Bull_Trout_Reach_Information_data$Species_Reaches = Bull_Trout_Reach_Information_data[species_reach_Bull_Trout]
# ----------------------- filter out for only reaches with this species --------------
Bull_Trout_Reach_Information_data = Bull_Trout_Reach_Information_data %>%
filter(Species_Reaches   == 'yes')
print(paste("Total reaches after Bull Trout species-reach filter: ", nrow(Bull_Trout_Reach_Information_data), sep=""))
}
# ---------------------- start data frame that outputs results for all reaches -------------
Output_Spring_Chinook_All = Reach_Information_data[,c(1:4)]
Output_Steelhead_All = Reach_Information_data[,c(1:3,5)]
Output_Bull_Trout_All = Reach_Information_data[,c(1:3,6)]
# ---------------------------------------------------------------------------------------------------------------
#
#     Priority Assessment Unit Filter
#
# ---------------------------------------------------------------------------------------------------------------
#  ---------------------------------------------------------------------------------
#            Filter out to select for AU rank - RESTORATION
#  ---------------------------------------------------------------------------------
# ------------------- establish AU Rank ------------------
AU_Rank_Restoration = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "AU_Ranking" &
Restoration_Reach_Scoring$Category_Stage == "filter"),"Category"]
AU_Rank_Restoration = as.numeric(AU_Rank_Restoration)
# --------------------------- SPRING CHINOOK -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Spring_Chinook ["Species_AU_Ranks"] = Species_AU_Ranks_data_Spring_Chinook [AU_rank_name_restoration_Spring_Chinook]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Spring_Chinook_restoration = Species_AU_Ranks_data_Spring_Chinook[
which(Species_AU_Ranks_data_Spring_Chinook["Species_AU_Ranks"] <= as.numeric(AU_Rank_Restoration) ), ]
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Spring_Chinook_Reach_Information_data_restoration = Spring_Chinook_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Spring_Chinook_restoration$`Assessment Unit`)
print(paste("Spring Chinook Restoration - total AU rank filter: ", nrow(Spring_Chinook_Reach_Information_data_restoration), sep=""))
# --------------------------- STEELHEAD -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead ["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead [AU_rank_name_restoration_Steelhead]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_restoration = Species_AU_Ranks_data_Steelhead[
which(Species_AU_Ranks_data_Steelhead["Species_AU_Ranks"] <= as.numeric(AU_Rank_Restoration) ), ]
# ------------------------ identify AUs that pass this filter in reach-based table ----------
#Steelhead_Reach_Information_data_restoration = Steelhead_Reach_Information_data %>%
# filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_restoration$`Assessment Unit`)
Steelhead_Reach_Information_data_restoration = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_restoration$`Assessment Unit`)
# ---------------- add Okanogan -------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead_Okanogan["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead_Okanogan[AU_rank_name_restoration_Steelhead_Okanogan]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_restoration_Okanogan = Species_AU_Ranks_data_Steelhead_Okanogan[
which(Species_AU_Ranks_data_Steelhead_Okanogan["Species_AU_Ranks"] <= as.numeric(AU_Rank_Restoration) ), ]
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_restoration_Okanogan = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_restoration_Okanogan$`EDT AU`)
# ------------------- combine Wen-Ent-Methow and Okanogan ------------
Steelhead_Reach_Information_data_restoration = rbind(Steelhead_Reach_Information_data_restoration, Steelhead_Reach_Information_data_restoration_Okanogan)
print(paste("Steelhead Restoration - total AU rank filter: ", nrow(Steelhead_Reach_Information_data_restoration), sep=""))
# --------------------------- BULL TROUT -----------------
if(exclude_bull_trout == "no"){
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Bull_Trout ["Species_AU_Ranks"] = Species_AU_Ranks_data_Bull_Trout [AU_rank_name_restoration_Bull_Trout]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Bull_Trout_restoration = Species_AU_Ranks_data_Bull_Trout[
which(Species_AU_Ranks_data_Bull_Trout["Species_AU_Ranks"] <= as.numeric(AU_Rank_Restoration) ), ]
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Bull_Trout_Reach_Information_data_restoration = Bull_Trout_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Bull_Trout_restoration$`Assessment Unit`)
print(paste("Bull Trout Restoration - total AU rank filter: ", nrow(Bull_Trout_Reach_Information_data_restoration), sep=""))
# ------------ add to data frame that includes all reaches -----------
AU_Rank_Data = Species_AU_Ranks_data_Bull_Trout[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data) = c("Assessment.Unit", "AU Restoration Rank")
Output_Bull_Trout_All = merge(Output_Bull_Trout_All, AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
}
# -------- add to data frame that includes all reaches -----
# ------------- Spring Chinook --------
AU_Rank_Data = Species_AU_Ranks_data_Spring_Chinook[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data) = c("Assessment.Unit", "AU Restoration Rank")
Output_Spring_Chinook_All = merge(Output_Spring_Chinook_All  ,AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
# ----------- Steelhead ----------
if(any(Species_AU_Ranks_data_Steelhead$Subbasin == "Okanogan")){
AU_Rank_Data = Species_AU_Ranks_data_Steelhead[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data) = c("Assessment.Unit", "AU Restoration Rank")
}else{
AU_Rank_Data = Species_AU_Ranks_data_Steelhead_Okanogan[,c("EDT AU","AU Restoration Rank")]
colnames(AU_Rank_Data)[1] = "Assessment.Unit"
AU_Rank_Data2 = Species_AU_Ranks_data_Steelhead [,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data2) = c("Assessment.Unit", colnames(AU_Rank_Data)[2])
AU_Rank_Data = rbind(AU_Rank_Data, AU_Rank_Data2)
}
Output_Steelhead_All = merge(Output_Steelhead_All  ,  AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
#  ---------------------------------------------------------------------------------
#            Filter out to select for AU rank - PROTECTION
#  ---------------------------------------------------------------------------------
# ------------------- establish AU Rank ------------------
AU_Rank_Protection = Protection_Reach_Scoring[which(Protection_Reach_Scoring$Indicator == "AU_Ranking"  &
Protection_Reach_Scoring$Category_Stage == "filter"),"Category"]
AU_Rank_Protection = as.numeric(AU_Rank_Protection)
# --------------------------- SPRING CHINOOK -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Spring_Chinook ["Species_AU_Ranks"] = Species_AU_Ranks_data_Spring_Chinook [AU_rank_name_protection_Spring_Chinook]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Spring_Chinook_protection = Species_AU_Ranks_data_Spring_Chinook[
which(Species_AU_Ranks_data_Spring_Chinook["Species_AU_Ranks"] <= as.numeric(AU_Rank_Restoration) ), ]
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Spring_Chinook_Reach_Information_data_protection = Spring_Chinook_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Spring_Chinook_protection$`Assessment Unit`)
print(paste("Spring Chinook Protection - total AU rank filter: ", nrow(Spring_Chinook_Reach_Information_data_protection), sep=""))
# --------------------------- STEELHEAD -----------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead ["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead [AU_rank_name_protection_Steelhead]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_protection = Species_AU_Ranks_data_Steelhead[
which(Species_AU_Ranks_data_Steelhead["Species_AU_Ranks"] <= as.numeric(AU_Rank_Restoration) ), ]
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_protection = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_protection$`Assessment Unit`)
# ---------------- add Okanogan -------------
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Steelhead_Okanogan["Species_AU_Ranks"] = Species_AU_Ranks_data_Steelhead_Okanogan[AU_rank_name_protection_Steelhead_Okanogan]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Steelhead_protection_Okanogan = Species_AU_Ranks_data_Steelhead_Okanogan[
which(Species_AU_Ranks_data_Steelhead_Okanogan["Species_AU_Ranks"] <= as.numeric(AU_Rank_Restoration) ), ]
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Steelhead_Reach_Information_data_protection_Okanogan = Steelhead_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Steelhead_protection_Okanogan$`EDT AU`)
# ------------------- combine Wen-Ent-Methow and Okanogan ------------
Steelhead_Reach_Information_data_protection = rbind(Steelhead_Reach_Information_data_protection, Steelhead_Reach_Information_data_protection_Okanogan)
print(paste("Steelhead Protection - total AU rank filter: ", nrow(Steelhead_Reach_Information_data_protection), sep=""))
# --------------------------- BULL TROUT -----------------
if(exclude_bull_trout == "no"){
# -------------------- add additional column for this particular species reach presence ---------------
Species_AU_Ranks_data_Bull_Trout ["Species_AU_Ranks"] = Species_AU_Ranks_data_Bull_Trout [AU_rank_name_protection_Bull_Trout]
# ----------------------- filter out for only reaches with this species --------------
Species_AU_Ranks_data_Bull_Trout_protection = Species_AU_Ranks_data_Bull_Trout[
which(Species_AU_Ranks_data_Bull_Trout["Species_AU_Ranks"] <= as.numeric(AU_Rank_Restoration) ), ]
# ------------------------ identify AUs that pass this filter in reach-based table ----------
Bull_Trout_Reach_Information_data_protection = Bull_Trout_Reach_Information_data %>%
filter(Assessment.Unit    %in%   Species_AU_Ranks_data_Bull_Trout_protection$`Assessment Unit`)
# -------- add to output that includes all reaches -----
AU_Rank_Data = Species_AU_Ranks_data_Bull_Trout[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data) = c("Assessment.Unit", "AU Protection Rank")
Output_Bull_Trout_All = merge(Output_Bull_Trout_All  ,AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
print(paste("Bull Trout Protection - total AU rank filter: ", nrow(Bull_Trout_Reach_Information_data_protection), sep=""))
}
# -------- add to output that includes all reaches -----
# ------ Spring Chinook --------
AU_Rank_Data = Species_AU_Ranks_data_Spring_Chinook[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data) = c("Assessment.Unit", "AU Protection Rank")
Output_Spring_Chinook_All = merge(Output_Spring_Chinook_All  ,AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
# --------- Steelhead ----------
if(any(Species_AU_Ranks_data_Steelhead$Subbasin == "Okanogan")){
AU_Rank_Data = Species_AU_Ranks_data_Steelhead[,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data) = c("Assessment.Unit", "AU Protection Rank")
}else{
AU_Rank_Data = Species_AU_Ranks_data_Steelhead_Okanogan[,c("EDT AU","AU Protection Rank")]
colnames(AU_Rank_Data)[1] = "Assessment.Unit"
AU_Rank_Data2 = Species_AU_Ranks_data_Steelhead [,c("Assessment Unit", "Species_AU_Ranks")]
colnames(AU_Rank_Data2) = c("Assessment.Unit", colnames(AU_Rank_Data)[2])
AU_Rank_Data = rbind(AU_Rank_Data, AU_Rank_Data2)
}
Output_Steelhead_All = merge(Output_Steelhead_All  ,AU_Rank_Data, by = "Assessment.Unit", all.x= TRUE )
#  ---------------------------------------------------------------------------------
#
#         Habitat Quality Pathway Filter
#
#  ---------------------------------------------------------------------------------
#  ---------------------------------------------------------------------------------
#            Filter out to select for Habitat Quality RESTORATION score
#  ---------------------------------------------------------------------------------
# ------------------- establish Habitat Quality Score cutoff ------------------
HQ_Score_Restoration_Reach_Scores = Restoration_Reach_Scoring[which(Restoration_Reach_Scoring$Indicator == "Habitat_Quality_Score" &
Restoration_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
# ----------------------- filter out for Habitat_Quality_Scores_for_sensitivity_NEW reaches with Habitat Quality Score criteria --------------
Habitat_Quality_Scores_Restoration = Habitat_Quality_Scores_for_sensitivity_NEW %>%
filter(HQ_Pct   >=   HQ_Score_Restoration_Reach_Scores$Category_lower_limit) %>%
filter(HQ_Pct   <  HQ_Score_Restoration_Reach_Scores$Category_upper_limit)
# -------------- prepare Okanogan - Steelhead --------------
Habitat_Quality_Scores_Restoration_Okanogan = Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Restoration']]
Habitat_Quality_Scores_Restoration_Okanogan = Habitat_Quality_Scores_Restoration_Okanogan[which(Habitat_Quality_Scores_Restoration_Okanogan$Basin == "Okanogan"),]
Habitat_Quality_Scores_Restoration_Okanogan_all = Habitat_Quality_Scores_Restoration_Okanogan
Habitat_Quality_Scores_Restoration_Okanogan = Habitat_Quality_Scores_Restoration_Okanogan %>%
filter(HQ_Pct   >=   HQ_Score_Restoration_Reach_Scores$Category_lower_limit) %>%
filter(HQ_Pct   <  HQ_Score_Restoration_Reach_Scores$Category_upper_limit)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
# ----------------------- SPRING CHINOOK ---------------------
Habitat_Quality_Pathway_Restoration_Spring_Chinook = Spring_Chinook_Reach_Information_data_restoration  %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Restoration$`ReachName`)
print(paste("Spring Chinook Restoration - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Restoration_Spring_Chinook), sep=""))
# ----------------------- STEELHEAD ---------------------
Habitat_Quality_Pathway_Restoration_Steelhead = Steelhead_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Restoration$`ReachName`)
# --------- add Okanogan values -------
Habitat_Quality_Pathway_Restoration_Steelhead_Okanogan = Steelhead_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Restoration_Okanogan$`ReachName`)
# -------- add to output for all reaches -----
# -------- add to total output -----
HQ_data_x = PRCNT_Habitat_Quality_Okanogan_EDT[,c("ReachName","HQ_Score")]
colnames(HQ_data_x) = c("ReachName", "HQ_Pct")
HQ_data_x2 = Habitat_Quality_Scores_for_sensitivity_NEW[which(Habitat_Quality_Scores_for_sensitivity_NEW$Basin != "Okanogan"),c("ReachName", "HQ_Pct")]
HQ_data_x = rbind(HQ_data_x, HQ_data_x2)
Output_Spring_Chinook_All = merge(Output_Spring_Chinook_All  ,HQ_data_x, by = "ReachName" , all.x=TRUE)  # NOTE - some Okanogan reaches are not present in the EDT results HQ output (PRCNT_Habitat_Quality_Okanogan_EDT)
Output_Steelhead_All = merge(Output_Steelhead_All  ,HQ_data_x, by = "ReachName", all.x=TRUE )  # NOTE - some Okanogan reaches are not present in the EDT results HQ output (PRCNT_Habitat_Quality_Okanogan_EDT)
# --------- combine Wen-Ent-Wen and Okanogan -----------
Habitat_Quality_Pathway_Restoration_Steelhead = rbind(Habitat_Quality_Pathway_Restoration_Steelhead, Habitat_Quality_Pathway_Restoration_Steelhead_Okanogan)
print(paste("Steelhead Restoration - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Restoration_Steelhead), sep=""))
# ----------------------- BULL TROUT---------------------
if(exclude_bull_trout == "no"){
Habitat_Quality_Pathway_Restoration_Bull_Trout = Bull_Trout_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Restoration$`ReachName`)
print(paste("Steelhead Restoration - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Restoration_Bull_Trout), sep=""))
# ------------------- Output all Bull Trout ----------
Output_Bull_Trout_All = merge(Output_Bull_Trout_All  ,HQ_data_x, by = "ReachName", all.x=TRUE )
}
#  ---------------------------------------------------------------------------------
#            Filter out to select for Habitat Quality PROTECTION score
#  ---------------------------------------------------------------------------------
# ------------------- establish Habitat Quality Score cutoff ------------------
HQ_Score_Protection_Reach_Scores = Protection_Reach_Scoring[which(Protection_Reach_Scoring$Indicator == "Habitat_Quality_Score" &
Protection_Reach_Scoring$Category_Stage == "filter"),c("Category_lower_limit","Category_upper_limit")]
# ----------------------- filter out for Habitat_Quality_Scores reaches with Habitat Quality Score criteria --------------
Habitat_Quality_Scores_Protection = Habitat_Quality_Scores_for_sensitivity_NEW %>%
filter(HQ_Pct   >=   HQ_Score_Protection_Reach_Scores$Category_lower_limit) %>%
filter(HQ_Pct   <  HQ_Score_Protection_Reach_Scores$Category_upper_limit)
# -------------- prepare Okanogan - Steelhead --------------
Habitat_Quality_Scores_Protection_Okanogan = Habitat_Quality_Pathway_Steelhead[['Habitat_Quality_Pathway_Protection']]
Habitat_Quality_Scores_Protection_Okanogan = Habitat_Quality_Scores_Protection_Okanogan[which(Habitat_Quality_Scores_Protection_Okanogan$Basin == "Okanogan"),]
Habitat_Quality_Scores_Protection_Okanogan = Habitat_Quality_Scores_Protection_Okanogan %>%
filter(HQ_Pct   >=   HQ_Score_Protection_Reach_Scores$Category_lower_limit) %>%
filter(HQ_Pct   <  HQ_Score_Protection_Reach_Scores$Category_upper_limit)
# ------------------------ identify AUs that pass this filter in reach-based table ----------
# ----------------------- SPRING CHINOOK ---------------------
Habitat_Quality_Pathway_Protection_Spring_Chinook = Spring_Chinook_Reach_Information_data_protection %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Protection$`ReachName`)
print(paste("Spring Chinook Protection - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Protection_Spring_Chinook), sep=""))
# ----------------------- STEELHEAD ---------------------
Habitat_Quality_Pathway_Protection_Steelhead = Steelhead_Reach_Information_data_protection %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Protection$`ReachName`)
# --------- add Okanogan values -------
Habitat_Quality_Pathway_Protection_Steelhead_Okanogan = Steelhead_Reach_Information_data_protection %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Protection_Okanogan$`ReachName`)
# --------- combine Wen-Ent-Wen and Okanogan -----------
Habitat_Quality_Pathway_Protection_Steelhead = rbind(Habitat_Quality_Pathway_Protection_Steelhead, Habitat_Quality_Pathway_Protection_Steelhead_Okanogan)
print(paste("Steelhead Protection - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Protection_Steelhead), sep=""))
# -------- add to output for all reaches -----
# NOTE: no need to include here - since Restoration and Protection are driven by HQ_Pct
# ----------------------- BULL TROUT---------------------
if(exclude_bull_trout == "no"){
Habitat_Quality_Pathway_Protection_Bull_Trout = Bull_Trout_Reach_Information_data_protection %>%
filter(ReachName   %in%   Habitat_Quality_Scores_Protection$`ReachName`)
print(paste("Bull Trout Protection - total after HQ score filter: ", nrow(Habitat_Quality_Pathway_Protection_Bull_Trout), sep=""))
}
#  ---------------------------------------------------------------------------------
#
#         Limiting Factor for a High Priority Life Stage
#
#  ---------------------------------------------------------------------------------
#  ---------------------------------------------------------------------------------
#       Restoration - pull reaches with Limiting Factor for a High Priority Life Stage
#  ---------------------------------------------------------------------------------
# ----------------------- SPRING CHINOOK ---------------------
# ------------- only pull reaches with unacceptable attributes -----------
Limiting_Factor_Pathway_Spring_Chinook_Reach_Ranking = Limiting_Factor_Pathway_Spring_Chinook[["Limiting_Factor_Pathway_Restoration"]][nchar(Limiting_Factor_Pathway_Spring_Chinook[["Limiting_Factor_Pathway_Restoration"]]$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes)>0,]
# --------------- filter  the reaches ---------------
Limiting_Factor_Pathway_Restoration_Spring_Chinook = Spring_Chinook_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Limiting_Factor_Pathway_Spring_Chinook_Reach_Ranking$`ReachName`)
print(paste("Spring Chinook Restoration - total after LF score filter: ", nrow(Limiting_Factor_Pathway_Restoration_Spring_Chinook), sep=""))
# -------------- combine with HQ Pathway ------------
# ----------------------- STEELHEAD ---------------------
# ------------- only pull reaches with unacceptable attributes -----------
Limiting_Factor_Pathway_Steelhead_Reach_Ranking = Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]][nchar(Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]]$unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes)>0,]
# --------------- filter  the reaches ---------------
Limiting_Factor_Pathway_Restoration_Steelhead = Steelhead_Reach_Information_data_restoration %>%
filter(ReachName   %in%   Limiting_Factor_Pathway_Steelhead_Reach_Ranking$`ReachName`)
print(paste("Steelhead Restoration - total after LF score filter: ", nrow(Limiting_Factor_Pathway_Restoration_Steelhead), sep=""))
# ------------------------------------------------------------------------
#                     add to output of all reaches
# ------------------------------------------------------------------------
# ------------------ function that outputs the entire row (so you can check) ------
Limiting_Factor_Output_ALL_Spring_Chinook = FUNCTION_calc_Limiting_Factor_Score_ALL_Output(Output_Spring_Chinook_All, "Spring Chinook")
Limiting_Factor_Output_ALL_Steelhead = FUNCTION_calc_Limiting_Factor_Score_ALL_Output(Output_Steelhead_All, "Steelhead")
# ------------------------- Spring Chinook ----------------------------------
# list "yes" or "no" if it has a limiting factor in a high priority life stage (maybe list the limiting factor OR life stage?)
# ----------- loop through each reach and identify if the reach has a limiting factor in a priority life stage
Output_LF_all = c()
for(reach_x in Output_Spring_Chinook_All$ReachName[which(Output_Spring_Chinook_All$Basin != "Okanogan")] ){
# ------------------ pull the priority life stages in this reach -------------------
output_life_stages_x = FUNCTION_pull_High_Priority_Life_Stages_for_a_reach(reach_x, "Spring Chinook")
reach_in_LF_output = any(Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]]$ReachName == reach_x)
# --------------- IF there is a reach in the LF Pathway output -------------
if(reach_in_LF_output){
rows_x = which(Limiting_Factor_Pathway_Spring_Chinook[["Limiting_Factor_Pathway_Restoration"]]$ReachName == reach_x)
#output_life_stages_x = c()
output_limiting_factor_x = c()
for(x in rows_x){
#output_life_stages_x = c(output_life_stages_x, Limiting_Factor_Pathway_Steelhead[["Limiting_Factor_Pathway_Restoration"]][x,c("life_stage")])
output_limiting_factor_x = c(output_limiting_factor_x, Limiting_Factor_Pathway_Spring_Chinook[["Limiting_Factor_Pathway_Restoration"]][x,c("unacceptable_AND_at_risk_1_to_3_indiv_habitat_attributes")])
}
# ------------- IF reach is not in the LF pathway -----
}else{
#output_life_stages_x = "No Priority Life Stages with Limiting Factors"
output_limiting_factor_x = "No Priority Life Stages with Limiting Factors"
}
output_life_stages_x = paste(output_life_stages_x, collapse = ",")
output_limiting_factor_x = paste(output_limiting_factor_x, collapse = ",")
Output_LF_x = t(as.data.frame(c(reach_x,output_life_stages_x, output_limiting_factor_x )))
colnames(Output_LF_x) = c("ReachName", "Priority_Life_Stages","Limiting_Factors_for_Priority_Life_Stages")
Output_LF_all = rbind(Output_LF_all, Output_LF_x )
}
# ------------- combine -------------
Output_Spring_Chinook_All = merge(  Output_Spring_Chinook_All  ,  Output_LF_all, by = "ReachName", all.x= TRUE )
# --------------- generate data frame with basic info -----------
AU_level_scores_df = Reach_Information_data[,c("ReachName","Basin","Assessment.Unit","Length..miles.","Length_AvgWettedWidth_Meters")]
# --------------- add reach-level HQ Scores -----------
AU_level_scores_df = merge(AU_level_scores_df,Habitat_Quality_Scores[,c("ReachName","HQ_Pct")], by="ReachName", all.x= TRUE)
AU_unique_x = unique(AU_level_scores_df$Assessment.Unit)
AU_level_HQ_scores = c()
for(AU_x in AU_unique_x){
# ----------------------- Pull data just from that AU ---------
AU_level_scores_df_AU_x = AU_level_scores_df[which(AU_level_scores_df$Assessment.Unit == AU_x),]
# ------------- only pull reaches with HQ score -----------------
HQ_pct_true_x = which(!is.na(AU_level_scores_df_AU_x$HQ_Pct))   # pull reaches with an HQ score
AU_level_scores_df_AU_x_HQ_score = AU_level_scores_df_AU_x[HQ_pct_true_x,]
# ---------------- sum reach length for all reaches that have an HQ score --------------
tot_reach_length_miles_x = sum(AU_level_scores_df_AU_x_HQ_score$Length..miles., na.rm=T)
# ------------------ calculate percent of total reach length ----------
AU_level_scores_df_AU_x_HQ_score$reach_level_RATIO = AU_level_scores_df_AU_x_HQ_score$Length..miles./tot_reach_length_miles_x
# ----------------- calculate reach-length adjusted average --------
AU_level_scores_df_AU_x_HQ_score$HQ_Pct_reach_adj = AU_level_scores_df_AU_x_HQ_score$HQ_Pct * AU_level_scores_df_AU_x_HQ_score$reach_level_RATIO
# ------------- calculate HQ Scores -----
HQ_Pct_reach_adj_mean = sum(AU_level_scores_df_AU_x_HQ_score$HQ_Pct_reach_adj)
HQ_Pct_mean = mean(AU_level_scores_df_AU_x_HQ_score$HQ_Pct)
# ---------- if HQ_Pct is "NA" - no HQ Pct available ----------
if(is.na(HQ_Pct_mean)){
HQ_Pct_reach_adj_mean = HQ_Pct_mean
HQ_Pct_DIFF_x = NA
}else{
HQ_Pct_DIFF_x = HQ_Pct_mean - HQ_Pct_reach_adj_mean
}
# ----------------- append to AU level data -----
basin_x = AU_level_scores_df$Basin[which(AU_level_scores_df$Assessment.Unit == AU_x)][1]
output_x = t(as.data.frame( c(AU_x,basin_x,HQ_Pct_mean,HQ_Pct_reach_adj_mean, HQ_Pct_DIFF_x)  ))
AU_level_HQ_scores = rbind(AU_level_HQ_scores,output_x)
}
AU_level_HQ_scores = as.data.frame(AU_level_HQ_scores)
colnames(AU_level_HQ_scores) = c("AU","Basin", "HQ_Pct_Mean","HQ_Pct_reach_length_adj_Mean", "HQ_Pct_DIFF")
rownames(AU_level_HQ_scores) = seq(1,nrow(AU_level_HQ_scores))
AU_level_HQ_scores[c("HQ_Pct_Mean","HQ_Pct_reach_length_adj_Mean", "HQ_Pct_DIFF")] = sapply(AU_level_HQ_scores[c("HQ_Pct_Mean","HQ_Pct_reach_length_adj_Mean", "HQ_Pct_DIFF")],as.numeric)   # set columns as numeric
plot_true = TRUE
if(plot_true){
hist(AU_level_HQ_scores$HQ_Pct_DIFF, breaks=20)
abline(v=0, col="red")
}
View(AU_level_HQ_scores)
dim(AU_level_scores_df)
View(AU_level_scores_df)
colnames(Habitat_Quality_Scores)
# --------------- generate data frame with basic info -----------
AU_level_scores_df = Reach_Information_data[,c("ReachName","Basin","Assessment.Unit","Length..miles.","Length_AvgWettedWidth_Meters")]
# --------------- add reach-level HQ Scores -----------
AU_level_scores_df = merge(AU_level_scores_df,Habitat_Quality_Scores[,c("ReachName","HQ_Pct","Stability_Mean","CoarseSubstrate_score","Cover-Wood_score","Flow-SummerBaseFlow_score",
"Off-Channel-Floodplain_score","Off-Channel-Side-Channels_score","PoolQuantity&Quality_score","Riparian_Mean" , "Temperature-Rearing_score")], by="ReachName", all.x= TRUE)
tot_reach_length_miles_x
AU_x
# ----------------------- Pull data just from that AU ---------
AU_level_scores_df_AU_x = AU_level_scores_df[which(AU_level_scores_df$Assessment.Unit == AU_x),]
colnames(AU_level_scores_df_AU_x)
